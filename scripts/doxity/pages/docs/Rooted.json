{"fileName":"/contracts/core/common/Rooted.sol","name":"Rooted","abi":[{"constant":false,"inputs":[],"name":"claimContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"}],"name":"changeContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"pendingContractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"},{"name":"_data","type":"bytes"}],"name":"forwardCall","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"destroy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"}],"name":"transferContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"contractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"tokens","type":"address[]"},{"name":"_to","type":"address"}],"name":"withdrawnTokens","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"}],"source":"pragma solidity ^0.4.11;\n\nimport \"./Object.sol\";\n\n/**\n * @title Owned contract with arbitrary call forwarding.\n *\n * Allows an owner to perform any action by the name of this contract.\n *\n * Note: should not be used in contracts that must make calls not controlled by owner.\n */\ncontract Rooted is Object {\n    /**\n     * Perform an arbitrary call.\n     *\n     * Can only be called by contract owner.\n     * Throws if call forwarding failed.\n     *\n     * @param _to address to call to.\n     * @param _value wei value to pass with the call.\n     * @param _data bytes data to pass with the call.\n     *\n     * @return success.\n     */\n    function forwardCall(address _to, uint _value, bytes _data) onlyContractOwner() returns(bool) {\n        if (!_to.call.value(_value)(_data)) {\n            throw;\n        }\n        return true;\n    }\n}\n","abiDocs":[{"constant":false,"inputs":[],"name":"claimContractOwnership","payable":false,"stateMutability":"nonpayable","type":"function","signature":"claimContractOwnership()","signatureHash":"4592cd1d"},{"constant":false,"inputs":[{"name":"_to","type":"address"}],"name":"changeContractOwnership","payable":false,"stateMutability":"nonpayable","type":"function","signature":"changeContractOwnership(address)","signatureHash":"557f4bc9"},{"constant":true,"inputs":[],"name":"pendingContractOwner","payable":false,"stateMutability":"view","type":"function","signature":"pendingContractOwner()","signatureHash":"5aa77d3c"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"},{"name":"_data","type":"bytes"}],"name":"forwardCall","payable":false,"stateMutability":"nonpayable","type":"function","signature":"forwardCall(address,uint256,bytes)","signatureHash":"6effec50"},{"constant":false,"inputs":[],"name":"destroy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"destroy()","signatureHash":"83197ef0"},{"constant":false,"inputs":[{"name":"_to","type":"address"}],"name":"transferContractOwnership","payable":false,"stateMutability":"nonpayable","type":"function","signature":"transferContractOwnership(address)","signatureHash":"a843c51f"},{"constant":true,"inputs":[],"name":"contractOwner","payable":false,"stateMutability":"view","type":"function","signature":"contractOwner()","signatureHash":"ce606ee0"},{"constant":false,"inputs":[{"name":"tokens","type":"address[]"},{"name":"_to","type":"address"}],"name":"withdrawnTokens","payable":false,"stateMutability":"nonpayable","type":"function","signature":"withdrawnTokens(address[],address)","signatureHash":"d8f9659b"}]}
