{"title":"ChronoBank Asset implementation contract. * Basic asset implementation contract, without any additional logic. Every other asset implementation contracts should derive from this one. Receives calls from the proxy, and calls back immediatly without arguments modification. * Note: all the non constant functions return false instead of throwing in case if state change didn't happen yet.","fileName":"/contracts/core/platform/ChronoBankAsset.sol","name":"ChronoBankAsset","abi":[{"constant":false,"inputs":[{"name":"_proxy","type":"address"}],"name":"init","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"},{"name":"_reference","type":"string"},{"name":"_sender","type":"address"}],"name":"__transferWithReference","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"},{"name":"_sender","type":"address"}],"name":"__approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"proxy","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"},{"name":"_reference","type":"string"},{"name":"_sender","type":"address"}],"name":"__transferFromWithReference","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_data","type":"bytes"},{"name":"_sender","type":"address"}],"name":"__process","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}],"source":"pragma solidity ^0.4.11;\n\nimport \"./ChronoBankAssetInterface.sol\";\nimport {ChronoBankAssetProxyInterface as ChronoBankAssetProxy} from \"./ChronoBankAssetProxyInterface.sol\";\n\n/**\n * @title ChronoBank Asset implementation contract.\n *\n * Basic asset implementation contract, without any additional logic.\n * Every other asset implementation contracts should derive from this one.\n * Receives calls from the proxy, and calls back immediatly without arguments modification.\n *\n * Note: all the non constant functions return false instead of throwing in case if state change\n * didn't happen yet.\n */\ncontract ChronoBankAsset is ChronoBankAssetInterface {\n    // Assigned asset proxy contract, immutable.\n    ChronoBankAssetProxy public proxy;\n\n    /**\n     * Only assigned proxy is allowed to call.\n     */\n    modifier onlyProxy() {\n        if (proxy == msg.sender) {\n            _;\n        }\n    }\n\n    /**\n     * Sets asset proxy address.\n     *\n     * Can be set only once.\n     *\n     * @param _proxy asset proxy contract address.\n     *\n     * @return success.\n     * @dev function is final, and must not be overridden.\n     */\n    function init(ChronoBankAssetProxy _proxy) returns(bool) {\n        if (address(proxy) != 0x0) {\n            return false;\n        }\n        proxy = _proxy;\n        return true;\n    }\n\n    /**\n     * Passes execution into virtual function.\n     *\n     * Can only be called by assigned asset proxy.\n     *\n     * @return success.\n     * @dev function is final, and must not be overridden.\n     */\n    function __transferWithReference(address _to, uint _value, string _reference, address _sender) onlyProxy() returns(bool) {\n        return _transferWithReference(_to, _value, _reference, _sender);\n    }\n\n    /**\n     * Calls back without modifications.\n     *\n     * @return success.\n     * @dev function is virtual, and meant to be overridden.\n     */\n    function _transferWithReference(address _to, uint _value, string _reference, address _sender) internal returns(bool) {\n        return proxy.__transferWithReference(_to, _value, _reference, _sender);\n    }\n\n    /**\n     * Passes execution into virtual function.\n     *\n     * Can only be called by assigned asset proxy.\n     *\n     * @return success.\n     * @dev function is final, and must not be overridden.\n     */\n    function __transferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) onlyProxy() returns(bool) {\n        return _transferFromWithReference(_from, _to, _value, _reference, _sender);\n    }\n\n    /**\n     * Calls back without modifications.\n     *\n     * @return success.\n     * @dev function is virtual, and meant to be overridden.\n     */\n    function _transferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) internal returns(bool) {\n        return proxy.__transferFromWithReference(_from, _to, _value, _reference, _sender);\n    }\n\n    /**\n     * Passes execution into virtual function.\n     *\n     * Can only be called by assigned asset proxy.\n     *\n     * @return success.\n     * @dev function is final, and must not be overridden.\n     */\n    function __approve(address _spender, uint _value, address _sender) onlyProxy() returns(bool) {\n        return _approve(_spender, _value, _sender);\n    }\n\n    /**\n     * Calls back without modifications.\n     *\n     * @return success.\n     * @dev function is virtual, and meant to be overridden.\n     */\n    function _approve(address _spender, uint _value, address _sender) internal returns(bool) {\n        return proxy.__approve(_spender, _value, _sender);\n    }\n}\n","abiDocs":[{"constant":false,"inputs":[{"name":"_proxy","type":"address","description":"asset proxy contract address."}],"name":"init","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","details":"function is final, and must not be overridden.","return":"success.","notice":"Sets asset proxy address.     * Can be set only once.","signature":"init(address)","signatureHash":"19ab453c"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"},{"name":"_reference","type":"string"},{"name":"_sender","type":"address"}],"name":"__transferWithReference","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","details":"function is final, and must not be overridden.","return":"success.","notice":"Passes execution into virtual function.     * Can only be called by assigned asset proxy.","signature":"__transferWithReference(address,uint256,string,address)","signatureHash":"6a630ee7"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"},{"name":"_sender","type":"address"}],"name":"__approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","details":"function is final, and must not be overridden.","return":"success.","notice":"Passes execution into virtual function.     * Can only be called by assigned asset proxy.","signature":"__approve(address,uint256,address)","signatureHash":"7b7054c8"},{"constant":true,"inputs":[],"name":"proxy","payable":false,"stateMutability":"view","type":"function","signature":"proxy()","signatureHash":"ec556889"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"},{"name":"_reference","type":"string"},{"name":"_sender","type":"address"}],"name":"__transferFromWithReference","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","details":"function is final, and must not be overridden.","return":"success.","notice":"Passes execution into virtual function.     * Can only be called by assigned asset proxy.","signature":"__transferFromWithReference(address,address,uint256,string,address)","signatureHash":"ec698a28"},{"constant":false,"inputs":[{"name":"_data","type":"bytes"},{"name":"_sender","type":"address"}],"name":"__process","outputs":[],"payable":true,"stateMutability":"payable","type":"function","signature":"__process(bytes,address)","signatureHash":"f2d6e0ab"}]}
