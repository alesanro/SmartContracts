{"fileName":"/contracts/exchange/ExchangeManager.sol","name":"ExchangeManager","abi":[{"constant":false,"inputs":[{"name":"exchange","type":"address"},{"name":"symbol","type":"bytes32"}],"name":"emitExchangeRemoved","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_symbol","type":"bytes32"},{"name":"_buyPrice","type":"uint256"},{"name":"_buyDecimals","type":"uint256"},{"name":"_sellPrice","type":"uint256"},{"name":"_sellDecimals","type":"uint256"},{"name":"_authorizedManager","type":"address"},{"name":"_isActive","type":"bool"}],"name":"createExchange","outputs":[{"name":"errorCode","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"claimContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"removeExchange","outputs":[{"name":"errorCode","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_identifier","type":"bytes32"}],"name":"lookupManager","outputs":[{"name":"manager","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"contractsManager","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"}],"name":"changeContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_exchange","type":"address"}],"name":"isExchangeExists","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"pendingContractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getExchangeFactory","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_eventsHistory","type":"address"}],"name":"setEventsHistory","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_fee","type":"uint256"}],"name":"setFee","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address"}],"name":"setContractsManager","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"getExchangesForOwner","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_exchanges","type":"address[]"}],"name":"getExchangeData","outputs":[{"name":"symbols","type":"bytes32[]"},{"name":"buyPrices","type":"uint256[]"},{"name":"buyDecimals","type":"uint256[]"},{"name":"sellPrices","type":"uint256[]"},{"name":"sellDecimals","type":"uint256[]"},{"name":"assetBalances","type":"uint256[]"},{"name":"ethBalances","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"destroy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getExchangesCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"user","type":"address"},{"name":"exchange","type":"address"},{"name":"symbol","type":"bytes32"}],"name":"emitExchangeAdded","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"}],"name":"transferContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"user","type":"address"},{"name":"exchange","type":"address"},{"name":"symbol","type":"bytes32"},{"name":"rewards","type":"address"},{"name":"fee","type":"uint256"},{"name":"buyPrice","type":"uint256"},{"name":"sellPrice","type":"uint256"}],"name":"emitExchangeCreated","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_fromIdx","type":"uint256"},{"name":"_length","type":"uint256"}],"name":"getExchanges","outputs":[{"name":"result","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"contractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getFee","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_exchangeFactory","type":"address"}],"name":"setExchangeFactory","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"tokens","type":"address[]"},{"name":"_to","type":"address"}],"name":"withdrawnTokens","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"errorCode","type":"uint256"}],"name":"emitError","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"getExchangesForOwnerCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address"},{"name":"_exchangeFactory","type":"address"}],"name":"init","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"key","type":"address"}],"name":"isAuthorized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getEventsHistory","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_store","type":"address"},{"name":"_crate","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":true,"name":"user","type":"address"},{"indexed":false,"name":"exchange","type":"address"},{"indexed":false,"name":"symbol","type":"bytes32"},{"indexed":false,"name":"rewards","type":"address"},{"indexed":false,"name":"fee","type":"uint256"},{"indexed":false,"name":"buyPrice","type":"uint256"},{"indexed":false,"name":"sellPrice","type":"uint256"}],"name":"ExchangeCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":true,"name":"user","type":"address"},{"indexed":false,"name":"exchange","type":"address"},{"indexed":false,"name":"symbol","type":"bytes32"}],"name":"ExchangeAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"exchange","type":"address"},{"indexed":false,"name":"symbol","type":"bytes32"}],"name":"ExchangeRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"errorCode","type":"uint256"}],"name":"Error","type":"event"}],"source":"pragma solidity ^0.4.11;\n\nimport \"../core/common/BaseManager.sol\";\nimport \"../core/erc20/ERC20Manager.sol\";\nimport \"../core/event/MultiEventsHistory.sol\";\nimport {ERC20Interface as Asset} from \"../core/erc20/ERC20Interface.sol\";\n\nimport \"./Exchange.sol\";\nimport \"./ExchangeManagerEmitter.sol\";\nimport \"./ExchangeFactory.sol\";\n\n/**\n*  ExchangeManager\n*\n*  ExchangeManager contract is the exchange registry which holds info\n*  about created exchanges and provides some util methods for managing it.\n*\n*  The entry point for creating new exchanges.\n*\n*  CBE users are permited to manage fee value against which an exchange will calculate fee.\n*/\ncontract ExchangeManager is ExchangeManagerEmitter, BaseManager {\n    uint constant ERROR_EXCHANGE_STOCK_NOT_FOUND = 7000;\n    uint constant ERROR_EXCHANGE_STOCK_INTERNAL = 7001;\n    uint constant ERROR_EXCHANGE_STOCK_UNKNOWN_SYMBOL = 7002;\n\n    StorageInterface.Address exchangeFactory;\n    StorageInterface.Set exchanges; // (exchange [])\n    StorageInterface.AddressesSetMapping owners; // (owner => exchange [])\n    StorageInterface.UInt fee;\n\n    modifier onlyExchangeContractOwner(address _exchange) {\n        if (Exchange(_exchange).contractOwner() == msg.sender) {\n            _;\n        }\n    }\n\n    /**\n    *  Contructor\n    */\n    function ExchangeManager(Storage _store, bytes32 _crate) BaseManager(_store, _crate) public {\n        exchanges.init(\"ex_m_exchanges\");\n        owners.init(\"ex_m_owners\");\n        exchangeFactory.init(\"ex_m_exchangeFactory\");\n        fee.init(\"ex_m_fee\");\n    }\n\n    /**\n    *  Initialises an exchange with the given params\n    */\n    function init(address _contractsManager, address _exchangeFactory)\n    public\n    onlyContractOwner\n    returns (uint)\n    {\n        BaseManager.init(_contractsManager, \"ExchangeManager\");\n        if (setExchangeFactory(_exchangeFactory) != OK) {\n            revert();\n        }\n        return OK;\n    }\n\n    /**\n    *  Sets fee value against which the exchange should calculate fee.\n    *\n    *  Note, only CBE members are allowed to set this value.\n    */\n    function setFee(uint _fee)\n    public\n    onlyAuthorized\n    returns (uint)\n    {\n        require(_fee < 10000);\n        store.set(fee, _fee);\n        return OK;\n    }\n\n    /**\n    *  Sets the Exchange Factory address\n    */\n    function setExchangeFactory(address _exchangeFactory)\n    public\n    onlyContractOwner\n    returns (uint)\n    {\n        require(_exchangeFactory != 0x0);\n        store.set(exchangeFactory, _exchangeFactory);\n        return OK;\n    }\n\n    /**\n    *  Creates a new exchange with the given params.\n    */\n    function createExchange(\n        bytes32 _symbol,\n        uint _buyPrice,\n        uint _buyDecimals,\n        uint _sellPrice,\n        uint _sellDecimals,\n        address _authorizedManager,\n        bool _isActive)\n    public\n    returns (uint errorCode)\n    {\n        address token = lookupERC20Manager().getTokenAddressBySymbol(_symbol);\n        if (token == 0x0) {\n            return _emitError(ERROR_EXCHANGE_STOCK_UNKNOWN_SYMBOL);\n        }\n\n        address rewards = lookupManager(\"Rewards\");\n        if (rewards == 0x0) {\n            return _emitError(ERROR_EXCHANGE_STOCK_INTERNAL);\n        }\n\n        Exchange exchange = Exchange(getExchangeFactory().createExchange());\n\n        exchange.setupEventsHistory(getEventsHistory());\n        if (!MultiEventsHistory(getEventsHistory()).authorize(exchange)) {\n            revert();\n        }\n\n        exchange.init(contractsManager, token, rewards, getFee());\n\n        if (_buyPrice > 0 && _sellPrice > 0) {\n            if (exchange.setPrices(_buyPrice, _buyDecimals, _sellPrice, _sellDecimals) != OK) {\n                revert();\n            }\n        }\n\n        if (_authorizedManager != 0x0) {\n            if (exchange.grantAuthorized(_authorizedManager) != OK) {\n                revert();\n            }\n        }\n\n        if (exchange.setActive(_isActive) != OK) {\n            revert();\n        }\n\n        if (!exchange.transferContractOwnership(msg.sender)) {\n            revert();\n        }\n\n        store.add(exchanges, bytes32(address(exchange)));\n        store.add(owners, bytes32(msg.sender), address(exchange));\n\n        assert(exchange.contractOwner() == msg.sender);\n        assert(exchange.rewards() == rewards);\n        assert(exchange.feePercent() == getFee());\n\n        _emitExchangeCreated(msg.sender, exchange, _symbol, rewards, getFee(), _buyPrice, _sellPrice);\n        return OK;\n    }\n\n    /**\n    *  Deletes msg.sender from the exchange list.\n    *  Note: Designed to be called only by exchange contract.\n    */\n    function removeExchange()\n    public\n    returns (uint errorCode)\n    {\n        if (!isExchangeExists(msg.sender)) {\n            return _emitError(ERROR_EXCHANGE_STOCK_NOT_FOUND);\n        }\n\n        store.remove(exchanges, bytes32(msg.sender));\n        MultiEventsHistory(getEventsHistory()).reject(msg.sender);\n\n        address owner = Exchange(msg.sender).contractOwner();\n        store.remove(owners, bytes32(owner), msg.sender);\n\n        _emitExchangeRemoved(msg.sender);\n        return OK;\n    }\n\n    /**\n    *  Tells whether the given _exchange is in registry.\n    */\n    function isExchangeExists(address _exchange) public view returns (bool) {\n        return store.includes(exchanges, bytes32(_exchange));\n    }\n\n    /**\n    *  Returns the paginated array of excnhages, starting from _fromIdx and len _length.\n    */\n    function getExchanges(uint _fromIdx, uint _length) public view returns (address [] result) {\n        result = new address [] (_length);\n        for (uint idx = 0; idx < _length; idx++) {\n            result[idx] = address(store.get(exchanges, idx + _fromIdx));\n        }\n    }\n\n    /**\n    *  Returns the count of the registered exchanges.\n    */\n    function getExchangesCount() public view returns (uint) {\n        return store.count(exchanges);\n    }\n\n    /**\n    *  Returns the exchanges which belongs to the given _owner\n    */\n    function getExchangesForOwner(address _owner) public view returns (address []) {\n        return store.get(owners, bytes32(_owner));\n    }\n\n    /**\n    *  Returns the number of exchanges which belongs to the given _owner\n    */\n    function getExchangesForOwnerCount(address _owner) public view returns (uint) {\n        return store.count(owners, bytes32(_owner));\n    }\n\n    /**\n    *  The fee value against which the exchange should calculate fee.\n    */\n    function getFee() public view returns (uint) {\n        return store.get(fee);\n    }\n\n    /**\n    *  Util method which returns agregated data for given _exchanges.\n    */\n    function getExchangeData(address [] _exchanges)\n    external\n    view\n    returns (bytes32 [] symbols,\n             uint [] buyPrices,\n             uint [] buyDecimals,\n             uint [] sellPrices,\n             uint [] sellDecimals,\n             uint [] assetBalances,\n             uint [] ethBalances)\n    {\n        symbols = new bytes32 [] (_exchanges.length);\n        buyPrices = new uint [] (_exchanges.length);\n        buyDecimals = new uint [] (_exchanges.length);\n        sellPrices = new uint [] (_exchanges.length);\n        sellDecimals = new uint [] (_exchanges.length);\n        assetBalances = new uint [] (_exchanges.length);\n        ethBalances = new uint [] (_exchanges.length);\n\n        for (uint idx = 0; idx < _exchanges.length; idx++) {\n            if (isExchangeExists(_exchanges[idx])) {\n                Exchange exchange = Exchange(_exchanges[idx]);\n\n                symbols[idx] = getSymbol(address(exchange.asset()));\n                (buyPrices[idx], buyDecimals[idx]) = exchange.getBuyPrice();\n                (sellPrices[idx], sellDecimals[idx]) = exchange.getSellPrice();\n                assetBalances[idx] = exchange.assetBalance();\n                ethBalances[idx] = exchange.balance;\n            }\n        }\n    }\n\n    /**\n    *  Returns the Exchange Factory address\n    */\n    function getExchangeFactory() public view returns (ExchangeFactory) {\n        return ExchangeFactory(store.get(exchangeFactory));\n    }\n\n    /**\n    *  Retturns ERC20Manager address\n    */\n    function lookupERC20Manager() internal view returns (ERC20Manager) {\n        return ERC20Manager(lookupManager(\"ERC20Manager\"));\n    }\n\n    /**\n    *  Returns the symbol of the given token\n    */\n    function getSymbol(address _token) internal view returns (bytes32) {\n        var (,,symbol,,,,) = lookupERC20Manager().getTokenMetaData(_token);\n        return symbol;\n    }\n\n    // Events History util methods\n\n    function _emitExchangeRemoved(address _exchange) internal {\n        Asset asset = Exchange(_exchange).asset();\n        ExchangeManagerEmitter(getEventsHistory())\n            .emitExchangeRemoved(_exchange, getSymbol(address(asset)));\n    }\n\n    function _emitExchangeAdded(address _user, address _exchange) internal {\n        Asset asset = Exchange(_exchange).asset();\n        ExchangeManagerEmitter(getEventsHistory())\n            .emitExchangeAdded(_user, _exchange, getSymbol(address(asset)));\n    }\n\n    function _emitExchangeCreated(\n        address _user,\n        address _exchange,\n        bytes32 _symbol,\n        address _rewards,\n        uint _fee,\n        uint _buyPrice,\n        uint _sellPrice)\n    internal\n    {\n        ExchangeManagerEmitter(getEventsHistory())\n            .emitExchangeCreated(_user, _exchange, _symbol, _rewards, _fee, _buyPrice, _sellPrice);\n    }\n\n    function _emitError(uint error) internal returns (uint) {\n        ExchangeManagerEmitter(getEventsHistory()).emitError(error);\n        return error;\n    }\n}\n","abiDocs":[{"constant":false,"inputs":[{"name":"exchange","type":"address"},{"name":"symbol","type":"bytes32"}],"name":"emitExchangeRemoved","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitExchangeRemoved(address,bytes32)","signatureHash":"0c629c27"},{"constant":false,"inputs":[{"name":"_symbol","type":"bytes32"},{"name":"_buyPrice","type":"uint256"},{"name":"_buyDecimals","type":"uint256"},{"name":"_sellPrice","type":"uint256"},{"name":"_sellDecimals","type":"uint256"},{"name":"_authorizedManager","type":"address"},{"name":"_isActive","type":"bool"}],"name":"createExchange","payable":false,"stateMutability":"nonpayable","type":"function","notice":"Creates a new exchange with the given params.","signature":"createExchange(bytes32,uint256,uint256,uint256,uint256,address,bool)","signatureHash":"14178fbd"},{"constant":false,"inputs":[],"name":"claimContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Finalize ownership pass.     * Can only be called by pending owner.","signature":"claimContractOwnership()","signatureHash":"4592cd1d"},{"constant":false,"inputs":[],"name":"removeExchange","payable":false,"stateMutability":"nonpayable","type":"function","notice":"Deletes msg.sender from the exchange list. Note: Designed to be called only by exchange contract.","signature":"removeExchange()","signatureHash":"4ea3b642"},{"constant":true,"inputs":[{"name":"_identifier","type":"bytes32","description":"is a manager's identifier. 0x0 is not allowed."}],"name":"lookupManager","payable":false,"stateMutability":"view","type":"function","details":"Returns manager's address by its identifier (type).","notice":"Will crash if no manager in the system with given identifier.","signature":"lookupManager(bytes32)","signatureHash":"4fe59012"},{"constant":true,"inputs":[],"name":"contractsManager","payable":false,"stateMutability":"view","type":"function","signature":"contractsManager()","signatureHash":"53253d31"},{"constant":false,"inputs":[{"name":"_to","type":"address","description":"address of the next owner. 0x0 is not allowed."}],"name":"changeContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Prepares ownership pass.     * Can only be called by current owner.","signature":"changeContractOwnership(address)","signatureHash":"557f4bc9"},{"constant":true,"inputs":[{"name":"_exchange","type":"address"}],"name":"isExchangeExists","payable":false,"stateMutability":"view","type":"function","notice":"Tells whether the given _exchange is in registry.","signature":"isExchangeExists(address)","signatureHash":"58f09007"},{"constant":true,"inputs":[],"name":"pendingContractOwner","payable":false,"stateMutability":"view","type":"function","signature":"pendingContractOwner()","signatureHash":"5aa77d3c"},{"constant":true,"inputs":[],"name":"getExchangeFactory","payable":false,"stateMutability":"view","type":"function","notice":"Returns the Exchange Factory address","signature":"getExchangeFactory()","signatureHash":"5ddcdc67"},{"constant":false,"inputs":[{"name":"_eventsHistory","type":"address"}],"name":"setEventsHistory","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"setEventsHistory(address)","signatureHash":"6521afd7"},{"constant":false,"inputs":[{"name":"_fee","type":"uint256"}],"name":"setFee","payable":false,"stateMutability":"nonpayable","type":"function","notice":"Sets fee value against which the exchange should calculate fee.    *  Note, only CBE members are allowed to set this value.","signature":"setFee(uint256)","signatureHash":"69fe0e2d"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address","description":"contracts manager. 0x0 is not allowed."}],"name":"setContractsManager","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Setter for ContractsManager. Force overrides currect manager.","signature":"setContractsManager(address)","signatureHash":"71d3b573"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"getExchangesForOwner","payable":false,"stateMutability":"view","type":"function","notice":"Returns the exchanges which belongs to the given _owner","signature":"getExchangesForOwner(address)","signatureHash":"72ffb543"},{"constant":true,"inputs":[{"name":"_exchanges","type":"address[]"}],"name":"getExchangeData","payable":false,"stateMutability":"view","type":"function","notice":"Util method which returns agregated data for given _exchanges.","signature":"getExchangeData(address[])","signatureHash":"79f4289a"},{"constant":false,"inputs":[],"name":"destroy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"destroy()","signatureHash":"83197ef0"},{"constant":true,"inputs":[],"name":"getExchangesCount","payable":false,"stateMutability":"view","type":"function","notice":"Returns the count of the registered exchanges.","signature":"getExchangesCount()","signatureHash":"a64f51d3"},{"constant":false,"inputs":[{"name":"user","type":"address"},{"name":"exchange","type":"address"},{"name":"symbol","type":"bytes32"}],"name":"emitExchangeAdded","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitExchangeAdded(address,address,bytes32)","signatureHash":"a82ca7e6"},{"constant":false,"inputs":[{"name":"_to","type":"address","description":"the next contract owner"}],"name":"transferContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Direct ownership pass without change/claim pattern. Can be invoked only by current contract owner","return":"`true` if success, `false` otherwise","signature":"transferContractOwnership(address)","signatureHash":"a843c51f"},{"constant":false,"inputs":[{"name":"user","type":"address"},{"name":"exchange","type":"address"},{"name":"symbol","type":"bytes32"},{"name":"rewards","type":"address"},{"name":"fee","type":"uint256"},{"name":"buyPrice","type":"uint256"},{"name":"sellPrice","type":"uint256"}],"name":"emitExchangeCreated","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitExchangeCreated(address,address,bytes32,address,uint256,uint256,uint256)","signatureHash":"b6b440d6"},{"constant":true,"inputs":[{"name":"_fromIdx","type":"uint256"},{"name":"_length","type":"uint256"}],"name":"getExchanges","payable":false,"stateMutability":"view","type":"function","notice":"Returns the paginated array of excnhages, starting from _fromIdx and len _length.","signature":"getExchanges(uint256,uint256)","signatureHash":"c1f8ab5a"},{"constant":true,"inputs":[],"name":"contractOwner","payable":false,"stateMutability":"view","type":"function","signature":"contractOwner()","signatureHash":"ce606ee0"},{"constant":true,"inputs":[],"name":"getFee","payable":false,"stateMutability":"view","type":"function","notice":"The fee value against which the exchange should calculate fee.","signature":"getFee()","signatureHash":"ced72f87"},{"constant":false,"inputs":[{"name":"_exchangeFactory","type":"address"}],"name":"setExchangeFactory","payable":false,"stateMutability":"nonpayable","type":"function","notice":"Sets the Exchange Factory address","signature":"setExchangeFactory(address)","signatureHash":"d12ebeaa"},{"constant":false,"inputs":[{"name":"tokens","type":"address[]"},{"name":"_to","type":"address"}],"name":"withdrawnTokens","payable":false,"stateMutability":"nonpayable","type":"function","signature":"withdrawnTokens(address[],address)","signatureHash":"d8f9659b"},{"constant":false,"inputs":[{"name":"errorCode","type":"uint256"}],"name":"emitError","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitError(uint256)","signatureHash":"df26ca08"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"getExchangesForOwnerCount","payable":false,"stateMutability":"view","type":"function","notice":"Returns the number of exchanges which belongs to the given _owner","signature":"getExchangesForOwnerCount(address)","signatureHash":"e425c907"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address"},{"name":"_exchangeFactory","type":"address"}],"name":"init","payable":false,"stateMutability":"nonpayable","type":"function","notice":"Initialises an exchange with the given params","signature":"init(address,address)","signatureHash":"f09a4016"},{"constant":true,"inputs":[{"name":"key","type":"address"}],"name":"isAuthorized","payable":false,"stateMutability":"view","type":"function","signature":"isAuthorized(address)","signatureHash":"fe9fbb80"},{"constant":true,"inputs":[],"name":"getEventsHistory","payable":false,"stateMutability":"view","type":"function","signature":"getEventsHistory()","signatureHash":"fff10aba"},{"inputs":[{"name":"_store","type":"address"},{"name":"_crate","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":true,"name":"user","type":"address"},{"indexed":false,"name":"exchange","type":"address"},{"indexed":false,"name":"symbol","type":"bytes32"},{"indexed":false,"name":"rewards","type":"address"},{"indexed":false,"name":"fee","type":"uint256"},{"indexed":false,"name":"buyPrice","type":"uint256"},{"indexed":false,"name":"sellPrice","type":"uint256"}],"name":"ExchangeCreated","type":"event","signature":"ExchangeCreated(address,address,address,bytes32,address,uint256,uint256,uint256)","signatureHash":"e4a3732f"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":true,"name":"user","type":"address"},{"indexed":false,"name":"exchange","type":"address"},{"indexed":false,"name":"symbol","type":"bytes32"}],"name":"ExchangeAdded","type":"event","signature":"ExchangeAdded(address,address,address,bytes32)","signatureHash":"b929f1a4"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"exchange","type":"address"},{"indexed":false,"name":"symbol","type":"bytes32"}],"name":"ExchangeRemoved","type":"event","signature":"ExchangeRemoved(address,address,bytes32)","signatureHash":"ff447254"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"errorCode","type":"uint256"}],"name":"Error","type":"event","signature":"Error(address,uint256)","signatureHash":"9cf38cf2"}]}
