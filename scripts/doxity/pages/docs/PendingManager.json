{"fileName":"/contracts/pending/PendingManager.sol","name":"PendingManager","abi":[{"constant":false,"inputs":[{"name":"_hash","type":"bytes32"},{"name":"_data","type":"bytes"},{"name":"_to","type":"address"},{"name":"_sender","type":"address"}],"name":"addTx","outputs":[{"name":"errorCode","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"owner","type":"address"},{"name":"hash","type":"bytes32"}],"name":"emitConfirmation","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address"}],"name":"init","outputs":[{"name":"errorCode","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getUserManager","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"claimContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_identifier","type":"bytes32"}],"name":"lookupManager","outputs":[{"name":"manager","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_hash","type":"bytes32"}],"name":"getTxData","outputs":[{"name":"","type":"bytes"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"contractsManager","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"}],"name":"changeContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"pendingContractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_eventsHistory","type":"address"}],"name":"setEventsHistory","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address"}],"name":"setContractsManager","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_hash","type":"bytes32"}],"name":"confirm","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"hash","type":"bytes32"}],"name":"emitCancelled","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"destroy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_hash","type":"bytes32"}],"name":"pendingYetNeeded","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"}],"name":"transferContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_hash","type":"bytes32"}],"name":"revoke","outputs":[{"name":"errorCode","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_hash","type":"bytes32"}],"name":"getTx","outputs":[{"name":"_data","type":"bytes"},{"name":"_yetNeeded","type":"uint256"},{"name":"_ownersDone","type":"uint256"},{"name":"_timestamp","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"hash","type":"bytes32"},{"name":"data","type":"bytes"},{"name":"timestamp","type":"uint256"}],"name":"emitDone","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_hash","type":"bytes32"},{"name":"_owner","type":"address"}],"name":"hasConfirmed","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"contractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"pendingsCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"owner","type":"address"},{"name":"hash","type":"bytes32"}],"name":"emitRevoke","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"tokens","type":"address[]"},{"name":"_to","type":"address"}],"name":"withdrawnTokens","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"errorCode","type":"uint256"}],"name":"emitError","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getTxs","outputs":[{"name":"_hashes","type":"bytes32[]"},{"name":"_yetNeeded","type":"uint256[]"},{"name":"_ownersDone","type":"uint256[]"},{"name":"_timestamp","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"key","type":"address"}],"name":"isAuthorized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getEventsHistory","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_store","type":"address"},{"name":"_crate","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":false,"stateMutability":"nonpayable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"hash","type":"bytes32"}],"name":"Confirmation","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"hash","type":"bytes32"}],"name":"Revoke","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":true,"name":"hash","type":"bytes32"}],"name":"Cancelled","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":true,"name":"hash","type":"bytes32"},{"indexed":false,"name":"data","type":"bytes"},{"indexed":false,"name":"timestamp","type":"uint256"}],"name":"Done","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"errorCode","type":"uint256"}],"name":"Error","type":"event"}],"source":"pragma solidity ^0.4.11;\n\nimport \"../core/user/UserManagerInterface.sol\";\nimport \"../core/common/BaseManager.sol\";\nimport \"./PendingManagerEmitter.sol\";\n\ncontract PendingManager is PendingManagerEmitter, BaseManager {\n\n    uint constant ERROR_PENDING_NOT_FOUND = 4000;\n    uint constant ERROR_PENDING_INVALID_INVOCATION = 4001;\n    uint constant ERROR_PENDING_ADD_CONTRACT = 4002;\n    uint constant ERROR_PENDING_DUPLICATE_TX = 4003;\n    uint constant ERROR_PENDING_CANNOT_CONFIRM = 4004;\n    uint constant ERROR_PENDING_PREVIOUSLY_CONFIRMED = 4005;\n\n    // TYPES\n    StorageInterface.Set txHashes;\n    StorageInterface.Bytes32AddressMapping to;\n    StorageInterface.Bytes32UIntMapping value;\n    StorageInterface.Bytes32UIntMapping yetNeeded;\n    StorageInterface.Bytes32UIntMapping ownersDone;\n    StorageInterface.Bytes32UIntMapping timestamp;\n\n    mapping (bytes32 => bytes) data;\n\n    function PendingManager(Storage _store, bytes32 _crate) BaseManager(_store, _crate) {\n        txHashes.init('txHashesh');\n        to.init('to');\n        value.init('value');\n        yetNeeded.init('yetNeeded');\n        ownersDone.init('ownersDone');\n        timestamp.init('timestamp');\n    }\n\n    // METHODS\n\n    function init(address _contractsManager) onlyContractOwner returns (uint errorCode) {\n        BaseManager.init(_contractsManager, \"PendingManager\");\n        return OK;\n    }\n\n    function pendingsCount() constant returns (uint) {\n        return store.count(txHashes);\n    }\n\n    function getTxs() constant returns (bytes32[] _hashes, uint[] _yetNeeded, uint[] _ownersDone, uint[] _timestamp) {\n        _hashes = new bytes32[](pendingsCount());\n        _yetNeeded = new uint[](pendingsCount());\n        _ownersDone = new uint[](pendingsCount());\n        _timestamp = new uint[](pendingsCount());\n        for (uint i = 0; i < pendingsCount(); i++) {\n            _hashes[i] = store.get(txHashes, i);\n            _yetNeeded[i] = store.get(yetNeeded, _hashes[i]);\n            _ownersDone[i] = store.get(ownersDone, _hashes[i]);\n            _timestamp[i] = store.get(timestamp, _hashes[i]);\n        }\n        return (_hashes, _yetNeeded, _ownersDone, _timestamp);\n    }\n\n    function getTx(bytes32 _hash) constant returns (bytes _data, uint _yetNeeded, uint _ownersDone, uint _timestamp) {\n        return (data[_hash], store.get(yetNeeded, _hash), store.get(ownersDone, _hash), store.get(timestamp, _hash));\n    }\n\n    function pendingYetNeeded(bytes32 _hash) constant returns (uint) {\n        return store.get(yetNeeded, _hash);\n    }\n\n    function getTxData(bytes32 _hash) constant returns (bytes) {\n        return data[_hash];\n    }\n\n    function getUserManager() constant returns (address) {\n        return lookupManager(\"UserManager\");\n    }\n\n    function addTx(bytes32 _hash, bytes _data, address _to, address _sender) onlyAuthorizedContract(_sender) returns (uint errorCode) {\n        if (store.includes(txHashes, _hash)) {\n            return _emitError(ERROR_PENDING_DUPLICATE_TX);\n        }\n\n        store.add(txHashes, _hash);\n        data[_hash] = _data;\n        store.set(to, _hash, _to);\n        address userManager = getUserManager();\n        store.set(yetNeeded, _hash, UserManagerInterface(userManager).required());\n        store.set(timestamp, _hash, now);\n\n        errorCode = conf(_hash, _sender);\n        return _checkAndEmitError(errorCode);\n    }\n\n    function confirm(bytes32 _hash) external returns (uint) {\n        uint errorCode = conf(_hash, msg.sender);\n        return _checkAndEmitError(errorCode);\n    }\n\n    function conf(bytes32 _hash, address _sender) internal returns (uint errorCode) {\n        errorCode = confirmAndCheck(_hash, _sender);\n        if (OK != errorCode) {\n            return errorCode;\n        }\n\n        if (store.get(to, _hash) == 0) {\n            return ERROR_PENDING_NOT_FOUND;\n        }\n\n        if (!store.get(to, _hash).call(data[_hash])) {\n            return ERROR_PENDING_CANNOT_CONFIRM;\n        }\n\n        deleteTx(_hash);\n        return OK;\n    }\n\n    // revokes a prior confirmation of the given operation\n    function revoke(bytes32 _hash) external onlyAuthorized returns (uint errorCode) {\n        address userManager = getUserManager();\n        uint ownerIndexBit = 2 ** UserManagerInterface(userManager).getMemberId(msg.sender);\n        if (store.get(ownersDone, _hash) & ownerIndexBit <= 0) {\n            errorCode = _emitError(ERROR_PENDING_NOT_FOUND);\n            return errorCode;\n        }\n\n        store.set(yetNeeded, _hash, store.get(yetNeeded, _hash) + 1);\n        store.set(ownersDone, _hash, store.get(ownersDone, _hash) - ownerIndexBit);\n        _emitRevoke(msg.sender, _hash);\n        if (store.get(yetNeeded, _hash) == UserManagerInterface(userManager).required()) {\n            deleteTx(_hash);\n            _emitCancelled(_hash);\n        }\n\n        errorCode = OK;\n    }\n\n    function hasConfirmed(bytes32 _hash, address _owner) onlyAuthorizedContract(_owner) constant returns (bool) {\n        // determine the bit to set for this owner\n        address userManager = getUserManager();\n        uint ownerIndexBit = 2 ** UserManagerInterface(userManager).getMemberId(_owner);\n        return !(store.get(ownersDone, _hash) & ownerIndexBit == 0);\n    }\n\n\n    // INTERNAL METHODS\n\n    function confirmAndCheck(bytes32 _hash, address _sender) internal onlyAuthorizedContract(_sender) returns (uint) {\n        // determine the bit to set for this owner\n        address userManager = getUserManager();\n        uint ownerIndexBit = 2 ** UserManagerInterface(userManager).getMemberId(_sender);\n        // make sure we (the message sender) haven't confirmed this operation previously\n        if (store.get(ownersDone, _hash) & ownerIndexBit != 0) {\n            return ERROR_PENDING_PREVIOUSLY_CONFIRMED;\n        }\n\n        // ok - check if count is enough to go ahead\n        if (store.get(yetNeeded, _hash) <= 1) {\n            // enough confirmations: reset and run interior\n            _emitDone(_hash, data[_hash], now);\n            return OK;\n        } else {\n            // not enough: record that this owner in particular confirmed\n            store.set(yetNeeded, _hash, store.get(yetNeeded, _hash) - 1);\n            uint _ownersDone = store.get(ownersDone, _hash);\n            _ownersDone |= ownerIndexBit;\n            store.set(ownersDone, _hash, _ownersDone);\n            _emitConfirmation(_sender, _hash);\n            return MULTISIG_ADDED;\n        }\n    }\n\n    function deleteTx(bytes32 _hash) internal {\n        uint txId = store.getIndex(txHashes, _hash);\n        uint txCount = store.count(txHashes);\n        if (txId != txCount - 1) {\n            updateTxId(txId, txCount - 1);\n        }\n\n        store.remove(txHashes, _hash);\n    }\n\n    function updateTxId(uint _oldId, uint _newId) internal {\n        store.set(to, store.get(txHashes, _oldId), store.get(to, store.get(txHashes, _newId)));\n        store.set(value, store.get(txHashes, _oldId), store.get(value, store.get(txHashes, _newId)));\n        store.set(yetNeeded, store.get(txHashes, _oldId), store.get(yetNeeded, store.get(txHashes, _newId)));\n        store.set(ownersDone, store.get(txHashes, _oldId), store.get(ownersDone, store.get(txHashes, _newId)));\n        store.set(timestamp, store.get(txHashes, _oldId), store.get(timestamp, store.get(txHashes, _newId)));\n        data[store.get(txHashes, _oldId)] = data[store.get(txHashes, _newId)];\n    }\n\n    function _emitConfirmation(address owner, bytes32 hash) internal {\n        PendingManager(getEventsHistory()).emitConfirmation(owner, hash);\n    }\n\n    function _emitRevoke(address owner, bytes32 hash) internal {\n        PendingManager(getEventsHistory()).emitRevoke(owner, hash);\n    }\n\n    function _emitCancelled(bytes32 hash) internal {\n        PendingManager(getEventsHistory()).emitCancelled(hash);\n    }\n\n    function _emitDone(bytes32 hash, bytes data, uint timestamp) internal {\n        PendingManager(getEventsHistory()).emitDone(hash, data, timestamp);\n    }\n\n    function _emitError(uint error) internal returns (uint) {\n        PendingManager(getEventsHistory()).emitError(error);\n\n        return error;\n    }\n\n    function _checkAndEmitError(uint error) internal returns (uint)  {\n        if (error != OK && error != MULTISIG_ADDED) {\n            return _emitError(error);\n        }\n\n        return error;\n    }\n\n    function() {\n        throw;\n    }\n}\n","abiDocs":[{"constant":false,"inputs":[{"name":"_hash","type":"bytes32"},{"name":"_data","type":"bytes"},{"name":"_to","type":"address"},{"name":"_sender","type":"address"}],"name":"addTx","payable":false,"stateMutability":"nonpayable","type":"function","signature":"addTx(bytes32,bytes,address,address)","signatureHash":"0fee1efc"},{"constant":false,"inputs":[{"name":"owner","type":"address"},{"name":"hash","type":"bytes32"}],"name":"emitConfirmation","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitConfirmation(address,bytes32)","signatureHash":"14da0797"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address"}],"name":"init","payable":false,"stateMutability":"nonpayable","type":"function","signature":"init(address)","signatureHash":"19ab453c"},{"constant":true,"inputs":[],"name":"getUserManager","payable":false,"stateMutability":"view","type":"function","signature":"getUserManager()","signatureHash":"1dffd012"},{"constant":false,"inputs":[],"name":"claimContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Finalize ownership pass.     * Can only be called by pending owner.","signature":"claimContractOwnership()","signatureHash":"4592cd1d"},{"constant":true,"inputs":[{"name":"_identifier","type":"bytes32","description":"is a manager's identifier. 0x0 is not allowed."}],"name":"lookupManager","payable":false,"stateMutability":"view","type":"function","details":"Returns manager's address by its identifier (type).","notice":"Will crash if no manager in the system with given identifier.","signature":"lookupManager(bytes32)","signatureHash":"4fe59012"},{"constant":true,"inputs":[{"name":"_hash","type":"bytes32"}],"name":"getTxData","payable":false,"stateMutability":"view","type":"function","signature":"getTxData(bytes32)","signatureHash":"520ff62e"},{"constant":true,"inputs":[],"name":"contractsManager","payable":false,"stateMutability":"view","type":"function","signature":"contractsManager()","signatureHash":"53253d31"},{"constant":false,"inputs":[{"name":"_to","type":"address","description":"address of the next owner. 0x0 is not allowed."}],"name":"changeContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Prepares ownership pass.     * Can only be called by current owner.","signature":"changeContractOwnership(address)","signatureHash":"557f4bc9"},{"constant":true,"inputs":[],"name":"pendingContractOwner","payable":false,"stateMutability":"view","type":"function","signature":"pendingContractOwner()","signatureHash":"5aa77d3c"},{"constant":false,"inputs":[{"name":"_eventsHistory","type":"address"}],"name":"setEventsHistory","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"setEventsHistory(address)","signatureHash":"6521afd7"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address","description":"contracts manager. 0x0 is not allowed."}],"name":"setContractsManager","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Setter for ContractsManager. Force overrides currect manager.","signature":"setContractsManager(address)","signatureHash":"71d3b573"},{"constant":false,"inputs":[{"name":"_hash","type":"bytes32"}],"name":"confirm","payable":false,"stateMutability":"nonpayable","type":"function","signature":"confirm(bytes32)","signatureHash":"797af627"},{"constant":false,"inputs":[{"name":"hash","type":"bytes32"}],"name":"emitCancelled","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitCancelled(bytes32)","signatureHash":"7d11317a"},{"constant":false,"inputs":[],"name":"destroy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"destroy()","signatureHash":"83197ef0"},{"constant":true,"inputs":[{"name":"_hash","type":"bytes32"}],"name":"pendingYetNeeded","payable":false,"stateMutability":"view","type":"function","signature":"pendingYetNeeded(bytes32)","signatureHash":"a6896dd7"},{"constant":false,"inputs":[{"name":"_to","type":"address","description":"the next contract owner"}],"name":"transferContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Direct ownership pass without change/claim pattern. Can be invoked only by current contract owner","return":"`true` if success, `false` otherwise","signature":"transferContractOwnership(address)","signatureHash":"a843c51f"},{"constant":false,"inputs":[{"name":"_hash","type":"bytes32"}],"name":"revoke","payable":false,"stateMutability":"nonpayable","type":"function","signature":"revoke(bytes32)","signatureHash":"b75c7dc6"},{"constant":true,"inputs":[{"name":"_hash","type":"bytes32"}],"name":"getTx","payable":false,"stateMutability":"view","type":"function","signature":"getTx(bytes32)","signatureHash":"b915cb6c"},{"constant":false,"inputs":[{"name":"hash","type":"bytes32"},{"name":"data","type":"bytes"},{"name":"timestamp","type":"uint256"}],"name":"emitDone","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitDone(bytes32,bytes,uint256)","signatureHash":"c02ea6d7"},{"constant":true,"inputs":[{"name":"_hash","type":"bytes32"},{"name":"_owner","type":"address"}],"name":"hasConfirmed","payable":false,"stateMutability":"view","type":"function","signature":"hasConfirmed(bytes32,address)","signatureHash":"c2cf7326"},{"constant":true,"inputs":[],"name":"contractOwner","payable":false,"stateMutability":"view","type":"function","signature":"contractOwner()","signatureHash":"ce606ee0"},{"constant":true,"inputs":[],"name":"pendingsCount","payable":false,"stateMutability":"view","type":"function","signature":"pendingsCount()","signatureHash":"d3913350"},{"constant":false,"inputs":[{"name":"owner","type":"address"},{"name":"hash","type":"bytes32"}],"name":"emitRevoke","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitRevoke(address,bytes32)","signatureHash":"d4554737"},{"constant":false,"inputs":[{"name":"tokens","type":"address[]"},{"name":"_to","type":"address"}],"name":"withdrawnTokens","payable":false,"stateMutability":"nonpayable","type":"function","signature":"withdrawnTokens(address[],address)","signatureHash":"d8f9659b"},{"constant":false,"inputs":[{"name":"errorCode","type":"uint256"}],"name":"emitError","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitError(uint256)","signatureHash":"df26ca08"},{"constant":true,"inputs":[],"name":"getTxs","payable":false,"stateMutability":"view","type":"function","signature":"getTxs()","signatureHash":"e0cedd9c"},{"constant":true,"inputs":[{"name":"key","type":"address"}],"name":"isAuthorized","payable":false,"stateMutability":"view","type":"function","signature":"isAuthorized(address)","signatureHash":"fe9fbb80"},{"constant":true,"inputs":[],"name":"getEventsHistory","payable":false,"stateMutability":"view","type":"function","signature":"getEventsHistory()","signatureHash":"fff10aba"},{"inputs":[{"name":"_store","type":"address"},{"name":"_crate","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":false,"stateMutability":"nonpayable","type":"fallback","inputs":[]},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"hash","type":"bytes32"}],"name":"Confirmation","type":"event","signature":"Confirmation(address,address,bytes32)","signatureHash":"73357994"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":true,"name":"owner","type":"address"},{"indexed":true,"name":"hash","type":"bytes32"}],"name":"Revoke","type":"event","signature":"Revoke(address,address,bytes32)","signatureHash":"ec0353ba"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":true,"name":"hash","type":"bytes32"}],"name":"Cancelled","type":"event","signature":"Cancelled(address,bytes32)","signatureHash":"5c073039"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":true,"name":"hash","type":"bytes32"},{"indexed":false,"name":"data","type":"bytes"},{"indexed":false,"name":"timestamp","type":"uint256"}],"name":"Done","type":"event","signature":"Done(address,bytes32,bytes,uint256)","signatureHash":"145862c7"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"errorCode","type":"uint256"}],"name":"Error","type":"event","signature":"Error(address,uint256)","signatureHash":"9cf38cf2"}]}
