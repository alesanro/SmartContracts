{"title":"ChronoBank Asset Proxy. * Proxy implements ERC20 interface and acts as a gateway to a single platform asset. Proxy adds symbol and caller(sender) when forwarding requests to platform. Every request that is made by caller first sent to the specific asset implementation contract, which then calls back to be forwarded onto platform. * Calls flow: Caller ->            Proxy.func(...) ->            Asset.__func(..., Caller.address) ->            Proxy.__func(..., Caller.address) ->            Platform.proxyFunc(..., symbol, Caller.address) * Asset implementation contract is mutable, but each user have an option to stick with old implementation, through explicit decision made in timely manner, if he doesn't agree with new rules. Each user have a possibility to upgrade to latest asset contract implementation, without the possibility to rollback. * Note: all the non constant functions return false instead of throwing in case if state change didn't happen yet.","fileName":"/contracts/core/platform/ChronoBankAssetProxy.sol","name":"ChronoBankAssetProxy","abi":[{"constant":true,"inputs":[],"name":"name","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"commitUpgrade","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getLatestVersion","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"emitApprove","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"emitTransfer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"chronoBankPlatform","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getPendingVersionTimestamp","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"purgeUpgrade","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"optIn","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"},{"name":"_reference","type":"string"},{"name":"_sender","type":"address"}],"name":"__transferWithReference","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_owner","type":"address"}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"},{"name":"_sender","type":"address"}],"name":"__approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"symbol","outputs":[{"name":"","type":"string"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getPendingVersion","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"},{"name":"_reference","type":"string"}],"name":"transferWithReference","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_chronoBankPlatform","type":"address"},{"name":"_symbol","type":"string"},{"name":"_name","type":"string"}],"name":"init","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_newVersion","type":"address"}],"name":"proposeUpgrade","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"smbl","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"source","type":"string"}],"name":"stringToBytes32","outputs":[{"name":"result","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"optOut","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_from","type":"address"},{"name":"_spender","type":"address"}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"},{"name":"_reference","type":"string"},{"name":"_sender","type":"address"}],"name":"__transferFromWithReference","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_sender","type":"address"}],"name":"getVersionFor","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":false,"name":"newVersion","type":"address"}],"name":"UpgradeProposal","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event"}],"source":"pragma solidity ^0.4.11;\n\nimport {ChronoBankPlatformInterface as ChronoBankPlatform} from \"./ChronoBankPlatformInterface.sol\";\nimport {ChronoBankAssetInterface as ChronoBankAsset} from \"./ChronoBankAssetInterface.sol\";\nimport {ERC20Interface as ERC20} from \"../erc20/ERC20Interface.sol\";\n\n/**\n * @title ChronoBank Asset Proxy.\n *\n * Proxy implements ERC20 interface and acts as a gateway to a single platform asset.\n * Proxy adds symbol and caller(sender) when forwarding requests to platform.\n * Every request that is made by caller first sent to the specific asset implementation\n * contract, which then calls back to be forwarded onto platform.\n *\n * Calls flow: Caller ->\n *             Proxy.func(...) ->\n *             Asset.__func(..., Caller.address) ->\n *             Proxy.__func(..., Caller.address) ->\n *             Platform.proxyFunc(..., symbol, Caller.address)\n *\n * Asset implementation contract is mutable, but each user have an option to stick with\n * old implementation, through explicit decision made in timely manner, if he doesn't agree\n * with new rules.\n * Each user have a possibility to upgrade to latest asset contract implementation, without the\n * possibility to rollback.\n *\n * Note: all the non constant functions return false instead of throwing in case if state change\n * didn't happen yet.\n */\ncontract ChronoBankAssetProxy is ERC20 {\n\n    // Supports ChronoBankPlatform ability to return error codes from methods\n    uint constant OK = 1;\n\n    // Assigned platform, immutable.\n    ChronoBankPlatform public chronoBankPlatform;\n\n    // Assigned symbol, immutable.\n    bytes32 public smbl;\n\n    // Assigned name, immutable.\n    string public name;\n\n    string public symbol;\n\n    /**\n     * Sets platform address, assigns symbol and name.\n     *\n     * Can be set only once.\n     *\n     * @param _chronoBankPlatform platform contract address.\n     * @param _symbol assigned symbol.\n     * @param _name assigned name.\n     *\n     * @return success.\n     */\n    function init(ChronoBankPlatform _chronoBankPlatform, string _symbol, string _name) returns(bool) {\n        if (address(chronoBankPlatform) != 0x0) {\n            return false;\n        }\n        chronoBankPlatform = _chronoBankPlatform;\n        symbol = _symbol;\n        smbl = stringToBytes32(_symbol);\n        name = _name;\n        return true;\n    }\n\n    function stringToBytes32(string memory source) returns (bytes32 result) {\n        assembly {\n           result := mload(add(source, 32))\n        }\n    }\n\n    /**\n     * Only platform is allowed to call.\n     */\n    modifier onlyChronoBankPlatform() {\n        if (msg.sender == address(chronoBankPlatform)) {\n            _;\n        }\n    }\n\n    /**\n     * Only current asset owner is allowed to call.\n     */\n    modifier onlyAssetOwner() {\n        if (chronoBankPlatform.isOwner(msg.sender, smbl)) {\n            _;\n        }\n    }\n\n    /**\n     * Returns asset implementation contract for current caller.\n     *\n     * @return asset implementation contract.\n     */\n    function _getAsset() internal returns(ChronoBankAsset) {\n        return ChronoBankAsset(getVersionFor(msg.sender));\n    }\n\n    /**\n     * Returns asset total supply.\n     *\n     * @return asset total supply.\n     */\n    function totalSupply() constant returns(uint) {\n        return chronoBankPlatform.totalSupply(smbl);\n    }\n\n    /**\n     * Returns asset balance for a particular holder.\n     *\n     * @param _owner holder address.\n     *\n     * @return holder balance.\n     */\n    function balanceOf(address _owner) constant returns(uint) {\n        return chronoBankPlatform.balanceOf(_owner, smbl);\n    }\n\n    /**\n     * Returns asset allowance from one holder to another.\n     *\n     * @param _from holder that allowed spending.\n     * @param _spender holder that is allowed to spend.\n     *\n     * @return holder to spender allowance.\n     */\n    function allowance(address _from, address _spender) constant returns(uint) {\n        return chronoBankPlatform.allowance(_from, _spender, smbl);\n    }\n\n    /**\n     * Returns asset decimals.\n     *\n     * @return asset decimals.\n     */\n    function decimals() constant returns(uint8) {\n        return chronoBankPlatform.baseUnit(smbl);\n    }\n\n    /**\n     * Transfers asset balance from the caller to specified receiver.\n     *\n     * @param _to holder address to give to.\n     * @param _value amount to transfer.\n     *\n     * @return success.\n     */\n    function transfer(address _to, uint _value) returns(bool) {\n        if (_to != 0x0) {\n          return _transferWithReference(_to, _value, \"\");\n        }\n        else {\n            return false;\n        }\n    }\n\n    /**\n     * Transfers asset balance from the caller to specified receiver adding specified comment.\n     *\n     * @param _to holder address to give to.\n     * @param _value amount to transfer.\n     * @param _reference transfer comment to be included in a platform's Transfer event.\n     *\n     * @return success.\n     */\n    function transferWithReference(address _to, uint _value, string _reference) returns(bool) {\n        if (_to != 0x0) {\n            return _transferWithReference(_to, _value, _reference);\n        }\n        else {\n            return false;\n        }\n    }\n\n    /**\n     * Resolves asset implementation contract for the caller and forwards there arguments along with\n     * the caller address.\n     *\n     * @return success.\n     */\n    function _transferWithReference(address _to, uint _value, string _reference) internal returns(bool) {\n        return _getAsset().__transferWithReference(_to, _value, _reference, msg.sender);\n    }\n\n    /**\n     * Performs transfer call on the platform by the name of specified sender.\n     *\n     * Can only be called by asset implementation contract assigned to sender.\n     *\n     * @param _to holder address to give to.\n     * @param _value amount to transfer.\n     * @param _reference transfer comment to be included in a platform's Transfer event.\n     * @param _sender initial caller.\n     *\n     * @return success.\n     */\n    function __transferWithReference(address _to, uint _value, string _reference, address _sender) onlyAccess(_sender) returns(bool) {\n        return chronoBankPlatform.proxyTransferWithReference(_to, _value, smbl, _reference, _sender) == OK;\n    }\n\n    /**\n     * Prforms allowance transfer of asset balance between holders.\n     *\n     * @param _from holder address to take from.\n     * @param _to holder address to give to.\n     * @param _value amount to transfer.\n     *\n     * @return success.\n     */\n    function transferFrom(address _from, address _to, uint _value) returns(bool) {\n        if (_to != 0x0) {\n            return _getAsset().__transferFromWithReference(_from, _to, _value, \"\", msg.sender);\n         }\n         else {\n             return false;\n         }\n    }\n\n    /**\n     * Performs allowance transfer call on the platform by the name of specified sender.\n     *\n     * Can only be called by asset implementation contract assigned to sender.\n     *\n     * @param _from holder address to take from.\n     * @param _to holder address to give to.\n     * @param _value amount to transfer.\n     * @param _reference transfer comment to be included in a platform's Transfer event.\n     * @param _sender initial caller.\n     *\n     * @return success.\n     */\n    function __transferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) onlyAccess(_sender) returns(bool) {\n        return chronoBankPlatform.proxyTransferFromWithReference(_from, _to, _value, smbl, _reference, _sender) == OK;\n    }\n\n    /**\n     * Sets asset spending allowance for a specified spender.\n     *\n     * @param _spender holder address to set allowance to.\n     * @param _value amount to allow.\n     *\n     * @return success.\n     */\n    function approve(address _spender, uint _value) returns(bool) {\n        if (_spender != 0x0) {\n             return _getAsset().__approve(_spender, _value, msg.sender);\n        }\n        else {\n            return false;\n        }\n    }\n\n    /**\n     * Performs allowance setting call on the platform by the name of specified sender.\n     *\n     * Can only be called by asset implementation contract assigned to sender.\n     *\n     * @param _spender holder address to set allowance to.\n     * @param _value amount to allow.\n     * @param _sender initial caller.\n     *\n     * @return success.\n     */\n    function __approve(address _spender, uint _value, address _sender) onlyAccess(_sender) returns(bool) {\n        return chronoBankPlatform.proxyApprove(_spender, _value, smbl, _sender) == OK;\n    }\n\n    /**\n     * Emits ERC20 Transfer event on this contract.\n     *\n     * Can only be, and, called by assigned platform when asset transfer happens.\n     */\n    function emitTransfer(address _from, address _to, uint _value) onlyChronoBankPlatform() {\n        Transfer(_from, _to, _value);\n    }\n\n    /**\n     * Emits ERC20 Approval event on this contract.\n     *\n     * Can only be, and, called by assigned platform when asset allowance set happens.\n     */\n    function emitApprove(address _from, address _spender, uint _value) onlyChronoBankPlatform() {\n        Approval(_from, _spender, _value);\n    }\n\n    /**\n     * Resolves asset implementation contract for the caller and forwards there transaction data,\n     * along with the value. This allows for proxy interface growth.\n     */\n    function () payable {\n        _getAsset().__process.value(msg.value)(msg.data, msg.sender);\n    }\n\n    /**\n     * Indicates an upgrade freeze-time start, and the next asset implementation contract.\n     */\n    event UpgradeProposal(address newVersion);\n\n    // Current asset implementation contract address.\n    address latestVersion;\n\n    // Proposed next asset implementation contract address.\n    address pendingVersion;\n\n    // Upgrade freeze-time start.\n    uint pendingVersionTimestamp;\n\n    // Timespan for users to review the new implementation and make decision.\n    uint constant UPGRADE_FREEZE_TIME = 3 days;\n\n    // Asset implementation contract address that user decided to stick with.\n    // 0x0 means that user uses latest version.\n    mapping(address => address) userOptOutVersion;\n\n    /**\n     * Only asset implementation contract assigned to sender is allowed to call.\n     */\n    modifier onlyAccess(address _sender) {\n        if (getVersionFor(_sender) == msg.sender) {\n            _;\n        }\n    }\n\n    /**\n     * Returns asset implementation contract address assigned to sender.\n     *\n     * @param _sender sender address.\n     *\n     * @return asset implementation contract address.\n     */\n    function getVersionFor(address _sender) constant returns(address) {\n        return userOptOutVersion[_sender] == 0 ? latestVersion : userOptOutVersion[_sender];\n    }\n\n    /**\n     * Returns current asset implementation contract address.\n     *\n     * @return asset implementation contract address.\n     */\n    function getLatestVersion() constant returns(address) {\n        return latestVersion;\n    }\n\n    /**\n     * Returns proposed next asset implementation contract address.\n     *\n     * @return asset implementation contract address.\n     */\n    function getPendingVersion() constant returns(address) {\n        return pendingVersion;\n    }\n\n    /**\n     * Returns upgrade freeze-time start.\n     *\n     * @return freeze-time start.\n     */\n    function getPendingVersionTimestamp() constant returns(uint) {\n        return pendingVersionTimestamp;\n    }\n\n    /**\n     * Propose next asset implementation contract address.\n     *\n     * Can only be called by current asset owner.\n     *\n     * Note: freeze-time should not be applied for the initial setup.\n     *\n     * @param _newVersion asset implementation contract address.\n     *\n     * @return success.\n     */\n    function proposeUpgrade(address _newVersion) onlyAssetOwner() returns(bool) {\n        // Should not already be in the upgrading process.\n        if (pendingVersion != 0x0) {\n            return false;\n        }\n        // New version address should be other than 0x0.\n        if (_newVersion == 0x0) {\n            return false;\n        }\n        // Don't apply freeze-time for the initial setup.\n        if (latestVersion == 0x0) {\n            latestVersion = _newVersion;\n            return true;\n        }\n        pendingVersion = _newVersion;\n        pendingVersionTimestamp = now;\n        UpgradeProposal(_newVersion);\n        return true;\n    }\n\n    /**\n     * Cancel the pending upgrade process.\n     *\n     * Can only be called by current asset owner.\n     *\n     * @return success.\n     */\n    function purgeUpgrade() onlyAssetOwner() returns(bool) {\n        if (pendingVersion == 0x0) {\n            return false;\n        }\n        delete pendingVersion;\n        delete pendingVersionTimestamp;\n        return true;\n    }\n\n    /**\n     * Finalize an upgrade process setting new asset implementation contract address.\n     *\n     * Can only be called after an upgrade freeze-time.\n     *\n     * @return success.\n     */\n    function commitUpgrade() returns(bool) {\n        if (pendingVersion == 0x0) {\n            return false;\n        }\n        if (pendingVersionTimestamp + UPGRADE_FREEZE_TIME > now) {\n            return false;\n        }\n        latestVersion = pendingVersion;\n        delete pendingVersion;\n        delete pendingVersionTimestamp;\n        return true;\n    }\n\n    /**\n     * Disagree with proposed upgrade, and stick with current asset implementation\n     * until further explicit agreement to upgrade.\n     *\n     * @return success.\n     */\n    function optOut() returns(bool) {\n        if (userOptOutVersion[msg.sender] != 0x0) {\n            return false;\n        }\n        userOptOutVersion[msg.sender] = latestVersion;\n        return true;\n    }\n\n    /**\n     * Implicitly agree to upgrade to current and future asset implementation upgrades,\n     * until further explicit disagreement.\n     *\n     * @return success.\n     */\n    function optIn() returns(bool) {\n        delete userOptOutVersion[msg.sender];\n        return true;\n    }\n}\n","abiDocs":[{"constant":true,"inputs":[],"name":"name","payable":false,"stateMutability":"view","type":"function","signature":"name()","signatureHash":"06fdde03"},{"constant":false,"inputs":[{"name":"_spender","type":"address","description":"holder address to set allowance to."},{"name":"_value","type":"uint256","description":"amount to allow."}],"name":"approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Sets asset spending allowance for a specified spender.","signature":"approve(address,uint256)","signatureHash":"095ea7b3"},{"constant":false,"inputs":[],"name":"commitUpgrade","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Finalize an upgrade process setting new asset implementation contract address.     * Can only be called after an upgrade freeze-time.","signature":"commitUpgrade()","signatureHash":"0ba12c83"},{"constant":true,"inputs":[],"name":"getLatestVersion","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function","return":"asset implementation contract address.","notice":"Returns current asset implementation contract address.","signature":"getLatestVersion()","signatureHash":"0e6d1de9"},{"constant":true,"inputs":[],"name":"totalSupply","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function","return":"asset total supply.","notice":"Returns asset total supply.","signature":"totalSupply()","signatureHash":"18160ddd"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"}],"name":"emitApprove","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","notice":"Emits ERC20 Approval event on this contract.     * Can only be, and, called by assigned platform when asset allowance set happens.","signature":"emitApprove(address,address,uint256)","signatureHash":"23385089"},{"constant":false,"inputs":[{"name":"_from","type":"address","description":"holder address to take from."},{"name":"_to","type":"address","description":"holder address to give to."},{"name":"_value","type":"uint256","description":"amount to transfer."}],"name":"transferFrom","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Prforms allowance transfer of asset balance between holders.","signature":"transferFrom(address,address,uint256)","signatureHash":"23b872dd"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"emitTransfer","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","notice":"Emits ERC20 Transfer event on this contract.     * Can only be, and, called by assigned platform when asset transfer happens.","signature":"emitTransfer(address,address,uint256)","signatureHash":"23de6651"},{"constant":true,"inputs":[],"name":"decimals","outputs":[{"name":"","type":"uint8"}],"payable":false,"stateMutability":"view","type":"function","return":"asset decimals.","notice":"Returns asset decimals.","signature":"decimals()","signatureHash":"313ce567"},{"constant":true,"inputs":[],"name":"chronoBankPlatform","payable":false,"stateMutability":"view","type":"function","signature":"chronoBankPlatform()","signatureHash":"49752baf"},{"constant":true,"inputs":[],"name":"getPendingVersionTimestamp","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function","return":"freeze-time start.","notice":"Returns upgrade freeze-time start.","signature":"getPendingVersionTimestamp()","signatureHash":"4bfaf2e8"},{"constant":false,"inputs":[],"name":"purgeUpgrade","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Cancel the pending upgrade process.     * Can only be called by current asset owner.","signature":"purgeUpgrade()","signatureHash":"4dfe950d"},{"constant":false,"inputs":[],"name":"optIn","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Implicitly agree to upgrade to current and future asset implementation upgrades, until further explicit disagreement.","signature":"optIn()","signatureHash":"5b48684e"},{"constant":false,"inputs":[{"name":"_to","type":"address","description":"holder address to give to."},{"name":"_value","type":"uint256","description":"amount to transfer."},{"name":"_reference","type":"string","description":"transfer comment to be included in a platform's Transfer event."},{"name":"_sender","type":"address","description":"initial caller."}],"name":"__transferWithReference","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Performs transfer call on the platform by the name of specified sender.     * Can only be called by asset implementation contract assigned to sender.","signature":"__transferWithReference(address,uint256,string,address)","signatureHash":"6a630ee7"},{"constant":true,"inputs":[{"name":"_owner","type":"address","description":"holder address."}],"name":"balanceOf","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function","return":"holder balance.","notice":"Returns asset balance for a particular holder.","signature":"balanceOf(address)","signatureHash":"70a08231"},{"constant":false,"inputs":[{"name":"_spender","type":"address","description":"holder address to set allowance to."},{"name":"_value","type":"uint256","description":"amount to allow."},{"name":"_sender","type":"address","description":"initial caller."}],"name":"__approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Performs allowance setting call on the platform by the name of specified sender.     * Can only be called by asset implementation contract assigned to sender.","signature":"__approve(address,uint256,address)","signatureHash":"7b7054c8"},{"constant":true,"inputs":[],"name":"symbol","payable":false,"stateMutability":"view","type":"function","signature":"symbol()","signatureHash":"95d89b41"},{"constant":true,"inputs":[],"name":"getPendingVersion","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function","return":"asset implementation contract address.","notice":"Returns proposed next asset implementation contract address.","signature":"getPendingVersion()","signatureHash":"a883fb90"},{"constant":false,"inputs":[{"name":"_to","type":"address","description":"holder address to give to."},{"name":"_value","type":"uint256","description":"amount to transfer."}],"name":"transfer","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Transfers asset balance from the caller to specified receiver.","signature":"transfer(address,uint256)","signatureHash":"a9059cbb"},{"constant":false,"inputs":[{"name":"_to","type":"address","description":"holder address to give to."},{"name":"_value","type":"uint256","description":"amount to transfer."},{"name":"_reference","type":"string","description":"transfer comment to be included in a platform's Transfer event."}],"name":"transferWithReference","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Transfers asset balance from the caller to specified receiver adding specified comment.","signature":"transferWithReference(address,uint256,string)","signatureHash":"ac35caee"},{"constant":false,"inputs":[{"name":"_chronoBankPlatform","type":"address","description":"platform contract address."},{"name":"_symbol","type":"string","description":"assigned symbol."},{"name":"_name","type":"string","description":"assigned name."}],"name":"init","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Sets platform address, assigns symbol and name.     * Can be set only once.","signature":"init(address,string,string)","signatureHash":"b2b45df5"},{"constant":false,"inputs":[{"name":"_newVersion","type":"address","description":"asset implementation contract address."}],"name":"proposeUpgrade","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Propose next asset implementation contract address.     * Can only be called by current asset owner.     * Note: freeze-time should not be applied for the initial setup.","signature":"proposeUpgrade(address)","signatureHash":"c915fc93"},{"constant":true,"inputs":[],"name":"smbl","payable":false,"stateMutability":"view","type":"function","signature":"smbl()","signatureHash":"cb4e75bb"},{"constant":false,"inputs":[{"name":"source","type":"string"}],"name":"stringToBytes32","payable":false,"stateMutability":"nonpayable","type":"function","signature":"stringToBytes32(string)","signatureHash":"cfb51928"},{"constant":false,"inputs":[],"name":"optOut","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Disagree with proposed upgrade, and stick with current asset implementation until further explicit agreement to upgrade.","signature":"optOut()","signatureHash":"d4eec5a6"},{"constant":true,"inputs":[{"name":"_from","type":"address","description":"holder that allowed spending."},{"name":"_spender","type":"address","description":"holder that is allowed to spend."}],"name":"allowance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function","return":"holder to spender allowance.","notice":"Returns asset allowance from one holder to another.","signature":"allowance(address,address)","signatureHash":"dd62ed3e"},{"constant":false,"inputs":[{"name":"_from","type":"address","description":"holder address to take from."},{"name":"_to","type":"address","description":"holder address to give to."},{"name":"_value","type":"uint256","description":"amount to transfer."},{"name":"_reference","type":"string","description":"transfer comment to be included in a platform's Transfer event."},{"name":"_sender","type":"address","description":"initial caller."}],"name":"__transferFromWithReference","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Performs allowance transfer call on the platform by the name of specified sender.     * Can only be called by asset implementation contract assigned to sender.","signature":"__transferFromWithReference(address,address,uint256,string,address)","signatureHash":"ec698a28"},{"constant":true,"inputs":[{"name":"_sender","type":"address","description":"sender address."}],"name":"getVersionFor","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function","return":"asset implementation contract address.","notice":"Returns asset implementation contract address assigned to sender.","signature":"getVersionFor(address)","signatureHash":"fe8beb71"},{"payable":true,"stateMutability":"payable","type":"fallback","inputs":[]},{"anonymous":false,"inputs":[{"indexed":false,"name":"newVersion","type":"address"}],"name":"UpgradeProposal","type":"event","signature":"UpgradeProposal(address)","signatureHash":"af574319"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Transfer","type":"event","signature":"Transfer(address,address,uint256)","signatureHash":"ddf252ad"},{"anonymous":false,"inputs":[{"indexed":true,"name":"from","type":"address"},{"indexed":true,"name":"spender","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Approval","type":"event","signature":"Approval(address,address,uint256)","signatureHash":"8c5be1e5"}]}
