{"fileName":"/contracts/vote/Vote.sol","name":"Vote","abi":[{"constant":true,"inputs":[{"name":"_id","type":"uint256"}],"name":"isPollOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"claimContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_identifier","type":"bytes32"}],"name":"lookupManager","outputs":[{"name":"manager","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"contractsManager","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"}],"name":"changeContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"pendingContractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_eventsHistory","type":"address"}],"name":"setEventsHistory","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address"}],"name":"setContractsManager","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"destroy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"pollId","type":"uint256"}],"name":"emitPollEnded","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"}],"name":"transferContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"contractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"tokens","type":"address[]"},{"name":"_to","type":"address"}],"name":"withdrawnTokens","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_pollId","type":"uint256"}],"name":"checkPollIsActive","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"key","type":"address"}],"name":"isAuthorized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getEventsHistory","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_store","type":"address"},{"name":"_crate","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":false,"stateMutability":"nonpayable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":false,"name":"pollId","type":"uint256"}],"name":"PollCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"pollId","type":"uint256"}],"name":"PollDeleted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"pollId","type":"uint256"}],"name":"PollEnded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"pollId","type":"uint256"}],"name":"PollActivated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"choice","type":"uint256"},{"indexed":false,"name":"pollId","type":"uint256"}],"name":"VoteCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"}],"name":"SharesPercentUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"},{"indexed":false,"name":"hash","type":"bytes32"},{"indexed":false,"name":"count","type":"uint256"}],"name":"IpfsHashToPollAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"},{"indexed":false,"name":"option","type":"bytes32"},{"indexed":false,"name":"count","type":"uint256"}],"name":"OptionAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"},{"indexed":false,"name":"option","type":"bytes32"},{"indexed":false,"name":"count","type":"uint256"}],"name":"OptionRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"}],"name":"PollDetailsUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"errorCode","type":"uint256"}],"name":"Error","type":"event"}],"source":"pragma solidity ^0.4.11;\n\nimport \"../core/common/BaseManager.sol\";\nimport \"./VoteEmitter.sol\";\n\ncontract Vote is VoteEmitter, BaseManager {\n  // Vote errors\n    uint constant ERROR_VOTE_INVALID_PARAMETER = 8000;\n    uint constant ERROR_VOTE_INVALID_INVOCATION = 8001;\n    uint constant ERROR_VOTE_ADD_CONTRACT = 8002;\n    uint constant ERROR_VOTE_LIMIT_EXCEEDED = 8003;\n    uint constant ERROR_VOTE_POLL_LIMIT_REACHED = 8004;\n    uint constant ERROR_VOTE_POLL_WRONG_STATUS = 8005;\n    uint constant ERROR_VOTE_POLL_INACTIVE = 8006;\n    uint constant ERROR_VOTE_POLL_NO_SHARES = 8007;\n    uint constant ERROR_VOTE_POLL_ALREADY_VOTED = 8008;\n    uint constant ERROR_VOTE_ACTIVE_POLL_LIMIT_REACHED = 8009;\n    uint constant ERROR_VOTE_UNABLE_TO_ACTIVATE_POLL = 8010;\n    uint constant ERROR_VOTE_OPTIONS_LIMIT_REACHED = 8011;\n    uint constant ERROR_VOTE_POLL_SHOULD_BE_INACTIVE = 8013;\n    uint constant ERROR_VOTE_POLL_DOES_NOT_EXIST = 8014;\n    uint constant ERROR_VOTE_OPTION_CHOICE_OUT_OF_RANGE = 8015;\n    uint constant ERROR_VOTE_OPTIONS_EMPTY_LIST = 8016;\n    uint constant ERROR_VOTE_DETAILS_HASH_INVALID_PARAMETER = 8017;\n    uint constant ERROR_VOTE_DEADLINE_INVALID_PARAMETER = 8018;\n    uint constant ERROR_VOTE_HASH_INVALID_PARAMETER = 8019;\n    uint constant ERROR_VOTE_SHARES_PERCENT_OUT_OF_RANGE = 8020;\n    uint constant ERROR_VOTE_OPTION_INVALID_PARAMETER = 8021;\n\n    StorageInterface.UInt activePollsCount;\n\n    StorageInterface.OrderedUIntSet polls;\n\n    StorageInterface.UIntAddressMapping owner;\n    StorageInterface.UIntBytes32Mapping detailsIpfsHash;\n    StorageInterface.UIntUIntMapping votelimit;\n    StorageInterface.UIntUIntMapping deadline;\n    StorageInterface.UIntBoolMapping status;\n    StorageInterface.UIntBoolMapping active;\n    StorageInterface.UIntUIntMapping creationTime;\n\n    StorageInterface.UIntAddressUIntMapping memberOption;\n    StorageInterface.UIntAddressUIntMapping memberVotes;\n    StorageInterface.UIntUIntUIntMapping options;\n    StorageInterface.UIntUIntUIntMapping optionsStats;\n\n    StorageInterface.AddressOrderedSetMapping members;\n    StorageInterface.UIntOrderedSetMapping memberPolls;\n    StorageInterface.Bytes32OrderedSetMapping ipfsHashes;\n    StorageInterface.Bytes32OrderedSetMapping optionsId;\n\n     function Vote(Storage _store, bytes32 _crate) BaseManager(_store, _crate) {\n        activePollsCount.init('activePollsCount');\n        polls.init('polls');\n        owner.init('owner');\n        detailsIpfsHash.init('detailsIpfsHash');\n        votelimit.init('votelimit');\n        deadline.init('deadline');\n        status.init('status');\n        active.init('active');\n        memberOption.init('memberOption');\n        memberVotes.init('memberVotes');\n        options.init('options');\n        optionsStats.init('optionsStats');\n        members.init('members');\n        memberPolls.init('memberPolls');\n        ipfsHashes.init('ipfsHashes');\n        optionsId.init('optionsId');\n        creationTime.init('creationTime');\n    }\n\n    function checkPollIsActive(uint _pollId) constant returns (bool) {\n        return store.get(active, _pollId);\n    }\n\n    function checkPollIsInactive(uint _pollId) internal constant returns (bool) {\n        return !checkPollIsActive(_pollId);\n    }\n\n    modifier onlyCreator(uint _id) {\n        if (isPollOwner(_id)) {\n            _;\n        }\n    }\n\n    function isPollOwner(uint _id) constant returns (bool) {\n        return store.get(owner, _id) == msg.sender;\n    }\n\n    //when time or vote limit is reached, set the poll status to false\n    function endPoll(uint _pollId) internal returns (uint) {\n        if (!store.get(status, _pollId))  {\n            return ERROR_VOTE_INVALID_PARAMETER;\n        }\n\n        store.set(status, _pollId, false);\n        store.set(active, _pollId, false);\n        store.set(activePollsCount, store.get(activePollsCount) - 1);\n\n        _emitPollEnded(_pollId);\n        return OK;\n    }\n\n    function _emitPollEnded(uint pollId) internal {\n        address eventsHistory = getEventsHistory();\n        if (eventsHistory != 0x0) {\n            VoteEmitter(eventsHistory).emitPollEnded(pollId);\n        }\n    }\n\n    function isPollExist(uint _id) internal constant returns (bool) {\n        return store.includes(polls, _id);\n    }\n\n    function() {\n        throw;\n    }\n}\n","abiDocs":[{"constant":true,"inputs":[{"name":"_id","type":"uint256"}],"name":"isPollOwner","payable":false,"stateMutability":"view","type":"function","signature":"isPollOwner(uint256)","signatureHash":"15601a21"},{"constant":false,"inputs":[],"name":"claimContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Finalize ownership pass.     * Can only be called by pending owner.","signature":"claimContractOwnership()","signatureHash":"4592cd1d"},{"constant":true,"inputs":[{"name":"_identifier","type":"bytes32","description":"is a manager's identifier. 0x0 is not allowed."}],"name":"lookupManager","payable":false,"stateMutability":"view","type":"function","details":"Returns manager's address by its identifier (type).","notice":"Will crash if no manager in the system with given identifier.","signature":"lookupManager(bytes32)","signatureHash":"4fe59012"},{"constant":true,"inputs":[],"name":"contractsManager","payable":false,"stateMutability":"view","type":"function","signature":"contractsManager()","signatureHash":"53253d31"},{"constant":false,"inputs":[{"name":"_to","type":"address","description":"address of the next owner. 0x0 is not allowed."}],"name":"changeContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Prepares ownership pass.     * Can only be called by current owner.","signature":"changeContractOwnership(address)","signatureHash":"557f4bc9"},{"constant":true,"inputs":[],"name":"pendingContractOwner","payable":false,"stateMutability":"view","type":"function","signature":"pendingContractOwner()","signatureHash":"5aa77d3c"},{"constant":false,"inputs":[{"name":"_eventsHistory","type":"address"}],"name":"setEventsHistory","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"setEventsHistory(address)","signatureHash":"6521afd7"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address","description":"contracts manager. 0x0 is not allowed."}],"name":"setContractsManager","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Setter for ContractsManager. Force overrides currect manager.","signature":"setContractsManager(address)","signatureHash":"71d3b573"},{"constant":false,"inputs":[],"name":"destroy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"destroy()","signatureHash":"83197ef0"},{"constant":false,"inputs":[{"name":"pollId","type":"uint256"}],"name":"emitPollEnded","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitPollEnded(uint256)","signatureHash":"8d65e2b5"},{"constant":false,"inputs":[{"name":"_to","type":"address","description":"the next contract owner"}],"name":"transferContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Direct ownership pass without change/claim pattern. Can be invoked only by current contract owner","return":"`true` if success, `false` otherwise","signature":"transferContractOwnership(address)","signatureHash":"a843c51f"},{"constant":true,"inputs":[],"name":"contractOwner","payable":false,"stateMutability":"view","type":"function","signature":"contractOwner()","signatureHash":"ce606ee0"},{"constant":false,"inputs":[{"name":"tokens","type":"address[]"},{"name":"_to","type":"address"}],"name":"withdrawnTokens","payable":false,"stateMutability":"nonpayable","type":"function","signature":"withdrawnTokens(address[],address)","signatureHash":"d8f9659b"},{"constant":true,"inputs":[{"name":"_pollId","type":"uint256"}],"name":"checkPollIsActive","payable":false,"stateMutability":"view","type":"function","signature":"checkPollIsActive(uint256)","signatureHash":"eaffbbb6"},{"constant":true,"inputs":[{"name":"key","type":"address"}],"name":"isAuthorized","payable":false,"stateMutability":"view","type":"function","signature":"isAuthorized(address)","signatureHash":"fe9fbb80"},{"constant":true,"inputs":[],"name":"getEventsHistory","payable":false,"stateMutability":"view","type":"function","signature":"getEventsHistory()","signatureHash":"fff10aba"},{"inputs":[{"name":"_store","type":"address"},{"name":"_crate","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":false,"stateMutability":"nonpayable","type":"fallback","inputs":[]},{"anonymous":false,"inputs":[{"indexed":false,"name":"pollId","type":"uint256"}],"name":"PollCreated","type":"event","signature":"PollCreated(uint256)","signatureHash":"ab0309b6"},{"anonymous":false,"inputs":[{"indexed":false,"name":"pollId","type":"uint256"}],"name":"PollDeleted","type":"event","signature":"PollDeleted(uint256)","signatureHash":"e66ba7d1"},{"anonymous":false,"inputs":[{"indexed":false,"name":"pollId","type":"uint256"}],"name":"PollEnded","type":"event","signature":"PollEnded(uint256)","signatureHash":"14d4cfc1"},{"anonymous":false,"inputs":[{"indexed":false,"name":"pollId","type":"uint256"}],"name":"PollActivated","type":"event","signature":"PollActivated(uint256)","signatureHash":"4d863a7b"},{"anonymous":false,"inputs":[{"indexed":false,"name":"choice","type":"uint256"},{"indexed":false,"name":"pollId","type":"uint256"}],"name":"VoteCreated","type":"event","signature":"VoteCreated(uint256,uint256)","signatureHash":"f558b17e"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"}],"name":"SharesPercentUpdated","type":"event","signature":"SharesPercentUpdated(address)","signatureHash":"22fe0086"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"},{"indexed":false,"name":"hash","type":"bytes32"},{"indexed":false,"name":"count","type":"uint256"}],"name":"IpfsHashToPollAdded","type":"event","signature":"IpfsHashToPollAdded(uint256,bytes32,uint256)","signatureHash":"a5c4447e"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"},{"indexed":false,"name":"option","type":"bytes32"},{"indexed":false,"name":"count","type":"uint256"}],"name":"OptionAdded","type":"event","signature":"OptionAdded(uint256,bytes32,uint256)","signatureHash":"b6f1f68e"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"},{"indexed":false,"name":"option","type":"bytes32"},{"indexed":false,"name":"count","type":"uint256"}],"name":"OptionRemoved","type":"event","signature":"OptionRemoved(uint256,bytes32,uint256)","signatureHash":"a410cc9c"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"}],"name":"PollDetailsUpdated","type":"event","signature":"PollDetailsUpdated(uint256)","signatureHash":"9514e96b"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"errorCode","type":"uint256"}],"name":"Error","type":"event","signature":"Error(address,uint256)","signatureHash":"9cf38cf2"}]}
