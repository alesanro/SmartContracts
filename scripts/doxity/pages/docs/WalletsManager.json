{"fileName":"/contracts/wallet/WalletsManager.sol","name":"WalletsManager","abi":[{"constant":false,"inputs":[],"name":"removeWallet","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"wallet","type":"address"},{"name":"by","type":"address"}],"name":"emitWalletCreated","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"tokens","type":"address[]"}],"name":"kill","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"claimContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_address","type":"address"}],"name":"setOracleAddress","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_identifier","type":"bytes32"}],"name":"lookupManager","outputs":[{"name":"manager","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"contractsManager","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"}],"name":"changeContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"pendingContractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_eventsHistory","type":"address"}],"name":"setEventsHistory","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_owners","type":"address[]"},{"name":"_required","type":"uint256"},{"name":"_releaseTime","type":"uint256"}],"name":"createWallet","outputs":[{"name":"errorCode","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address"}],"name":"setContractsManager","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getOraclePrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"destroy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"}],"name":"transferContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getOracleAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"wallet","type":"address"}],"name":"emitWalletDeleted","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_price","type":"uint256"}],"name":"setOraclePrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"contractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_releaseTime","type":"uint256"}],"name":"create2FAWallet","outputs":[{"name":"errorCode","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"tokens","type":"address[]"},{"name":"_to","type":"address"}],"name":"withdrawnTokens","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getWallets","outputs":[{"name":"result","type":"address[]"},{"name":"result2","type":"bool[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"errorCode","type":"uint256"}],"name":"emitError","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"wallet","type":"address"},{"name":"by","type":"address"}],"name":"emitWalletAdded","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_wallet","type":"address"}],"name":"addWallet","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address"},{"name":"_walletsFactory","type":"address"}],"name":"init","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"key","type":"address"}],"name":"isAuthorized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getEventsHistory","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_store","type":"address"},{"name":"_crate","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":false,"stateMutability":"nonpayable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"errorCode","type":"uint256"}],"name":"Error","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"wallet","type":"address"},{"indexed":true,"name":"by","type":"address"}],"name":"WalletAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"wallet","type":"address"},{"indexed":true,"name":"by","type":"address"}],"name":"WalletCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"wallet","type":"address"}],"name":"WalletDeleted","type":"event"}],"source":"pragma solidity ^0.4.11;\n\nimport \"../core/common/BaseManager.sol\";\nimport \"./WalletsManagerEmitter.sol\";\nimport \"../timeholder/FeatureFeeAdapter.sol\";\n\ncontract WalletsFactoryInterface {\n    function createWallet(address[] _owners, uint _required, address _contractsManager, address _eventsEmiter, bool _use2FA, uint _releaseTime) returns(address);\n}\n\ncontract WalletInterface {\n    bool public use2FA;\n    function isOwner(address _addr) returns (bool);\n}\n\ncontract MultiEventsHistoryInterface {\n    function authorize(address _caller) returns(bool);\n}\n\ncontract WalletsManager is WalletsManagerEmitter, FeatureFeeAdapter, BaseManager {\n    uint constant ERROR_WALLET_INVALID_INVOCATION = 14000;\n    uint constant ERROR_WALLET_EXISTS = 14001;\n    uint constant ERROR_WALLET_OWNER_ONLY = 14002;\n    uint constant ERROR_WALLET_CANNOT_ADD_TO_REGISTRY = 14003;\n    uint constant ERROR_WALLET_UNKNOWN = 14004;\n\n    StorageInterface.OrderedAddressesSet wallets;\n    StorageInterface.Address walletsFactory;\n    StorageInterface.Address oracleAddress;\n    StorageInterface.UInt oraclePrice;\n\n    function WalletsManager(Storage _store, bytes32 _crate) BaseManager(_store, _crate) {\n        walletsFactory.init(\"walletsFactory\");\n        wallets.init('wallets');\n        oracleAddress.init('oracleAddress');\n        oraclePrice.init('oraclePrice');\n    }\n\n    function init(address _contractsManager, address _walletsFactory)\n    public\n    onlyContractOwner\n    returns (uint)\n    {\n        BaseManager.init(_contractsManager, \"WalletsManager\");\n        store.set(walletsFactory, _walletsFactory);\n        return OK;\n    }\n\n    function kill(address[] tokens)\n    public\n    onlyContractOwner\n    returns (uint)\n    {\n        withdrawnTokens(tokens,msg.sender);\n        selfdestruct(msg.sender);\n        return OK;\n    }\n\n    function getOraclePrice() public constant returns (uint) {\n        return store.get(oraclePrice);\n    }\n\n    function getOracleAddress() public constant returns (address) {\n        return store.get(oracleAddress);\n    }\n\n    function getWallets() public constant returns (address[] result, bool[] result2) {\n        StorageInterface.Iterator memory iterator = store.listIterator(wallets);\n        address wallet;\n        result = new address[](store.count(wallets));\n        result2 = new bool[](store.count(wallets));\n        for(uint j = 0; store.canGetNextWithIterator(wallets, iterator);) {\n            wallet = store.getNextWithIterator(wallets, iterator);\n            if (isWalletOwner(wallet,msg.sender)) {\n                result[j] = wallet;\n                result2[j++] = WalletInterface(wallet).use2FA();\n            }\n        }\n        return (result,result2);\n    }\n\n    function setOraclePrice(uint _price) external onlyAuthorized returns (uint) {\n        store.set(oraclePrice,_price);\n        return OK;\n    }\n\n    function setOracleAddress(address _address) external onlyAuthorized returns (uint) {\n        store.set(oracleAddress,_address);\n        return OK;\n    }\n\n    function createWallet(address[] _owners, uint _required, uint _releaseTime)\n    public\n    returns (uint errorCode)\n    {\n        return _createWallet(_owners, _required, _releaseTime, [uint(0)]);\n    }\n\n    function create2FAWallet(uint _releaseTime)\n    public\n    returns (uint errorCode)\n    {\n        return _create2FAWallet(_releaseTime, [uint(0)]);\n    }\n\n    function addWallet(address _wallet) public returns (uint) {\n        return _addWallet(_wallet, [uint(0)]);\n    }\n\n    /**\n    *  Deletes sender from a list of wallets if present.\n    *  Designed to be called only by wallet.\n    */\n    function removeWallet() public returns (uint) {\n        if(!store.includes(wallets, msg.sender)) {\n            return _emitError(ERROR_WALLET_UNKNOWN);\n        }\n\n        store.remove(wallets, msg.sender);\n        _emitWalletDeleted(msg.sender);\n        return OK;\n    }\n\n    function isWalletOwner(address _wallet, address _owner) internal returns (bool) {\n        return WalletInterface(_wallet).isOwner(_owner);\n    }\n\n    function _addWallet(address _wallet, uint[1] memory _result)\n    private\n    featured(_result)\n    returns (uint)\n    {\n        bool r = _wallet.call.gas(3000).value(0)(bytes4(sha3(\"isOwner(address)\")),msg.sender);\n        if(!r) {\n            return _emitError(ERROR_WALLET_UNKNOWN);\n        }\n\n        if(store.includes(wallets,_wallet)) {\n            return _emitError(ERROR_WALLET_EXISTS);\n        }\n\n        if(!isWalletOwner(_wallet,msg.sender)) {\n            return _emitError(ERROR_WALLET_CANNOT_ADD_TO_REGISTRY);\n        }\n\n        store.add(wallets, _wallet);\n\n        _emitWalletAdded(_wallet, msg.sender);\n\n        _result[0] = OK;\n        return OK;\n    }\n\n    function _createWallet(address[] _owners, uint _required, uint _releaseTime, uint[1] memory _result)\n    private\n    featured(_result)\n    returns (uint errorCode)\n    {\n        require(_owners.length >= _required);\n\n        WalletsFactoryInterface factory = WalletsFactoryInterface(store.get(walletsFactory));\n        address _wallet = factory.createWallet(_owners, _required, contractsManager, getEventsHistory(), false, _releaseTime);\n        if (!MultiEventsHistoryInterface(getEventsHistory()).authorize(_wallet)) {\n            revert();\n        }\n\n        store.add(wallets, _wallet);\n\n        _emitWalletCreated(_wallet, msg.sender);\n\n        _result[0] = OK;\n        return OK;\n    }\n\n    function _create2FAWallet(uint _releaseTime, uint[1] memory _result)\n    private\n    featured(_result)\n    returns (uint errorCode)\n    {\n        if (getOracleAddress() == 0x0) {\n            return _emitError(ERROR_WALLET_INVALID_INVOCATION);\n        }\n\n        WalletsFactoryInterface factory = WalletsFactoryInterface(store.get(walletsFactory));\n\n        address[] memory _owners = new address[](2);\n        _owners[0] = msg.sender;\n        _owners[1] = getOracleAddress();\n\n        address _wallet = factory.createWallet(_owners,2,contractsManager,getEventsHistory(), true, _releaseTime);\n        if (!MultiEventsHistoryInterface(getEventsHistory()).authorize(_wallet)) {\n            revert();\n        }\n\n        store.add(wallets, _wallet);\n\n        _emitWalletCreated(_wallet, msg.sender);\n\n        _result[0] = OK;\n        return OK;\n    }\n\n    function _emitError(uint error) internal returns (uint) {\n        WalletsManager(getEventsHistory()).emitError(error);\n        return error;\n    }\n\n    function _emitWalletAdded(address wallet, address by) internal {\n        WalletsManager(getEventsHistory()).emitWalletAdded(wallet, by);\n    }\n\n    function _emitWalletCreated(address wallet, address by) internal {\n        WalletsManager(getEventsHistory()).emitWalletCreated(wallet, by);\n    }\n\n    function _emitWalletDeleted(address wallet) internal {\n        WalletsManager(getEventsHistory()).emitWalletDeleted(wallet);\n    }\n\n    function() {\n        revert();\n    }\n}\n","abiDocs":[{"constant":false,"inputs":[],"name":"removeWallet","payable":false,"stateMutability":"nonpayable","type":"function","notice":"Deletes sender from a list of wallets if present. Designed to be called only by wallet.","signature":"removeWallet()","signatureHash":"2286975c"},{"constant":false,"inputs":[{"name":"wallet","type":"address"},{"name":"by","type":"address"}],"name":"emitWalletCreated","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitWalletCreated(address,address)","signatureHash":"250aa1a1"},{"constant":false,"inputs":[{"name":"tokens","type":"address[]"}],"name":"kill","payable":false,"stateMutability":"nonpayable","type":"function","signature":"kill(address[])","signatureHash":"3c0fc6ea"},{"constant":false,"inputs":[],"name":"claimContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Finalize ownership pass.     * Can only be called by pending owner.","signature":"claimContractOwnership()","signatureHash":"4592cd1d"},{"constant":false,"inputs":[{"name":"_address","type":"address"}],"name":"setOracleAddress","payable":false,"stateMutability":"nonpayable","type":"function","signature":"setOracleAddress(address)","signatureHash":"4c69c00f"},{"constant":true,"inputs":[{"name":"_identifier","type":"bytes32","description":"is a manager's identifier. 0x0 is not allowed."}],"name":"lookupManager","payable":false,"stateMutability":"view","type":"function","details":"Returns manager's address by its identifier (type).","notice":"Will crash if no manager in the system with given identifier.","signature":"lookupManager(bytes32)","signatureHash":"4fe59012"},{"constant":true,"inputs":[],"name":"contractsManager","payable":false,"stateMutability":"view","type":"function","signature":"contractsManager()","signatureHash":"53253d31"},{"constant":false,"inputs":[{"name":"_to","type":"address","description":"address of the next owner. 0x0 is not allowed."}],"name":"changeContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Prepares ownership pass.     * Can only be called by current owner.","signature":"changeContractOwnership(address)","signatureHash":"557f4bc9"},{"constant":true,"inputs":[],"name":"pendingContractOwner","payable":false,"stateMutability":"view","type":"function","signature":"pendingContractOwner()","signatureHash":"5aa77d3c"},{"constant":false,"inputs":[{"name":"_eventsHistory","type":"address"}],"name":"setEventsHistory","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"setEventsHistory(address)","signatureHash":"6521afd7"},{"constant":false,"inputs":[{"name":"_owners","type":"address[]"},{"name":"_required","type":"uint256"},{"name":"_releaseTime","type":"uint256"}],"name":"createWallet","payable":false,"stateMutability":"nonpayable","type":"function","signature":"createWallet(address[],uint256,uint256)","signatureHash":"6830bcf0"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address","description":"contracts manager. 0x0 is not allowed."}],"name":"setContractsManager","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Setter for ContractsManager. Force overrides currect manager.","signature":"setContractsManager(address)","signatureHash":"71d3b573"},{"constant":true,"inputs":[],"name":"getOraclePrice","payable":false,"stateMutability":"view","type":"function","signature":"getOraclePrice()","signatureHash":"796da7af"},{"constant":false,"inputs":[],"name":"destroy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"destroy()","signatureHash":"83197ef0"},{"constant":false,"inputs":[{"name":"_to","type":"address","description":"the next contract owner"}],"name":"transferContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Direct ownership pass without change/claim pattern. Can be invoked only by current contract owner","return":"`true` if success, `false` otherwise","signature":"transferContractOwnership(address)","signatureHash":"a843c51f"},{"constant":true,"inputs":[],"name":"getOracleAddress","payable":false,"stateMutability":"view","type":"function","signature":"getOracleAddress()","signatureHash":"b18b78dd"},{"constant":false,"inputs":[{"name":"wallet","type":"address"}],"name":"emitWalletDeleted","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitWalletDeleted(address)","signatureHash":"bea99566"},{"constant":false,"inputs":[{"name":"_price","type":"uint256"}],"name":"setOraclePrice","payable":false,"stateMutability":"nonpayable","type":"function","signature":"setOraclePrice(uint256)","signatureHash":"c65cd86d"},{"constant":true,"inputs":[],"name":"contractOwner","payable":false,"stateMutability":"view","type":"function","signature":"contractOwner()","signatureHash":"ce606ee0"},{"constant":false,"inputs":[{"name":"_releaseTime","type":"uint256"}],"name":"create2FAWallet","payable":false,"stateMutability":"nonpayable","type":"function","signature":"create2FAWallet(uint256)","signatureHash":"d06c6566"},{"constant":false,"inputs":[{"name":"tokens","type":"address[]"},{"name":"_to","type":"address"}],"name":"withdrawnTokens","payable":false,"stateMutability":"nonpayable","type":"function","signature":"withdrawnTokens(address[],address)","signatureHash":"d8f9659b"},{"constant":true,"inputs":[],"name":"getWallets","payable":false,"stateMutability":"view","type":"function","signature":"getWallets()","signatureHash":"db7a4605"},{"constant":false,"inputs":[{"name":"errorCode","type":"uint256"}],"name":"emitError","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitError(uint256)","signatureHash":"df26ca08"},{"constant":false,"inputs":[{"name":"wallet","type":"address"},{"name":"by","type":"address"}],"name":"emitWalletAdded","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitWalletAdded(address,address)","signatureHash":"e136ea8d"},{"constant":false,"inputs":[{"name":"_wallet","type":"address"}],"name":"addWallet","payable":false,"stateMutability":"nonpayable","type":"function","signature":"addWallet(address)","signatureHash":"efeb5f1f"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address"},{"name":"_walletsFactory","type":"address"}],"name":"init","payable":false,"stateMutability":"nonpayable","type":"function","signature":"init(address,address)","signatureHash":"f09a4016"},{"constant":true,"inputs":[{"name":"key","type":"address"}],"name":"isAuthorized","payable":false,"stateMutability":"view","type":"function","signature":"isAuthorized(address)","signatureHash":"fe9fbb80"},{"constant":true,"inputs":[],"name":"getEventsHistory","payable":false,"stateMutability":"view","type":"function","signature":"getEventsHistory()","signatureHash":"fff10aba"},{"inputs":[{"name":"_store","type":"address"},{"name":"_crate","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":false,"stateMutability":"nonpayable","type":"fallback","inputs":[]},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"errorCode","type":"uint256"}],"name":"Error","type":"event","signature":"Error(address,uint256)","signatureHash":"9cf38cf2"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"wallet","type":"address"},{"indexed":true,"name":"by","type":"address"}],"name":"WalletAdded","type":"event","signature":"WalletAdded(address,address,address)","signatureHash":"ab5e58da"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"wallet","type":"address"},{"indexed":true,"name":"by","type":"address"}],"name":"WalletCreated","type":"event","signature":"WalletCreated(address,address,address)","signatureHash":"ca0b7dde"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"wallet","type":"address"}],"name":"WalletDeleted","type":"event","signature":"WalletDeleted(address,address)","signatureHash":"49de411f"}]}
