{"title":"TimeHolder's wallet contract defines a basic implementation of DepositWalletInterface to provide a way to store/deposit/withdraw tokens on this contract according to access rights. Here deposit/withdraw are allowed only by TimeHolder contract.","fileName":"/contracts/reward/RewardsWallet.sol","name":"RewardsWallet","abi":[{"constant":false,"inputs":[{"name":"_contractsManager","type":"address"}],"name":"init","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"claimContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_identifier","type":"bytes32"}],"name":"lookupManager","outputs":[{"name":"manager","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"contractsManager","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"}],"name":"changeContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"pendingContractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address"}],"name":"setContractsManager","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"destroy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_asset","type":"address"},{"name":"_from","type":"address"},{"name":"_amount","type":"uint256"}],"name":"deposit","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"}],"name":"transferContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"tokens","type":"address[]"}],"name":"destroy","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"contractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"tokens","type":"address[]"},{"name":"_to","type":"address"}],"name":"withdrawnTokens","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_asset","type":"address"},{"name":"_to","type":"address"},{"name":"_amount","type":"uint256"}],"name":"withdraw","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"key","type":"address"}],"name":"isAuthorized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_store","type":"address"},{"name":"_crate","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"}],"source":"pragma solidity ^0.4.11;\n\nimport \"../core/common/Managed.sol\";\nimport \"../timeholder/DepositWalletInterface.sol\";\nimport \"../core/erc20/ERC20Interface.sol\";\n\n/**\n* @title TimeHolder's wallet contract defines a basic implementation of DepositWalletInterface\n* to provide a way to store/deposit/withdraw tokens on this contract according to access rights.\n* Here deposit/withdraw are allowed only by TimeHolder contract.\n*\n* @dev Specifies a contract that helps in updating TimeHolder interface by delegating token's ownership\n* to TimeHolderWallet contract\n*/\ncontract RewardsWallet is Managed, DepositWalletInterface {\n    modifier onlyRewards() {\n        if (msg.sender == lookupManager(\"Rewards\")) {\n            _;\n        }\n    }\n\n    function RewardsWallet(Storage _store, bytes32 _crate) Managed(_store, _crate) {\n    }\n\n    function init(address _contractsManager) onlyContractOwner returns (bool) {\n        contractsManager = _contractsManager;\n        return true;\n    }\n\n    /**\n    * Call `selfdestruct` when contract is not needed anymore. Also takes a list of tokens\n    * that can be associated and have an account for this contract\n    *\n    * @dev Allowed only for contract owner\n    *\n    * @param tokens an array of tokens addresses\n    *\n    * @return result code of an operation\n    */\n    function destroy(address[] tokens) onlyContractOwner returns (uint) {\n        withdrawnTokens(tokens, msg.sender);\n        selfdestruct(msg.sender);\n        return OK;\n    }\n\n    /**\n    * Deposits some amount of tokens on wallet's account using ERC20 tokens\n    *\n    * @dev Allowed only for rewards\n    *\n    * @param _asset an address of token\n    * @param _from an address of a sender who is willing to transfer her resources\n    * @param _amount an amount of tokens (resources) a sender wants to transfer\n    *\n    * @return `true` if all successfuly completed, `false` otherwise\n    */\n    function deposit(address _asset, address _from, uint256 _amount) onlyRewards returns (bool) {\n        return ERC20Interface(_asset).transferFrom(_from, this, _amount);\n    }\n\n    /**\n    * Withdraws some amount of tokens from wallet's account using ERC20 tokens\n    *\n    * @dev Allowed only for rewards\n    *\n    * @param _asset an address of token\n    * @param _to an address of a receiver who is willing to get stored resources\n    * @param _amount an amount of tokens (resources) a receiver wants to get\n    *\n    * @return `true` if all successfuly completed, `false` otherwise\n    */\n    function withdraw(address _asset, address _to, uint256 _amount) onlyRewards returns (bool) {\n        return ERC20Interface(_asset).transfer(_to, _amount);\n    }\n}\n","abiDocs":[{"constant":false,"inputs":[{"name":"_contractsManager","type":"address"}],"name":"init","payable":false,"stateMutability":"nonpayable","type":"function","signature":"init(address)","signatureHash":"19ab453c"},{"constant":false,"inputs":[],"name":"claimContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Finalize ownership pass.     * Can only be called by pending owner.","signature":"claimContractOwnership()","signatureHash":"4592cd1d"},{"constant":true,"inputs":[{"name":"_identifier","type":"bytes32","description":"is a manager's identifier. 0x0 is not allowed."}],"name":"lookupManager","payable":false,"stateMutability":"view","type":"function","details":"Returns manager's address by its identifier (type).","notice":"Will crash if no manager in the system with given identifier.","signature":"lookupManager(bytes32)","signatureHash":"4fe59012"},{"constant":true,"inputs":[],"name":"contractsManager","payable":false,"stateMutability":"view","type":"function","signature":"contractsManager()","signatureHash":"53253d31"},{"constant":false,"inputs":[{"name":"_to","type":"address","description":"address of the next owner. 0x0 is not allowed."}],"name":"changeContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Prepares ownership pass.     * Can only be called by current owner.","signature":"changeContractOwnership(address)","signatureHash":"557f4bc9"},{"constant":true,"inputs":[],"name":"pendingContractOwner","payable":false,"stateMutability":"view","type":"function","signature":"pendingContractOwner()","signatureHash":"5aa77d3c"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address","description":"contracts manager. 0x0 is not allowed."}],"name":"setContractsManager","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Setter for ContractsManager. Force overrides currect manager.","signature":"setContractsManager(address)","signatureHash":"71d3b573"},{"constant":false,"inputs":[],"name":"destroy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Destroy contract and scrub a data","notice":"Only owner can call it","signature":"destroy()","signatureHash":"83197ef0"},{"constant":false,"inputs":[{"name":"_asset","type":"address","description":"an address of token"},{"name":"_from","type":"address","description":"an address of a sender who is willing to transfer her resources"},{"name":"_amount","type":"uint256","description":"an amount of tokens (resources) a sender wants to transfer"}],"name":"deposit","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Allowed only for rewards","return":"`true` if all successfuly completed, `false` otherwise","notice":"Deposits some amount of tokens on wallet's account using ERC20 tokens","signature":"deposit(address,address,uint256)","signatureHash":"8340f549"},{"constant":false,"inputs":[{"name":"_to","type":"address","description":"the next contract owner"}],"name":"transferContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Direct ownership pass without change/claim pattern. Can be invoked only by current contract owner","return":"`true` if success, `false` otherwise","signature":"transferContractOwnership(address)","signatureHash":"a843c51f"},{"constant":false,"inputs":[{"name":"tokens","type":"address[]","description":"an array of tokens addresses"}],"name":"destroy","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Allowed only for contract owner","return":"result code of an operation","notice":"Call `selfdestruct` when contract is not needed anymore. Also takes a list of tokens that can be associated and have an account for this contract","signature":"destroy(address[])","signatureHash":"c6786e5a"},{"constant":true,"inputs":[],"name":"contractOwner","payable":false,"stateMutability":"view","type":"function","signature":"contractOwner()","signatureHash":"ce606ee0"},{"constant":false,"inputs":[{"name":"tokens","type":"address[]"},{"name":"_to","type":"address"}],"name":"withdrawnTokens","payable":false,"stateMutability":"nonpayable","type":"function","signature":"withdrawnTokens(address[],address)","signatureHash":"d8f9659b"},{"constant":false,"inputs":[{"name":"_asset","type":"address","description":"an address of token"},{"name":"_to","type":"address","description":"an address of a receiver who is willing to get stored resources"},{"name":"_amount","type":"uint256","description":"an amount of tokens (resources) a receiver wants to get"}],"name":"withdraw","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Allowed only for rewards","return":"`true` if all successfuly completed, `false` otherwise","notice":"Withdraws some amount of tokens from wallet's account using ERC20 tokens","signature":"withdraw(address,address,uint256)","signatureHash":"d9caed12"},{"constant":true,"inputs":[{"name":"key","type":"address"}],"name":"isAuthorized","payable":false,"stateMutability":"view","type":"function","signature":"isAuthorized(address)","signatureHash":"fe9fbb80"},{"inputs":[{"name":"_store","type":"address"},{"name":"_crate","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"}]}
