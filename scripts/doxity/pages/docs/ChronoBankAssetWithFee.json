{"title":"ChronoBank Asset With Fee implementation contract. * Asset implementation contract that takes percent fee on top of every transfer. Fee amount is always rounded up. * Note: all the non constant functions return false instead of throwing in case if state change didn't happen yet.","fileName":"/contracts/core/platform/ChronoBankAssetWithFee.sol","name":"ChronoBankAssetWithFee","abi":[{"constant":false,"inputs":[{"name":"_proxy","type":"address"}],"name":"init","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_feePercent","type":"uint32"}],"name":"setFee","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"feeAddress","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"claimContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"}],"name":"changeContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"pendingContractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"},{"name":"_reference","type":"string"},{"name":"_sender","type":"address"}],"name":"__transferWithReference","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"},{"name":"_sender","type":"address"}],"name":"__approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"feePercent","outputs":[{"name":"","type":"uint32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"destroy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_feeAddress","type":"address"}],"name":"setFeeAddress","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_value","type":"uint256"}],"name":"calculateFee","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"}],"name":"transferContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_feeAddress","type":"address"},{"name":"_feePercent","type":"uint32"}],"name":"setupFee","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"contractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"proxy","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"},{"name":"_reference","type":"string"},{"name":"_sender","type":"address"}],"name":"__transferFromWithReference","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_data","type":"bytes"},{"name":"_sender","type":"address"}],"name":"__process","outputs":[],"payable":true,"stateMutability":"payable","type":"function"}],"source":"pragma solidity ^0.4.11;\n\nimport \"./ChronoBankAsset.sol\";\nimport \"../common/Owned.sol\";\n\n/**\n * @title ChronoBank Asset With Fee implementation contract.\n *\n * Asset implementation contract that takes percent fee on top of every transfer.\n * Fee amount is always rounded up.\n *\n * Note: all the non constant functions return false instead of throwing in case if state change\n * didn't happen yet.\n */\ncontract ChronoBankAssetWithFee is ChronoBankAsset, Owned {\n    // Fee collecting address, immutable.\n    address public feeAddress;\n\n    // Fee percent, immutable. 1 is 0.01%, 10000 is 100%.\n    uint32 public feePercent;\n\n    /**\n     * Allows the call if fee was successfully taken, throws if the call failed in the end.\n     */\n    modifier takeFee(address _from, uint _fromValue, address _sender, bool[1] memory _success) {\n        if (_transferFee(_from, _fromValue, _sender)) {\n            _;\n            if (!_success[0] && _subjectToFees(_from, _fromValue)) {\n                revert();\n            }\n        }\n    }\n\n    /**\n     * Sets fee collecting address and fee percent.\n     *\n     * @param _feeAddress fee collecting address.\n     * @param _feePercent fee percent, 1 is 0.01%, 10000 is 100%.\n     *\n     * @return success.\n     */\n    function setupFee(address _feeAddress, uint32 _feePercent) onlyContractOwner public returns (bool) {\n        setFee(_feePercent);\n        return setFeeAddress(_feeAddress);\n    }\n\n    /**\n    * @dev Sets fee address separate from setting fee percent value. Can be set only once\n    *\n    * @param _feeAddress fee collecting address\n    *\n    * @return result of the operation\n    */\n    function setFeeAddress(address _feeAddress) onlyContractOwner public returns (bool) {\n        if (feeAddress == _feeAddress) {\n            return false;\n        }\n        feeAddress = _feeAddress;\n        return true;\n    }\n\n    /**\n    * @dev Sets fee percent value. Can be changed multiple times\n    *\n    * @param _feePercent fee percent, 1 is 0.01%, 10000 is 100%.\n    */\n    function setFee(uint32 _feePercent) onlyContractOwner public {\n        feePercent = _feePercent;\n    }\n\n    /**\n     * Passes execution into modified function with function-modifier partially shared scope.\n     *\n     * @return success.\n     */\n    function _transferWithReference(address _to, uint _value, string _reference, address _sender) internal returns(bool) {\n        return _transferWithReference(_to, _value, _reference, _sender, [false]);\n    }\n\n    /**\n     * Transfers asset balance from the specified sender to specified receiver adding specified comment.\n     *\n     * Will be executed only in case of successful fee payment from the sender.\n     *\n     * @param _to holder address to give to.\n     * @param _value amount to transfer.\n     * @param _reference transfer comment to be included in a platform's Transfer event.\n     * @param _sender initial caller.\n     * @param _success function-modifier shared scope, so that modifier knows the result of a call.\n     *\n     * @return success.\n     */\n    function _transferWithReference(address _to, uint _value, string _reference, address _sender, bool[1] memory _success) takeFee(_sender, _value, _sender, _success) internal returns(bool) {\n        _success[0] = super._transferWithReference(_to, _value, _reference, _sender);\n        return _success[0];\n    }\n\n    /**\n     * Passes execution into modified function with function-modifier partially shared scope.\n     *\n     * @return success.\n     */\n    function _transferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender) internal returns(bool) {\n        return _transferFromWithReference(_from, _to, _value, _reference, _sender, [false]);\n    }\n\n    /**\n     * Performs allowance transfer of asset balance from the specified payer to specified receiver\n     * adding specified comment.\n     *\n     * Will be executed only in case of successful fee payment from the payer.\n     *\n     * @param _from holder address to take from.\n     * @param _to holder address to give to.\n     * @param _value amount to transfer.\n     * @param _reference transfer comment to be included in a platform's Transfer event.\n     * @param _sender initial caller.\n     * @param _success function-modifier shared scope, so that modifier knows the result of a call.\n     *\n     * @return success.\n     */\n    function _transferFromWithReference(address _from, address _to, uint _value, string _reference, address _sender, bool[1] memory _success) takeFee(_from, _value, _sender, _success) internal returns(bool) {\n        _success[0] = super._transferFromWithReference(_from, _to, _value, _reference, _sender);\n        return _success[0];\n    }\n\n    /**\n     * Transfers fee from the specified payer to fee collecting address.\n     *\n     * Will be executed only if payer and amount are subjects to fees.\n     *\n     * @param _feeFrom payer to take fee from.\n     * @param _fromValue amount to apply fee percent.\n     * @param _sender initial caller.\n     *\n     * @return success.\n     */\n    function _transferFee(address _feeFrom, uint _fromValue, address _sender) internal returns(bool) {\n        if (!_subjectToFees(_feeFrom, _fromValue)) {\n            return true;\n        }\n        return super._transferFromWithReference(_feeFrom, feeAddress, calculateFee(_fromValue), \"Transaction fee\", _sender);\n    }\n\n    /**\n     * Check if specified payer and amount are subjects to fees.\n     *\n     * Fee is not taken if:\n     *  - Fee collecting address is not set;\n     *  - Payer is fee collecting address itself;\n     *  - Amount equals 0;\n     *\n     * @return true if fee needs to be taken.\n     */\n    function _subjectToFees(address _feeFrom, uint _fromValue) internal returns(bool) {\n        return feeAddress != 0x0\n            && feeAddress != _feeFrom\n            && _fromValue != 0;\n    }\n\n    /**\n     * Return fee that needs to be taken based on specified amount.\n     *\n     * Fee amount is always rounded up.\n     *\n     * @return fee amount.\n     */\n    function calculateFee(uint _value) constant returns(uint) {\n        uint feeRaw = _value * feePercent;\n        return (feeRaw / 10000) + (feeRaw % 10000 == 0 ? 0 : 1);\n    }\n}\n","abiDocs":[{"constant":false,"inputs":[{"name":"_proxy","type":"address","description":"asset proxy contract address."}],"name":"init","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","details":"function is final, and must not be overridden.","return":"success.","notice":"Sets asset proxy address.     * Can be set only once.","signature":"init(address)","signatureHash":"19ab453c"},{"constant":false,"inputs":[{"name":"_feePercent","type":"uint32","description":"fee percent, 1 is 0.01%, 10000 is 100%."}],"name":"setFee","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Sets fee percent value. Can be changed multiple times","signature":"setFee(uint32)","signatureHash":"1ab971ab"},{"constant":true,"inputs":[],"name":"feeAddress","payable":false,"stateMutability":"view","type":"function","signature":"feeAddress()","signatureHash":"41275358"},{"constant":false,"inputs":[],"name":"claimContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Finalize ownership pass.     * Can only be called by pending owner.","signature":"claimContractOwnership()","signatureHash":"4592cd1d"},{"constant":false,"inputs":[{"name":"_to","type":"address","description":"address of the next owner. 0x0 is not allowed."}],"name":"changeContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Prepares ownership pass.     * Can only be called by current owner.","signature":"changeContractOwnership(address)","signatureHash":"557f4bc9"},{"constant":true,"inputs":[],"name":"pendingContractOwner","payable":false,"stateMutability":"view","type":"function","signature":"pendingContractOwner()","signatureHash":"5aa77d3c"},{"constant":false,"inputs":[{"name":"_to","type":"address"},{"name":"_value","type":"uint256"},{"name":"_reference","type":"string"},{"name":"_sender","type":"address"}],"name":"__transferWithReference","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","details":"function is final, and must not be overridden.","return":"success.","notice":"Passes execution into virtual function.     * Can only be called by assigned asset proxy.","signature":"__transferWithReference(address,uint256,string,address)","signatureHash":"6a630ee7"},{"constant":false,"inputs":[{"name":"_spender","type":"address"},{"name":"_value","type":"uint256"},{"name":"_sender","type":"address"}],"name":"__approve","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","details":"function is final, and must not be overridden.","return":"success.","notice":"Passes execution into virtual function.     * Can only be called by assigned asset proxy.","signature":"__approve(address,uint256,address)","signatureHash":"7b7054c8"},{"constant":true,"inputs":[],"name":"feePercent","payable":false,"stateMutability":"view","type":"function","signature":"feePercent()","signatureHash":"7fd6f15c"},{"constant":false,"inputs":[],"name":"destroy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Destroy contract and scrub a data","notice":"Only owner can call it","signature":"destroy()","signatureHash":"83197ef0"},{"constant":false,"inputs":[{"name":"_feeAddress","type":"address","description":"fee collecting address"}],"name":"setFeeAddress","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Sets fee address separate from setting fee percent value. Can be set only once","return":"result of the operation","signature":"setFeeAddress(address)","signatureHash":"8705fcd4"},{"constant":true,"inputs":[{"name":"_value","type":"uint256"}],"name":"calculateFee","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function","return":"fee amount.","notice":"Return fee that needs to be taken based on specified amount.     * Fee amount is always rounded up.","signature":"calculateFee(uint256)","signatureHash":"99a5d747"},{"constant":false,"inputs":[{"name":"_to","type":"address","description":"the next contract owner"}],"name":"transferContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Direct ownership pass without change/claim pattern. Can be invoked only by current contract owner","return":"`true` if success, `false` otherwise","signature":"transferContractOwnership(address)","signatureHash":"a843c51f"},{"constant":false,"inputs":[{"name":"_feeAddress","type":"address","description":"fee collecting address."},{"name":"_feePercent","type":"uint32","description":"fee percent, 1 is 0.01%, 10000 is 100%."}],"name":"setupFee","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Sets fee collecting address and fee percent.","signature":"setupFee(address,uint32)","signatureHash":"ae8800fa"},{"constant":true,"inputs":[],"name":"contractOwner","payable":false,"stateMutability":"view","type":"function","signature":"contractOwner()","signatureHash":"ce606ee0"},{"constant":true,"inputs":[],"name":"proxy","payable":false,"stateMutability":"view","type":"function","signature":"proxy()","signatureHash":"ec556889"},{"constant":false,"inputs":[{"name":"_from","type":"address"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"},{"name":"_reference","type":"string"},{"name":"_sender","type":"address"}],"name":"__transferFromWithReference","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","details":"function is final, and must not be overridden.","return":"success.","notice":"Passes execution into virtual function.     * Can only be called by assigned asset proxy.","signature":"__transferFromWithReference(address,address,uint256,string,address)","signatureHash":"ec698a28"},{"constant":false,"inputs":[{"name":"_data","type":"bytes"},{"name":"_sender","type":"address"}],"name":"__process","outputs":[],"payable":true,"stateMutability":"payable","type":"function","signature":"__process(bytes,address)","signatureHash":"f2d6e0ab"}]}
