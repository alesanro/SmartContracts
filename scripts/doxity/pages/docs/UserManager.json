{"fileName":"/contracts/core/user/UserManager.sol","name":"UserManager","abi":[{"constant":false,"inputs":[{"name":"_required","type":"uint256"}],"name":"setRequired","outputs":[{"name":"errorCode","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"userCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address"}],"name":"init","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"required","type":"uint256"}],"name":"emitSetRequired","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"key","type":"address"}],"name":"getCBE","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"adminCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"claimContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_identifier","type":"bytes32"}],"name":"lookupManager","outputs":[{"name":"manager","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"contractsManager","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"key","type":"address"},{"name":"_hash","type":"bytes32"}],"name":"setMemberHash","outputs":[{"name":"errorCode","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"}],"name":"changeContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"pendingContractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_key","type":"address"},{"name":"_hash","type":"bytes32"}],"name":"addCBE","outputs":[{"name":"errorCode","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_eventsHistory","type":"address"}],"name":"setEventsHistory","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address"}],"name":"setContractsManager","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_key","type":"address"}],"name":"revokeCBE","outputs":[{"name":"errorCode","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"key","type":"address"}],"name":"emitNewUserRegistered","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"destroy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"key","type":"address"}],"name":"getMemberHash","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getCBEMembers","outputs":[{"name":"_addresses","type":"address[]"},{"name":"_hashes","type":"bytes32[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"}],"name":"transferContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_hash","type":"bytes32"}],"name":"setOwnHash","outputs":[{"name":"errorCode","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"sender","type":"address"}],"name":"getMemberId","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"key","type":"address"}],"name":"emitCBEUpdate","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"contractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"tokens","type":"address[]"},{"name":"_to","type":"address"}],"name":"withdrawnTokens","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"required","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"error","type":"uint256"}],"name":"emitError","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"key","type":"address"},{"name":"oldHash","type":"bytes32"},{"name":"newHash","type":"bytes32"}],"name":"emitHashUpdate","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"key","type":"address"}],"name":"isAuthorized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getEventsHistory","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_store","type":"address"},{"name":"_crate","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":false,"stateMutability":"nonpayable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"key","type":"address"}],"name":"NewUserRegistered","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"key","type":"address"}],"name":"CBEUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"required","type":"uint256"}],"name":"SetRequired","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":true,"name":"key","type":"address"},{"indexed":false,"name":"oldHash","type":"bytes32"},{"indexed":false,"name":"newHash","type":"bytes32"}],"name":"SetHash","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"errorCode","type":"uint256"}],"name":"Error","type":"event"}],"source":"pragma solidity ^0.4.11;\n\nimport \"../common/BaseManager.sol\";\nimport \"./UserManagerEmitter.sol\";\n\ncontract UserManager is UserManagerEmitter, BaseManager {\n\n    uint constant ERROR_USER_NOT_FOUND = 2000;\n    uint constant ERROR_USER_INVALID_PARAMETER = 2001;\n    uint constant ERROR_USER_ALREADY_CBE = 2002;\n    uint constant ERROR_USER_NOT_CBE = 2003;\n    uint constant ERROR_USER_SAME_HASH = 2004;\n    uint constant ERROR_USER_INVALID_REQURED = 2005;\n    uint constant ERROR_USER_INVALID_STATE = 2006;\n\n    StorageInterface.UInt req;\n    StorageInterface.AddressesSet members;\n    StorageInterface.AddressesSet admins;\n    StorageInterface.AddressBytes32Mapping hashes;\n\n    function UserManager(Storage _store, bytes32 _crate) BaseManager(_store, _crate) {\n        req.init('req');\n        admins.init('admins');\n        members.init('members');\n        hashes.init('hashes');\n    }\n\n    function init(address _contractsManager) onlyContractOwner returns (uint) {\n        BaseManager.init(_contractsManager, \"UserManager\");\n\n        if (!getCBE(msg.sender)) {\n            uint e = addMember(msg.sender, true);\n            if (OK != e) {\n                return e;\n            }\n        }\n\n        return OK;\n    }\n\n    function addCBE(address _key, bytes32 _hash) returns (uint errorCode) {\n        errorCode = multisig();\n        if (OK != errorCode) {\n            return _handleResult(errorCode);\n        }\n\n        if (getCBE(_key)) {\n            return _emitError(ERROR_USER_ALREADY_CBE);\n        }\n\n        errorCode = addMember(_key, true);\n        if (OK != errorCode) {\n            return _emitError(errorCode);\n        }\n\n        errorCode = setMemberHashInt(_key, _hash);\n        if (OK != errorCode) {\n            return _emitError(errorCode);\n        }\n\n        _emitCBEUpdate(_key);\n        return OK;\n    }\n\n    function revokeCBE(address _key) returns (uint errorCode) {\n        errorCode = multisig();\n        if (OK != errorCode) {\n            return _handleResult(errorCode);\n        }\n\n        if (!getCBE(_key)) {\n            return _emitError(ERROR_USER_NOT_CBE);\n        }\n\n        errorCode = setCBE(_key, false);\n        if (OK != errorCode) {\n            return _emitError(errorCode);\n        }\n\n        _emitCBEUpdate(_key);\n        return OK;\n    }\n\n    function setMemberHash(address key, bytes32 _hash) onlyAuthorized returns (uint errorCode) {\n        createMemberIfNotExist(key);\n        errorCode = setMemberHashInt(key, _hash);\n        return _handleResult(errorCode);\n    }\n\n    function setOwnHash(bytes32 _hash) returns (uint errorCode) {\n        errorCode = setMemberHashInt(msg.sender, _hash);\n        return _handleResult(errorCode);\n    }\n\n    function setRequired(uint _required) returns (uint errorCode) {\n        errorCode= multisig();\n        if (OK != errorCode) {\n            return _handleResult(errorCode);\n        }\n\n        if (!(_required <= store.count(admins))) {\n            return _emitError(ERROR_USER_INVALID_REQURED);\n        }\n\n        store.set(req, _required);\n        _emitSetRequired(_required);\n\n        return OK;\n    }\n\n    function createMemberIfNotExist(address key) internal returns (uint) {\n        return addMember(key, false);\n    }\n\n    function addMember(address key, bool isCBE) internal returns (uint) {\n        if (getMemberId(key) == 0x0) {\n            store.add(members, key);\n            _emitNewUserRegistered(key);\n        }\n\n        return setCBE(key, isCBE);\n    }\n\n    function setMemberHashInt(address key, bytes32 _hash) internal returns (uint errorCode) {\n        bytes32 oldHash = getMemberHash(key);\n        if (_hash == oldHash) {\n            return ERROR_USER_SAME_HASH;\n        }\n\n        errorCode = setHashes(key, _hash);\n        if (OK != errorCode) {\n            return errorCode;\n        }\n\n        _emitHashUpdate(key, oldHash, _hash);\n        return OK;\n    }\n\n    function setCBE(address key, bool isCBE) internal returns (uint) {\n        if (isCBE) {\n            store.add(admins, key);\n        } else {\n            store.remove(admins, key);\n            if (store.get(req) > store.count(admins)) {\n                store.set(req, store.get(req) - 1);\n            }\n        }\n        return OK;\n    }\n\n    function setHashes(address key, bytes32 _hash) internal returns (uint) {\n        store.set(hashes, key, _hash);\n        return OK;\n    }\n\n    function getMemberHash(address key) constant returns (bytes32) {\n        return store.get(hashes, key);\n    }\n\n    function getCBE(address key) constant returns (bool) {\n        return store.includes(admins, key);\n    }\n\n    function getMemberId(address sender) constant returns (uint) {\n        return store.getIndex(members, sender);\n    }\n\n    function required() constant returns (uint) {\n        return store.get(req);\n    }\n\n    function adminCount() constant returns (uint) {\n        return store.count(admins);\n    }\n\n    function userCount() constant returns (uint) {\n        return store.count(members);\n    }\n\n    function getCBEMembers() constant returns (address[] _addresses, bytes32[] _hashes) {\n        _hashes = new bytes32[](adminCount());\n        for (uint i = 0; i < adminCount(); i++) {\n            _hashes[i] = store.get(hashes, store.get(admins, i));\n        }\n        return (store.get(admins), _hashes);\n    }\n\n    function _emitCBEUpdate(address key) internal {\n        UserManager(getEventsHistory()).emitCBEUpdate(key);\n    }\n\n    function _emitNewUserRegistered(address key) internal {\n        if (getEventsHistory() == 0x0) {\n            return;\n        }\n        UserManager(getEventsHistory()).emitNewUserRegistered(key);\n    }\n\n    function _emitSetRequired(uint required) internal {\n        UserManager(getEventsHistory()).emitSetRequired(required);\n    }\n\n    function _emitHashUpdate(address key, bytes32 oldHash, bytes32 newHash) internal {\n        UserManager(getEventsHistory()).emitHashUpdate(key, oldHash, newHash);\n    }\n\n    function _emitError(uint error) internal returns (uint) {\n        UserManager(getEventsHistory()).emitError(error);\n        return error;\n    }\n\n    function _handleResult(uint error) internal returns (uint) {\n        if (error != OK && error != MULTISIG_ADDED) {\n            return _emitError(error);\n        }\n        return error;\n    }\n\n    function() {\n        throw;\n    }\n}\n","abiDocs":[{"constant":false,"inputs":[{"name":"_required","type":"uint256"}],"name":"setRequired","payable":false,"stateMutability":"nonpayable","type":"function","signature":"setRequired(uint256)","signatureHash":"0457d6f2"},{"constant":true,"inputs":[],"name":"userCount","payable":false,"stateMutability":"view","type":"function","signature":"userCount()","signatureHash":"07973ccf"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address"}],"name":"init","payable":false,"stateMutability":"nonpayable","type":"function","signature":"init(address)","signatureHash":"19ab453c"},{"constant":false,"inputs":[{"name":"required","type":"uint256"}],"name":"emitSetRequired","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitSetRequired(uint256)","signatureHash":"26c325f8"},{"constant":true,"inputs":[{"name":"key","type":"address"}],"name":"getCBE","payable":false,"stateMutability":"view","type":"function","signature":"getCBE(address)","signatureHash":"2aa09e5a"},{"constant":true,"inputs":[],"name":"adminCount","payable":false,"stateMutability":"view","type":"function","signature":"adminCount()","signatureHash":"2b7832b3"},{"constant":false,"inputs":[],"name":"claimContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Finalize ownership pass.     * Can only be called by pending owner.","signature":"claimContractOwnership()","signatureHash":"4592cd1d"},{"constant":true,"inputs":[{"name":"_identifier","type":"bytes32","description":"is a manager's identifier. 0x0 is not allowed."}],"name":"lookupManager","payable":false,"stateMutability":"view","type":"function","details":"Returns manager's address by its identifier (type).","notice":"Will crash if no manager in the system with given identifier.","signature":"lookupManager(bytes32)","signatureHash":"4fe59012"},{"constant":true,"inputs":[],"name":"contractsManager","payable":false,"stateMutability":"view","type":"function","signature":"contractsManager()","signatureHash":"53253d31"},{"constant":false,"inputs":[{"name":"key","type":"address"},{"name":"_hash","type":"bytes32"}],"name":"setMemberHash","payable":false,"stateMutability":"nonpayable","type":"function","signature":"setMemberHash(address,bytes32)","signatureHash":"539e22e2"},{"constant":false,"inputs":[{"name":"_to","type":"address","description":"address of the next owner. 0x0 is not allowed."}],"name":"changeContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Prepares ownership pass.     * Can only be called by current owner.","signature":"changeContractOwnership(address)","signatureHash":"557f4bc9"},{"constant":true,"inputs":[],"name":"pendingContractOwner","payable":false,"stateMutability":"view","type":"function","signature":"pendingContractOwner()","signatureHash":"5aa77d3c"},{"constant":false,"inputs":[{"name":"_key","type":"address"},{"name":"_hash","type":"bytes32"}],"name":"addCBE","payable":false,"stateMutability":"nonpayable","type":"function","signature":"addCBE(address,bytes32)","signatureHash":"63eef4b0"},{"constant":false,"inputs":[{"name":"_eventsHistory","type":"address"}],"name":"setEventsHistory","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"setEventsHistory(address)","signatureHash":"6521afd7"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address","description":"contracts manager. 0x0 is not allowed."}],"name":"setContractsManager","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Setter for ContractsManager. Force overrides currect manager.","signature":"setContractsManager(address)","signatureHash":"71d3b573"},{"constant":false,"inputs":[{"name":"_key","type":"address"}],"name":"revokeCBE","payable":false,"stateMutability":"nonpayable","type":"function","signature":"revokeCBE(address)","signatureHash":"7784ec47"},{"constant":false,"inputs":[{"name":"key","type":"address"}],"name":"emitNewUserRegistered","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitNewUserRegistered(address)","signatureHash":"7f52e06f"},{"constant":false,"inputs":[],"name":"destroy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"destroy()","signatureHash":"83197ef0"},{"constant":true,"inputs":[{"name":"key","type":"address"}],"name":"getMemberHash","payable":false,"stateMutability":"view","type":"function","signature":"getMemberHash(address)","signatureHash":"8e7ea62a"},{"constant":true,"inputs":[],"name":"getCBEMembers","payable":false,"stateMutability":"view","type":"function","signature":"getCBEMembers()","signatureHash":"a083b7c3"},{"constant":false,"inputs":[{"name":"_to","type":"address","description":"the next contract owner"}],"name":"transferContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Direct ownership pass without change/claim pattern. Can be invoked only by current contract owner","return":"`true` if success, `false` otherwise","signature":"transferContractOwnership(address)","signatureHash":"a843c51f"},{"constant":false,"inputs":[{"name":"_hash","type":"bytes32"}],"name":"setOwnHash","payable":false,"stateMutability":"nonpayable","type":"function","signature":"setOwnHash(bytes32)","signatureHash":"bca21889"},{"constant":true,"inputs":[{"name":"sender","type":"address"}],"name":"getMemberId","payable":false,"stateMutability":"view","type":"function","signature":"getMemberId(address)","signatureHash":"c269014b"},{"constant":false,"inputs":[{"name":"key","type":"address"}],"name":"emitCBEUpdate","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitCBEUpdate(address)","signatureHash":"cb979a2f"},{"constant":true,"inputs":[],"name":"contractOwner","payable":false,"stateMutability":"view","type":"function","signature":"contractOwner()","signatureHash":"ce606ee0"},{"constant":false,"inputs":[{"name":"tokens","type":"address[]"},{"name":"_to","type":"address"}],"name":"withdrawnTokens","payable":false,"stateMutability":"nonpayable","type":"function","signature":"withdrawnTokens(address[],address)","signatureHash":"d8f9659b"},{"constant":true,"inputs":[],"name":"required","payable":false,"stateMutability":"view","type":"function","signature":"required()","signatureHash":"dc8452cd"},{"constant":false,"inputs":[{"name":"error","type":"uint256"}],"name":"emitError","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitError(uint256)","signatureHash":"df26ca08"},{"constant":false,"inputs":[{"name":"key","type":"address"},{"name":"oldHash","type":"bytes32"},{"name":"newHash","type":"bytes32"}],"name":"emitHashUpdate","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitHashUpdate(address,bytes32,bytes32)","signatureHash":"f8ac9f53"},{"constant":true,"inputs":[{"name":"key","type":"address"}],"name":"isAuthorized","payable":false,"stateMutability":"view","type":"function","signature":"isAuthorized(address)","signatureHash":"fe9fbb80"},{"constant":true,"inputs":[],"name":"getEventsHistory","payable":false,"stateMutability":"view","type":"function","signature":"getEventsHistory()","signatureHash":"fff10aba"},{"inputs":[{"name":"_store","type":"address"},{"name":"_crate","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":false,"stateMutability":"nonpayable","type":"fallback","inputs":[]},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"key","type":"address"}],"name":"NewUserRegistered","type":"event","signature":"NewUserRegistered(address,address)","signatureHash":"6375fd6f"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"key","type":"address"}],"name":"CBEUpdate","type":"event","signature":"CBEUpdate(address,address)","signatureHash":"9678dbf6"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"required","type":"uint256"}],"name":"SetRequired","type":"event","signature":"SetRequired(address,uint256)","signatureHash":"0b690e53"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":true,"name":"key","type":"address"},{"indexed":false,"name":"oldHash","type":"bytes32"},{"indexed":false,"name":"newHash","type":"bytes32"}],"name":"SetHash","type":"event","signature":"SetHash(address,address,bytes32,bytes32)","signatureHash":"b47d03ee"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"errorCode","type":"uint256"}],"name":"Error","type":"event","signature":"Error(address,uint256)","signatureHash":"9cf38cf2"}]}
