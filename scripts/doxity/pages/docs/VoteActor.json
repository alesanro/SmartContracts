{"fileName":"/contracts/vote/VoteActor.sol","name":"VoteActor","abi":[{"constant":false,"inputs":[{"name":"_address","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_total","type":"uint256"}],"name":"deposit","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_id","type":"uint256"}],"name":"isPollOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address"}],"name":"init","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"claimContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_identifier","type":"bytes32"}],"name":"lookupManager","outputs":[{"name":"manager","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"contractsManager","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"}],"name":"changeContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"pendingContractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_eventsHistory","type":"address"}],"name":"setEventsHistory","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address"}],"name":"setContractsManager","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"destroy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"pollId","type":"uint256"}],"name":"emitPollEnded","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"}],"name":"transferContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_pollId","type":"uint256"},{"name":"_choice","type":"uint256"}],"name":"vote","outputs":[{"name":"errorCode","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"contractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"tokens","type":"address[]"},{"name":"_to","type":"address"}],"name":"withdrawnTokens","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"errorCode","type":"uint256"}],"name":"emitError","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_pollId","type":"uint256"}],"name":"checkPollIsActive","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"choice","type":"uint256"},{"name":"pollId","type":"uint256"}],"name":"emitVoteCreated","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_address","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_total","type":"uint256"}],"name":"withdrawn","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"key","type":"address"}],"name":"isAuthorized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getEventsHistory","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_store","type":"address"},{"name":"_crate","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":false,"stateMutability":"nonpayable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":false,"name":"pollId","type":"uint256"}],"name":"PollCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"pollId","type":"uint256"}],"name":"PollDeleted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"pollId","type":"uint256"}],"name":"PollEnded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"pollId","type":"uint256"}],"name":"PollActivated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"choice","type":"uint256"},{"indexed":false,"name":"pollId","type":"uint256"}],"name":"VoteCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"}],"name":"SharesPercentUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"},{"indexed":false,"name":"hash","type":"bytes32"},{"indexed":false,"name":"count","type":"uint256"}],"name":"IpfsHashToPollAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"},{"indexed":false,"name":"option","type":"bytes32"},{"indexed":false,"name":"count","type":"uint256"}],"name":"OptionAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"},{"indexed":false,"name":"option","type":"bytes32"},{"indexed":false,"name":"count","type":"uint256"}],"name":"OptionRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"}],"name":"PollDetailsUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"errorCode","type":"uint256"}],"name":"Error","type":"event"}],"source":"pragma solidity ^0.4.11;\n\nimport \"./Vote.sol\";\nimport \"./VoteActorEmitter.sol\";\nimport {TimeHolderInterface as TimeHolder} from \"../timeholder/TimeHolderInterface.sol\";\nimport \"../core/common/ListenerInterface.sol\";\n\ncontract VoteActor is Vote, VoteActorEmitter, ListenerInterface {\n\n    function VoteActor(Storage _store, bytes32 _crate) Vote(_store, _crate) {\n    }\n\n    function init(address _contractsManager) onlyContractOwner returns (uint) {\n        BaseManager.init(_contractsManager, \"VoteActor\");\n        return OK;\n    }\n\n    /**\n    * Vote for a some option from a strings list\n    *\n    * @param _pollId poll identifier\n    * @param _choice user's pick from a list of options. Must be between 1 and N\n    *\n    * @return errorCode result code of operation\n    */\n    function vote(uint _pollId, uint _choice) returns (uint errorCode) {\n        if (!isPollExist(_pollId)) {\n            return _emitError(ERROR_VOTE_POLL_DOES_NOT_EXIST);\n        }\n        if (!(_choice > 0 && _choice <= store.count(optionsId, bytes32(_pollId)))) {\n            return _emitError(ERROR_VOTE_OPTION_CHOICE_OUT_OF_RANGE);\n        }\n\n        if (!store.get(status, _pollId)) {\n            return _emitError(ERROR_VOTE_POLL_WRONG_STATUS);\n        }\n\n        if (checkPollIsInactive(_pollId)) {\n            return _emitError(ERROR_VOTE_POLL_INACTIVE);\n        }\n\n        if (store.get(memberOption, _pollId, msg.sender) != 0) {\n            return _emitError(ERROR_VOTE_POLL_ALREADY_VOTED);\n        }\n\n        address timeHolder = lookupManager(\"TimeHolder\");\n        uint balance = TimeHolder(timeHolder).depositBalance(msg.sender);\n\n        if (balance == 0) {\n            return _emitError(ERROR_VOTE_POLL_NO_SHARES);\n        }\n\n        uint optionsValue = store.get(options, _pollId, _choice) + balance;\n        store.set(options, _pollId, _choice, optionsValue);\n        store.set(optionsStats, _pollId, _choice, store.get(optionsStats, _pollId, _choice) + 1);\n        store.set(memberVotes, _pollId, msg.sender, balance);\n        store.add(members, bytes32(_pollId), msg.sender);\n        store.set(memberOption, _pollId, msg.sender, _choice);\n        store.add(memberPolls, bytes32(msg.sender), _pollId);\n        _emitVoteCreated(_choice, _pollId);\n        // if votelimit reached, end poll\n        uint voteLimitNumber = store.get(votelimit, _pollId);\n        if (optionsValue >= voteLimitNumber && (voteLimitNumber > 0 || store.get(deadline, _pollId) <= now)) {\n            endPoll(_pollId);\n        }\n        return OK;\n    }\n\n    //TimeHolder interface implementation\n    modifier onlyTimeHolder() {\n        if (msg.sender == lookupManager(\"TimeHolder\")) {\n            _;\n        }\n    }\n\n    function deposit(address _address, uint _amount, uint _total) onlyTimeHolder returns (uint) {\n        StorageInterface.Iterator memory memberPollsIterator = store.listIterator(memberPolls, bytes32(_address));\n        while (store.canGetNextWithIterator(memberPolls, memberPollsIterator)) {\n            uint pollId = store.getNextWithIterator(memberPolls, memberPollsIterator);\n            if (store.get(status, pollId) && store.get(active, pollId)) {\n                uint choice = store.get(memberOption, pollId, _address);\n                uint value = store.get(options, pollId, choice);\n                value = value + _amount;\n                store.set(memberVotes, pollId, _address, _total);\n                store.set(options, pollId, choice, value);\n            }\n            uint voteLimitNumber = store.get(votelimit, pollId);\n            if (value >= voteLimitNumber && (voteLimitNumber > 0 || store.get(deadline, pollId) <= now)) {\n                endPoll(pollId);\n            }\n        }\n        return OK;\n    }\n\n    function withdrawn(address _address, uint _amount, uint _total) onlyTimeHolder returns (uint) {\n        StorageInterface.Iterator memory memberPollsIterator = store.listIterator(memberPolls, bytes32(_address));\n        while (store.canGetNextWithIterator(memberPolls, memberPollsIterator)) {\n            uint pollId = uint(store.getNextWithIterator(memberPolls, memberPollsIterator));\n\n            if (store.get(status, pollId) && store.get(active, pollId)) {\n                uint choice = store.get(memberOption, pollId, _address);\n                uint value = store.get(options, pollId, choice);\n                value = value - _amount;\n                store.set(memberVotes, pollId, _address, _total);\n                store.set(options, pollId, choice, value);\n                if (_total == 0) {\n                    removeMember(pollId, _address);\n                    store.set(optionsStats, pollId, choice, store.get(optionsStats, pollId, choice) - 1);\n                }\n            }\n        }\n        return OK;\n    }\n\n    function removeMember(uint _pollId, address _address) internal {\n        store.set(memberOption, _pollId, _address, 0);\n        store.set(memberVotes, _pollId, _address, 0);\n        store.remove(memberPolls, bytes32(_address), _pollId);\n        store.remove(members, bytes32(_pollId), _address);\n    }\n\n    function _emitError(uint error) internal returns (uint) {\n        VoteActorEmitter(getEventsHistory()).emitError(error);\n        return error;\n    }\n\n    function _emitVoteCreated(uint choice, uint pollId) internal {\n        VoteActorEmitter(getEventsHistory()).emitVoteCreated(choice, pollId);\n    }\n}\n","abiDocs":[{"constant":false,"inputs":[{"name":"_address","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_total","type":"uint256"}],"name":"deposit","payable":false,"stateMutability":"nonpayable","type":"function","signature":"deposit(address,uint256,uint256)","signatureHash":"0efe6a8b"},{"constant":true,"inputs":[{"name":"_id","type":"uint256"}],"name":"isPollOwner","payable":false,"stateMutability":"view","type":"function","signature":"isPollOwner(uint256)","signatureHash":"15601a21"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address"}],"name":"init","payable":false,"stateMutability":"nonpayable","type":"function","signature":"init(address)","signatureHash":"19ab453c"},{"constant":false,"inputs":[],"name":"claimContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Finalize ownership pass.     * Can only be called by pending owner.","signature":"claimContractOwnership()","signatureHash":"4592cd1d"},{"constant":true,"inputs":[{"name":"_identifier","type":"bytes32","description":"is a manager's identifier. 0x0 is not allowed."}],"name":"lookupManager","payable":false,"stateMutability":"view","type":"function","details":"Returns manager's address by its identifier (type).","notice":"Will crash if no manager in the system with given identifier.","signature":"lookupManager(bytes32)","signatureHash":"4fe59012"},{"constant":true,"inputs":[],"name":"contractsManager","payable":false,"stateMutability":"view","type":"function","signature":"contractsManager()","signatureHash":"53253d31"},{"constant":false,"inputs":[{"name":"_to","type":"address","description":"address of the next owner. 0x0 is not allowed."}],"name":"changeContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Prepares ownership pass.     * Can only be called by current owner.","signature":"changeContractOwnership(address)","signatureHash":"557f4bc9"},{"constant":true,"inputs":[],"name":"pendingContractOwner","payable":false,"stateMutability":"view","type":"function","signature":"pendingContractOwner()","signatureHash":"5aa77d3c"},{"constant":false,"inputs":[{"name":"_eventsHistory","type":"address"}],"name":"setEventsHistory","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"setEventsHistory(address)","signatureHash":"6521afd7"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address","description":"contracts manager. 0x0 is not allowed."}],"name":"setContractsManager","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Setter for ContractsManager. Force overrides currect manager.","signature":"setContractsManager(address)","signatureHash":"71d3b573"},{"constant":false,"inputs":[],"name":"destroy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"destroy()","signatureHash":"83197ef0"},{"constant":false,"inputs":[{"name":"pollId","type":"uint256"}],"name":"emitPollEnded","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitPollEnded(uint256)","signatureHash":"8d65e2b5"},{"constant":false,"inputs":[{"name":"_to","type":"address","description":"the next contract owner"}],"name":"transferContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Direct ownership pass without change/claim pattern. Can be invoked only by current contract owner","return":"`true` if success, `false` otherwise","signature":"transferContractOwnership(address)","signatureHash":"a843c51f"},{"constant":false,"inputs":[{"name":"_pollId","type":"uint256","description":"poll identifier"},{"name":"_choice","type":"uint256","description":"user's pick from a list of options. Must be between 1 and N"}],"name":"vote","outputs":[{"name":"errorCode","type":"uint256","description":"result code of operation"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"errorCode result code of operation","notice":"Vote for a some option from a strings list","signature":"vote(uint256,uint256)","signatureHash":"b384abef"},{"constant":true,"inputs":[],"name":"contractOwner","payable":false,"stateMutability":"view","type":"function","signature":"contractOwner()","signatureHash":"ce606ee0"},{"constant":false,"inputs":[{"name":"tokens","type":"address[]"},{"name":"_to","type":"address"}],"name":"withdrawnTokens","payable":false,"stateMutability":"nonpayable","type":"function","signature":"withdrawnTokens(address[],address)","signatureHash":"d8f9659b"},{"constant":false,"inputs":[{"name":"errorCode","type":"uint256"}],"name":"emitError","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitError(uint256)","signatureHash":"df26ca08"},{"constant":true,"inputs":[{"name":"_pollId","type":"uint256"}],"name":"checkPollIsActive","payable":false,"stateMutability":"view","type":"function","signature":"checkPollIsActive(uint256)","signatureHash":"eaffbbb6"},{"constant":false,"inputs":[{"name":"choice","type":"uint256"},{"name":"pollId","type":"uint256"}],"name":"emitVoteCreated","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitVoteCreated(uint256,uint256)","signatureHash":"ec205e4b"},{"constant":false,"inputs":[{"name":"_address","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_total","type":"uint256"}],"name":"withdrawn","payable":false,"stateMutability":"nonpayable","type":"function","signature":"withdrawn(address,uint256,uint256)","signatureHash":"fb26441f"},{"constant":true,"inputs":[{"name":"key","type":"address"}],"name":"isAuthorized","payable":false,"stateMutability":"view","type":"function","signature":"isAuthorized(address)","signatureHash":"fe9fbb80"},{"constant":true,"inputs":[],"name":"getEventsHistory","payable":false,"stateMutability":"view","type":"function","signature":"getEventsHistory()","signatureHash":"fff10aba"},{"inputs":[{"name":"_store","type":"address"},{"name":"_crate","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":false,"stateMutability":"nonpayable","type":"fallback","inputs":[]},{"anonymous":false,"inputs":[{"indexed":false,"name":"pollId","type":"uint256"}],"name":"PollCreated","type":"event","signature":"PollCreated(uint256)","signatureHash":"ab0309b6"},{"anonymous":false,"inputs":[{"indexed":false,"name":"pollId","type":"uint256"}],"name":"PollDeleted","type":"event","signature":"PollDeleted(uint256)","signatureHash":"e66ba7d1"},{"anonymous":false,"inputs":[{"indexed":false,"name":"pollId","type":"uint256"}],"name":"PollEnded","type":"event","signature":"PollEnded(uint256)","signatureHash":"14d4cfc1"},{"anonymous":false,"inputs":[{"indexed":false,"name":"pollId","type":"uint256"}],"name":"PollActivated","type":"event","signature":"PollActivated(uint256)","signatureHash":"4d863a7b"},{"anonymous":false,"inputs":[{"indexed":false,"name":"choice","type":"uint256"},{"indexed":false,"name":"pollId","type":"uint256"}],"name":"VoteCreated","type":"event","signature":"VoteCreated(uint256,uint256)","signatureHash":"f558b17e"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"}],"name":"SharesPercentUpdated","type":"event","signature":"SharesPercentUpdated(address)","signatureHash":"22fe0086"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"},{"indexed":false,"name":"hash","type":"bytes32"},{"indexed":false,"name":"count","type":"uint256"}],"name":"IpfsHashToPollAdded","type":"event","signature":"IpfsHashToPollAdded(uint256,bytes32,uint256)","signatureHash":"a5c4447e"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"},{"indexed":false,"name":"option","type":"bytes32"},{"indexed":false,"name":"count","type":"uint256"}],"name":"OptionAdded","type":"event","signature":"OptionAdded(uint256,bytes32,uint256)","signatureHash":"b6f1f68e"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"},{"indexed":false,"name":"option","type":"bytes32"},{"indexed":false,"name":"count","type":"uint256"}],"name":"OptionRemoved","type":"event","signature":"OptionRemoved(uint256,bytes32,uint256)","signatureHash":"a410cc9c"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"}],"name":"PollDetailsUpdated","type":"event","signature":"PollDetailsUpdated(uint256)","signatureHash":"9514e96b"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"errorCode","type":"uint256"}],"name":"Error","type":"event","signature":"Error(address,uint256)","signatureHash":"9cf38cf2"}]}
