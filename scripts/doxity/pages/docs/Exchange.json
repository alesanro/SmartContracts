{"title":"ERC20-Ether exchange contract. *  Users are able to buy/sell assigned ERC20 token for ether, as long as there is available supply. Contract owner maintains sufficient token and ether supply, and sets buy/sell prices. *  In order to be able to sell tokens, user needs to create allowance for this contract, using standard ERC20 approve() function, so that exchange can take tokens from the user, when user orders a sell. *  Note: all the non constant functions return false instead of throwing in case if state change didn't happen yet.","fileName":"/contracts/exchange/Exchange.sol","name":"Exchange","abi":[{"constant":true,"inputs":[],"name":"getBuyPrice","outputs":[{"name":"base","type":"uint256"},{"name":"decimals","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_eventsHistory","type":"address"}],"name":"setupEventsHistory","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_recipient","type":"address"},{"name":"_amount","type":"uint256"}],"name":"withdrawTokens","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_recipient","type":"address"},{"name":"_amount","type":"uint256"}],"name":"withdrawEth","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"isActive","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"asset","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_authorized","type":"address"}],"name":"revokeAuthorized","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_amount","type":"uint256"},{"name":"_price","type":"uint256"},{"name":"_priceDecimals","type":"uint256"}],"name":"buy","outputs":[{"name":"","type":"uint256"}],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[],"name":"kill","outputs":[{"name":"errorCode","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getSellPrice","outputs":[{"name":"base","type":"uint256"},{"name":"decimals","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"claimContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address"},{"name":"_asset","type":"address"},{"name":"_rewards","type":"address"},{"name":"_fee","type":"uint256"}],"name":"init","outputs":[{"name":"errorCode","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_who","type":"address"},{"name":"_token","type":"uint256"},{"name":"_eth","type":"uint256"}],"name":"emitBuy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"}],"name":"changeContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"pendingContractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"feePercent","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_rewards","type":"address"},{"name":"_feePercent","type":"uint256"},{"name":"_by","type":"address"}],"name":"emitFeeUpdated","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"destroy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_who","type":"address"},{"name":"_token","type":"uint256"},{"name":"_eth","type":"uint256"}],"name":"emitSell","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_authorized","type":"address"}],"name":"grantAuthorized","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"rewards","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_recipient","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_by","type":"address"}],"name":"emitWithdrawTokens","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"}],"name":"transferContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_recipient","type":"address"}],"name":"withdrawAllTokens","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_active","type":"bool"}],"name":"setActive","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_recipient","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_by","type":"address"}],"name":"emitWithdrawEther","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_buyPrice","type":"uint256"},{"name":"_buyDecimals","type":"uint256"},{"name":"_sellPrice","type":"uint256"},{"name":"_sellDecimals","type":"uint256"},{"name":"_by","type":"address"}],"name":"emitPricesUpdated","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"assetBalance","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_sender","type":"address"},{"name":"_amount","type":"uint256"}],"name":"emitReceivedEther","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"contractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_amount","type":"uint256"},{"name":"_price","type":"uint256"},{"name":"_priceDecimals","type":"uint256"}],"name":"sell","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_recipient","type":"address"}],"name":"withdrawAllEth","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_buyPrice","type":"uint256"},{"name":"_buyDecimals","type":"uint256"},{"name":"_sellPrice","type":"uint256"},{"name":"_sellDecimals","type":"uint256"}],"name":"setPrices","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"tokens","type":"address[]"},{"name":"_to","type":"address"}],"name":"withdrawnTokens","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_isActive","type":"bool"},{"name":"_by","type":"address"}],"name":"emitActiveChanged","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_errorCode","type":"uint256"}],"name":"emitError","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_recipient","type":"address"}],"name":"withdrawAll","outputs":[{"name":"result","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_authorized","type":"address"}],"name":"isAuthorized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"exchange","type":"address"},{"indexed":true,"name":"who","type":"address"},{"indexed":false,"name":"token","type":"uint256"},{"indexed":false,"name":"eth","type":"uint256"}],"name":"ExchangeSell","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"exchange","type":"address"},{"indexed":true,"name":"who","type":"address"},{"indexed":false,"name":"token","type":"uint256"},{"indexed":false,"name":"eth","type":"uint256"}],"name":"ExchangeBuy","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"exchange","type":"address"},{"indexed":true,"name":"sender","type":"address"},{"indexed":true,"name":"amount","type":"uint256"}],"name":"ExchangeReceivedEther","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"exchange","type":"address"},{"indexed":true,"name":"recipient","type":"address"},{"indexed":false,"name":"amount","type":"uint256"},{"indexed":true,"name":"by","type":"address"}],"name":"ExchangeWithdrawTokens","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"exchange","type":"address"},{"indexed":true,"name":"recipient","type":"address"},{"indexed":false,"name":"amount","type":"uint256"},{"indexed":true,"name":"by","type":"address"}],"name":"ExchangeWithdrawEther","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"exchange","type":"address"},{"indexed":false,"name":"rewards","type":"address"},{"indexed":false,"name":"feeValue","type":"uint256"},{"indexed":true,"name":"by","type":"address"}],"name":"ExchangeFeeUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"exchange","type":"address"},{"indexed":false,"name":"buyPrice","type":"uint256"},{"indexed":false,"name":"buyDecimals","type":"uint256"},{"indexed":false,"name":"sellPrice","type":"uint256"},{"indexed":false,"name":"sellDecimals","type":"uint256"},{"indexed":true,"name":"by","type":"address"}],"name":"ExchangePricesUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"exchange","type":"address"},{"indexed":false,"name":"isActive","type":"bool"},{"indexed":true,"name":"by","type":"address"}],"name":"ExchangeActiveChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"exchange","type":"address"},{"indexed":false,"name":"errorCode","type":"uint256"}],"name":"Error","type":"event"}],"source":"pragma solidity ^0.4.11;\n\nimport \"../core/common/Object.sol\";\nimport \"../core/lib/SafeMath.sol\";\nimport {ERC20Interface as Asset} from \"../core/erc20/ERC20Interface.sol\";\nimport \"../core/contracts/ContractsManager.sol\";\n\ncontract ExchangeEmitter {\n    function emitError(uint errorCode) public returns (uint);\n    function emitFeeUpdated(address rewards, uint feePercent, address by) public;\n    function emitPricesUpdated(uint buyPrice, uint buyDecimals, uint sellPrice, uint sellDecimals, address by) public;\n    function emitActiveChanged(bool isActive, address by) public;\n    function emitBuy(address who, uint token, uint eth) public;\n    function emitSell(address who, uint token, uint eth) public;\n    function emitWithdrawEther(address recipient, uint amount, address by) public;\n    function emitWithdrawTokens(address recipient, uint amount, address by) public;\n    function emitReceivedEther(address sender, uint amount) public;\n}\n\ncontract IExchangeManager {\n    function removeExchange() public returns (uint errorCode);\n}\n\n/**\n *  @title ERC20-Ether exchange contract.\n *\n *  Users are able to buy/sell assigned ERC20 token for ether,\n *  as long as there is available supply. Contract owner maintains\n *  sufficient token and ether supply, and sets buy/sell prices.\n *\n *  In order to be able to sell tokens, user needs to create allowance\n *  for this contract, using standard ERC20 approve() function,\n *  so that exchange can take tokens from the user, when user\n *  orders a sell.\n *\n *  Note: all the non constant functions return false instead of\n *  throwing in case if state change didn't happen yet.\n */\ncontract Exchange is Object {\n    using SafeMath for uint;\n    uint constant ERROR_EXCHANGE_INVALID_INVOCATION = 6000;\n    uint constant ERROR_EXCHANGE_MAINTENANCE_MODE = 6001;\n    uint constant ERROR_EXCHANGE_INVALID_PRICE = 6002;\n    uint constant ERROR_EXCHANGE_INSUFFICIENT_BALANCE = 6004;\n    uint constant ERROR_EXCHANGE_INSUFFICIENT_ETHER_SUPPLY = 6005;\n    uint constant ERROR_EXCHANGE_PAYMENT_FAILED = 6006;\n    uint constant ERROR_EXCHANGE_TRANSFER_FAILED = 6007;\n    // price 1.1 == 11* 10^1 == Price(10, 1)\n    struct Price {\n        uint base;\n        uint decimals;\n    }\n    // Assigned ERC20 token.\n    Asset public asset;\n    //Switch for turn on and off the exchange operations\n    bool public isActive;\n    // Price in wei at which exchange buys tokens.\n    Price buyPrice;\n    // Price in wei at which exchange sells tokens.\n    Price sellPrice;\n    // Fee wallet\n    address public rewards;\n    // Fee value for operations 10000 is 0.01.\n    uint public feePercent;\n    // Authorized price managers\n    mapping (address => bool) authorized;\n\n    // User sold tokens and received wei.\n    event ExchangeSell(address indexed exchange, address indexed who, uint token, uint eth);\n    // User bought tokens and payed wei.\n    event ExchangeBuy(address indexed exchange, address indexed who, uint token, uint eth);\n    // On received ethers\n    event ExchangeReceivedEther(address indexed exchange, address indexed sender, uint256 indexed amount);\n\n    event ExchangeWithdrawTokens(address indexed exchange, address indexed recipient, uint amount, address indexed by);\n    event ExchangeWithdrawEther(address indexed exchange, address indexed recipient, uint amount, address indexed by);\n    event ExchangeFeeUpdated(address indexed exchange, address rewards, uint feeValue, address indexed by);\n    event ExchangePricesUpdated(address indexed exchange, uint buyPrice, uint buyDecimals, uint sellPrice, uint sellDecimals, address indexed by);\n    event ExchangeActiveChanged(address indexed exchange, bool isActive, address indexed by);\n    event Error(address indexed exchange, uint errorCode);\n\n    // Should use interface of the emitter, but address of events history.\n    ExchangeEmitter eventsHistory;\n    address contractsManager;\n\n    modifier onlyAuthorized() {\n        if (msg.sender == contractOwner || authorized[msg.sender]) {\n            _;\n        }\n    }\n    /**\n     * Assigns ERC20 token for exchange.\n     *\n     * Can be set only once, and only by contract owner.\n     *\n     * @param _asset ERC20 token address.\n     *\n     * @return success.\n     */\n    function init(\n        address _contractsManager,\n        address _asset,\n        address _rewards,\n        uint _fee)\n    public\n    onlyContractOwner\n    returns (uint errorCode)\n    {\n        require(_contractsManager != 0x0);\n        require(_asset != 0x0);\n        require(address(asset) == 0x0);\n\n        asset = Asset(_asset);\n        contractsManager = _contractsManager;\n\n        if (OK != setFee(_rewards, _fee)) {\n            revert();\n        }\n\n        return OK;\n    }\n\n    /**\n     * Sets EventsHstory contract address.\n     *\n     * Can be set only once, and only by contract owner.\n     *\n     * @param _eventsHistory MultiEventsHistory contract address.\n     *\n     * @return success.\n     */\n    function setupEventsHistory(address _eventsHistory)\n    public\n    onlyContractOwner\n    returns (uint)\n    {\n        require(_eventsHistory != 0x0);\n        eventsHistory = ExchangeEmitter(_eventsHistory);\n        return OK;\n    }\n\n    /**\n    *  Authorizes given address to execute restricted methods.\n    *  Can be called only by contract owner.\n    */\n    function grantAuthorized(address _authorized)\n    public\n    onlyContractOwner\n    returns (uint) {\n        authorized[_authorized] = true;\n        return OK;\n    }\n\n    /**\n    *  Revokes granted access rights.\n    *  Can be called only by contract owner.\n    */\n    function revokeAuthorized(address _authorized)\n    public\n    onlyContractOwner\n    returns (uint) {\n        delete authorized[_authorized];\n        return OK;\n    }\n\n    /**\n    *  Tells whether given address is authorized or not\n    */\n    function isAuthorized(address _authorized) public constant returns (bool) {\n        return authorized[_authorized];\n    }\n\n    /**\n     * Set exchange operation prices.\n     * Sell price cannot be less than buy price.\n     *\n     * Can be set only by contract owner.\n     *\n     * @param _buyPrice price in wei at which exchange buys tokens.\n     * @param _sellPrice price in wei at which exchange sells tokens.\n     *\n     * @return success.\n     */\n    function setPrices(uint _buyPrice, uint _buyDecimals, uint _sellPrice, uint _sellDecimals)\n    public\n    onlyAuthorized\n    returns (uint)\n    {\n        // buy price <= sell price\n        uint max_dec = 10**max(_buyDecimals, _sellDecimals);\n        require(_buyPrice * max_dec / 10**_buyDecimals <= _sellPrice * max_dec / 10**_sellDecimals);\n\n        buyPrice = Price(_buyPrice, _buyDecimals);\n        sellPrice = Price(_sellPrice, _sellDecimals);\n\n        _emitPricesUpdated(_buyPrice, _buyDecimals, _sellPrice, _sellDecimals, msg.sender);\n        return OK;\n    }\n\n    /**\n    *  Exchange must be activated before using.\n    *\n    *  Note: An exchange is not activated `by default` after init().\n    *  Make sure that prices are valid before activation.\n    */\n    function setActive(bool _active)\n    public\n    onlyContractOwner\n    returns (uint)\n    {\n        isActive = _active;\n\n        _emitActiveChanged(_active, msg.sender);\n        return OK;\n    }\n\n    /**\n    *  Returns ERC20 balance of an exchange\n    */\n    function assetBalance() public constant returns (uint) {\n        return _balanceOf(this);\n    }\n\n    /**\n     * Returns assigned token address balance.\n     *\n     * @param _address address to get balance.\n     *\n     * @return token balance.\n     */\n    function _balanceOf(address _address) constant internal returns (uint) {\n        return asset.balanceOf(_address);\n    }\n\n    /**\n    *  Returns sell price\n    */\n    function getSellPrice() public view returns (uint base, uint decimals) {\n        return (sellPrice.base, sellPrice.decimals);\n    }\n\n    /**\n    *  Returns buy price\n    */\n    function getBuyPrice() public view returns (uint base, uint decimals) {\n        return (buyPrice.base, buyPrice.decimals);\n    }\n\n    /**\n     * Sell tokens for ether at specified price. Tokens are taken from caller\n     * though an allowance logic.\n     * Amount should be less than or equal to current allowance value.\n     * Price should be less than or equal to current exchange buyPrice.\n     *\n     * @param _amount amount of tokens to sell.\n     * @param _price price in wei at which sell will happen.\n     *\n     * @return success.\n     */\n    function sell(uint _amount, uint _price, uint _priceDecimals) public returns (uint) {\n        if (!isActive) {\n            return _emitError(ERROR_EXCHANGE_MAINTENANCE_MODE);\n        }\n\n        if (_price != buyPrice.base || _priceDecimals != buyPrice.decimals) {\n            return _emitError(ERROR_EXCHANGE_INVALID_PRICE);\n        }\n\n        if (_balanceOf(msg.sender) < _amount) {\n            return _emitError(ERROR_EXCHANGE_INSUFFICIENT_BALANCE);\n        }\n\n        uint total = _amount.mul(buyPrice.base) / 10**buyPrice.decimals;\n        if (this.balance < total) {\n            return _emitError(ERROR_EXCHANGE_INSUFFICIENT_ETHER_SUPPLY);\n        }\n\n        if (!asset.transferFrom(msg.sender, this, _amount)) {\n            return _emitError(ERROR_EXCHANGE_PAYMENT_FAILED);\n        }\n\n        if (!msg.sender.send(total)) {\n            revert();\n        }\n\n        _emitSell(msg.sender, _amount, total);\n        return OK;\n    }\n\n    /**\n     * Buy tokens for ether at specified price. Payment needs to be sent along\n     * with the call, and should equal amount * price.\n     * Price should be greater than or equal to current exchange sellPrice.\n     *\n     * @param _amount amount of tokens to buy.\n     * @param _price price in wei at which buy will happen.\n     *\n     * @return success.\n     */\n    function buy(uint _amount, uint _price, uint _priceDecimals) payable public returns (uint) {\n        if (!isActive) {\n            return _emitError(ERROR_EXCHANGE_MAINTENANCE_MODE);\n        }\n\n        if (_price != sellPrice.base || _priceDecimals != sellPrice.decimals) {\n            return _emitError(ERROR_EXCHANGE_INVALID_PRICE);\n        }\n\n        if (_balanceOf(this) < _amount) {\n            return _emitError(ERROR_EXCHANGE_INSUFFICIENT_BALANCE);\n        }\n\n        uint total = _amount.mul(sellPrice.base) / 10**sellPrice.decimals;\n        if (msg.value != total) {\n            return _emitError(ERROR_EXCHANGE_INSUFFICIENT_ETHER_SUPPLY);\n        }\n\n        if (!asset.transfer(msg.sender, _amount)) {\n            revert();\n        }\n\n        _emitBuy(msg.sender, _amount, total);\n        return OK;\n    }\n\n    /**\n     * Transfer specified amount of tokens from exchange to specified address.\n     *\n     * Can be called only by contract owner.\n     *\n     * @param _recipient address to transfer tokens to.\n     * @param _amount amount of tokens to transfer.\n     *\n     * @return success.\n     */\n    function withdrawTokens(address _recipient, uint _amount) public onlyContractOwner returns (uint) {\n        if (_balanceOf(this) < _amount) {\n            return _emitError(ERROR_EXCHANGE_INSUFFICIENT_BALANCE);\n        }\n\n        uint amount = (_amount * 10000) / (10000 + feePercent);\n        if (!asset.transfer(_recipient, amount)) {\n            return _emitError(ERROR_EXCHANGE_TRANSFER_FAILED);\n        }\n\n        if (feePercent > 0 && !asset.transfer(rewards, _amount.sub(amount))) {\n            revert();\n        }\n\n        _emitWithdrawTokens(_recipient, amount, msg.sender);\n        return OK;\n    }\n\n    /**\n     * Transfer all tokens from exchange to specified address.\n     *\n     * Can be called only by contract owner.\n     *\n     * @param _recipient address to transfer tokens to.\n     *\n     * @return success.\n     */\n    function withdrawAllTokens(address _recipient) public onlyContractOwner returns (uint) {\n        return withdrawTokens(_recipient, _balanceOf(this));\n    }\n\n    /**\n     * Transfer specified amount of wei from exchange to specified address.\n     *\n     * Can be called only by contract owner.\n     *\n     * @param _recipient address to transfer wei to.\n     * @param _amount amount of wei to transfer.\n     *\n     * @return success.\n     */\n    function withdrawEth(address _recipient, uint _amount) public onlyContractOwner returns (uint) {\n        if (this.balance < _amount) {\n            return _emitError(ERROR_EXCHANGE_INSUFFICIENT_ETHER_SUPPLY);\n        }\n\n        uint amount = (_amount * 10000) / (10000 + feePercent);\n\n        if (!_recipient.send(amount)) {\n            return _emitError(ERROR_EXCHANGE_TRANSFER_FAILED);\n        }\n\n        if (feePercent > 0 && !rewards.send(_amount.sub(amount))) {\n            revert();\n        }\n\n        _emitWithdrawEther(_recipient, amount, msg.sender);\n        return OK;\n    }\n\n    /**\n     * Transfer all wei from exchange to specified address.\n     *\n     * Can be called only by contract owner.\n     *\n     * @param _recipient address to transfer wei to.\n     *\n     * @return success.\n     */\n    function withdrawAllEth(address _recipient) public onlyContractOwner returns (uint) {\n        return withdrawEth(_recipient, this.balance);\n    }\n\n    /**\n     * Transfer all tokens and wei from exchange to specified address.\n     *\n     * Can be called only by contract owner.\n     *\n     * @param _recipient address to transfer tokens and wei to.\n     *\n     * @return success.\n     */\n    function withdrawAll(address _recipient) public onlyContractOwner returns (uint result) {\n        result = withdrawAllTokens(_recipient);\n        if (result != OK) {\n            return result;\n        }\n\n        result = withdrawAllEth(_recipient);\n        if (result != OK) {\n            return result;\n        }\n\n        return OK;\n    }\n\n    /**\n    *  Use kill() instead of destroy() to prevent accidental ether/ERC20 loosing\n    */\n    function destroy() public onlyContractOwner {\n        revert();\n    }\n\n    /**\n    *  Kills an exchnage contract.\n    *\n    *  Checks balances of an exchange before destroying.\n    *  Destroys an exchange only if balances are empty.\n    */\n    function kill() public onlyContractOwner returns (uint errorCode) {\n        if (this.balance > 0) {\n            return _emitError(ERROR_EXCHANGE_INVALID_INVOCATION);\n        }\n\n        if (asset.balanceOf(this) > 0) {\n            return _emitError(ERROR_EXCHANGE_INVALID_INVOCATION);\n        }\n\n        address exchangeManager = ContractsManager(contractsManager).getContractAddressByType(\"ExchangeManager\");\n        errorCode = IExchangeManager(exchangeManager).removeExchange();\n        if (errorCode != OK) {\n            return _emitError(errorCode);\n        }\n\n        Owned.destroy();\n    }\n\n    function setFee(address _rewards, uint _feePercent)\n    internal\n    returns (uint)\n    {\n        require(_rewards != 0x0);\n        require(/*_feePercent > 1 && */ _feePercent < 10000);\n\n        rewards = _rewards;\n        feePercent = _feePercent;\n\n        _emitFeeUpdated(_rewards, _feePercent, msg.sender);\n        return OK;\n    }\n\n    // Events helpers\n\n    function _emitError(uint _errorCode) internal returns (uint) {\n        eventsHistory.emitError(_errorCode);\n        return _errorCode;\n    }\n\n    function _emitFeeUpdated(address _rewards, uint _feePercent, address _by) internal {\n        eventsHistory.emitFeeUpdated(_rewards, _feePercent, _by);\n    }\n\n    function _emitPricesUpdated(uint _buyPrice, uint _buyDecimals, uint _sellPrice, uint _sellDecimals, address _by) internal {\n        eventsHistory.emitPricesUpdated(_buyPrice, _buyDecimals, _sellPrice, _sellDecimals, _by);\n    }\n\n    function _emitActiveChanged(bool _isActive, address _by) internal {\n        eventsHistory.emitActiveChanged(_isActive, _by);\n    }\n\n    function _emitBuy(address _who, uint _token, uint _eth) internal {\n        eventsHistory.emitBuy(_who, _token, _eth);\n    }\n\n    function _emitSell(address _who, uint _token, uint _eth) internal {\n        eventsHistory.emitSell(_who, _token, _eth);\n    }\n\n    function _emitWithdrawEther(address _recipient, uint _amount, address _by) internal {\n        eventsHistory.emitWithdrawEther(_recipient, _amount, _by);\n    }\n\n    function _emitWithdrawTokens(address _recipient, uint _amount, address _by) internal {\n        eventsHistory.emitWithdrawTokens(_recipient, _amount, _by);\n    }\n\n    function _emitReceivedEther(address _sender, uint _amount) internal {\n        eventsHistory.emitReceivedEther(_sender, _amount);\n    }\n\n    // emit* methods are designed to be called only via EventsHistory\n\n    function emitError(uint _errorCode) public returns (uint) {\n        Error(msg.sender, _errorCode);\n        return _errorCode;\n    }\n\n    function emitFeeUpdated(address _rewards, uint _feePercent, address _by) public {\n        ExchangeFeeUpdated(msg.sender, _rewards, _feePercent, _by);\n    }\n\n    function emitPricesUpdated(uint _buyPrice, uint _buyDecimals, uint _sellPrice, uint _sellDecimals, address _by) public {\n        ExchangePricesUpdated(msg.sender, _buyPrice, _buyDecimals, _sellPrice, _sellDecimals, _by);\n    }\n\n    function emitActiveChanged(bool _isActive, address _by) public {\n        ExchangeActiveChanged(msg.sender, _isActive, _by);\n    }\n\n    function emitBuy(address _who, uint _token, uint _eth) public {\n        ExchangeBuy(msg.sender, _who, _token, _eth);\n    }\n\n    function emitSell(address _who, uint _token, uint _eth) public {\n        ExchangeSell(msg.sender, _who, _token, _eth);\n    }\n\n    function emitWithdrawEther(address _recipient, uint _amount, address _by) public {\n        ExchangeWithdrawEther(msg.sender, _recipient, _amount, _by);\n    }\n\n    function emitWithdrawTokens(address _recipient, uint _amount, address _by) public {\n        ExchangeWithdrawTokens(msg.sender, _recipient, _amount, _by);\n    }\n\n    function emitReceivedEther(address _sender, uint _amount) public {\n        ExchangeReceivedEther(msg.sender, _sender, _amount);\n    }\n\n    /**\n     * Accept all ether to maintain exchange supply.\n     */\n    function() payable public {\n        if (msg.value != 0) {\n            _emitReceivedEther(msg.sender, msg.value);\n        } else {\n            revert();\n        }\n    }\n\n    function max(uint a, uint b) private pure returns (uint256) {\n        return a >= b ? a : b;\n    }\n}\n","abiDocs":[{"constant":true,"inputs":[],"name":"getBuyPrice","payable":false,"stateMutability":"view","type":"function","notice":"Returns buy price","signature":"getBuyPrice()","signatureHash":"018a25e8"},{"constant":false,"inputs":[{"name":"_eventsHistory","type":"address","description":"MultiEventsHistory contract address."}],"name":"setupEventsHistory","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Sets EventsHstory contract address.     * Can be set only once, and only by contract owner.","signature":"setupEventsHistory(address)","signatureHash":"02927d20"},{"constant":false,"inputs":[{"name":"_recipient","type":"address","description":"address to transfer tokens to."},{"name":"_amount","type":"uint256","description":"amount of tokens to transfer."}],"name":"withdrawTokens","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Transfer specified amount of tokens from exchange to specified address.     * Can be called only by contract owner.","signature":"withdrawTokens(address,uint256)","signatureHash":"06b091f9"},{"constant":false,"inputs":[{"name":"_recipient","type":"address","description":"address to transfer wei to."},{"name":"_amount","type":"uint256","description":"amount of wei to transfer."}],"name":"withdrawEth","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Transfer specified amount of wei from exchange to specified address.     * Can be called only by contract owner.","signature":"withdrawEth(address,uint256)","signatureHash":"1b9a91a4"},{"constant":true,"inputs":[],"name":"isActive","payable":false,"stateMutability":"view","type":"function","signature":"isActive()","signatureHash":"22f3e2d4"},{"constant":true,"inputs":[],"name":"asset","payable":false,"stateMutability":"view","type":"function","signature":"asset()","signatureHash":"38d52e0f"},{"constant":false,"inputs":[{"name":"_authorized","type":"address"}],"name":"revokeAuthorized","payable":false,"stateMutability":"nonpayable","type":"function","notice":"Revokes granted access rights. Can be called only by contract owner.","signature":"revokeAuthorized(address)","signatureHash":"3f48be2d"},{"constant":false,"inputs":[{"name":"_amount","type":"uint256","description":"amount of tokens to buy."},{"name":"_price","type":"uint256","description":"price in wei at which buy will happen."},{"name":"_priceDecimals","type":"uint256"}],"name":"buy","outputs":[{"name":"","type":"uint256"}],"payable":true,"stateMutability":"payable","type":"function","return":"success.","notice":"Buy tokens for ether at specified price. Payment needs to be sent along with the call, and should equal amount * price. Price should be greater than or equal to current exchange sellPrice.","signature":"buy(uint256,uint256,uint256)","signatureHash":"40993b26"},{"constant":false,"inputs":[],"name":"kill","payable":false,"stateMutability":"nonpayable","type":"function","notice":"Kills an exchnage contract.    *  Checks balances of an exchange before destroying. Destroys an exchange only if balances are empty.","signature":"kill()","signatureHash":"41c0e1b5"},{"constant":true,"inputs":[],"name":"getSellPrice","payable":false,"stateMutability":"view","type":"function","notice":"Returns sell price","signature":"getSellPrice()","signatureHash":"43d32e9c"},{"constant":false,"inputs":[],"name":"claimContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Finalize ownership pass.     * Can only be called by pending owner.","signature":"claimContractOwnership()","signatureHash":"4592cd1d"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address"},{"name":"_asset","type":"address","description":"ERC20 token address."},{"name":"_rewards","type":"address"},{"name":"_fee","type":"uint256"}],"name":"init","outputs":[{"name":"errorCode","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Assigns ERC20 token for exchange.     * Can be set only once, and only by contract owner.","signature":"init(address,address,address,uint256)","signatureHash":"46639dba"},{"constant":false,"inputs":[{"name":"_who","type":"address"},{"name":"_token","type":"uint256"},{"name":"_eth","type":"uint256"}],"name":"emitBuy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitBuy(address,uint256,uint256)","signatureHash":"4e3f0a01"},{"constant":false,"inputs":[{"name":"_to","type":"address","description":"address of the next owner. 0x0 is not allowed."}],"name":"changeContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Prepares ownership pass.     * Can only be called by current owner.","signature":"changeContractOwnership(address)","signatureHash":"557f4bc9"},{"constant":true,"inputs":[],"name":"pendingContractOwner","payable":false,"stateMutability":"view","type":"function","signature":"pendingContractOwner()","signatureHash":"5aa77d3c"},{"constant":true,"inputs":[],"name":"feePercent","payable":false,"stateMutability":"view","type":"function","signature":"feePercent()","signatureHash":"7fd6f15c"},{"constant":false,"inputs":[{"name":"_rewards","type":"address"},{"name":"_feePercent","type":"uint256"},{"name":"_by","type":"address"}],"name":"emitFeeUpdated","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitFeeUpdated(address,uint256,address)","signatureHash":"808700f5"},{"constant":false,"inputs":[],"name":"destroy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","notice":"Use kill() instead of destroy() to prevent accidental ether/ERC20 loosing","signature":"destroy()","signatureHash":"83197ef0"},{"constant":false,"inputs":[{"name":"_who","type":"address"},{"name":"_token","type":"uint256"},{"name":"_eth","type":"uint256"}],"name":"emitSell","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitSell(address,uint256,uint256)","signatureHash":"88ae3c6b"},{"constant":false,"inputs":[{"name":"_authorized","type":"address"}],"name":"grantAuthorized","payable":false,"stateMutability":"nonpayable","type":"function","notice":"Authorizes given address to execute restricted methods. Can be called only by contract owner.","signature":"grantAuthorized(address)","signatureHash":"94f3ed31"},{"constant":true,"inputs":[],"name":"rewards","payable":false,"stateMutability":"view","type":"function","signature":"rewards()","signatureHash":"9ec5a894"},{"constant":false,"inputs":[{"name":"_recipient","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_by","type":"address"}],"name":"emitWithdrawTokens","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitWithdrawTokens(address,uint256,address)","signatureHash":"a64abab9"},{"constant":false,"inputs":[{"name":"_to","type":"address","description":"the next contract owner"}],"name":"transferContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Direct ownership pass without change/claim pattern. Can be invoked only by current contract owner","return":"`true` if success, `false` otherwise","signature":"transferContractOwnership(address)","signatureHash":"a843c51f"},{"constant":false,"inputs":[{"name":"_recipient","type":"address","description":"address to transfer tokens to."}],"name":"withdrawAllTokens","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Transfer all tokens from exchange to specified address.     * Can be called only by contract owner.","signature":"withdrawAllTokens(address)","signatureHash":"a878aee6"},{"constant":false,"inputs":[{"name":"_active","type":"bool"}],"name":"setActive","payable":false,"stateMutability":"nonpayable","type":"function","notice":"Exchange must be activated before using.    *  Note: An exchange is not activated `by default` after init(). Make sure that prices are valid before activation.","signature":"setActive(bool)","signatureHash":"acec338a"},{"constant":false,"inputs":[{"name":"_recipient","type":"address"},{"name":"_amount","type":"uint256"},{"name":"_by","type":"address"}],"name":"emitWithdrawEther","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitWithdrawEther(address,uint256,address)","signatureHash":"c1538d45"},{"constant":false,"inputs":[{"name":"_buyPrice","type":"uint256"},{"name":"_buyDecimals","type":"uint256"},{"name":"_sellPrice","type":"uint256"},{"name":"_sellDecimals","type":"uint256"},{"name":"_by","type":"address"}],"name":"emitPricesUpdated","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitPricesUpdated(uint256,uint256,uint256,uint256,address)","signatureHash":"c3ec2014"},{"constant":true,"inputs":[],"name":"assetBalance","payable":false,"stateMutability":"view","type":"function","notice":"Returns ERC20 balance of an exchange","signature":"assetBalance()","signatureHash":"c66f2455"},{"constant":false,"inputs":[{"name":"_sender","type":"address"},{"name":"_amount","type":"uint256"}],"name":"emitReceivedEther","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitReceivedEther(address,uint256)","signatureHash":"c81e7908"},{"constant":true,"inputs":[],"name":"contractOwner","payable":false,"stateMutability":"view","type":"function","signature":"contractOwner()","signatureHash":"ce606ee0"},{"constant":false,"inputs":[{"name":"_amount","type":"uint256","description":"amount of tokens to sell."},{"name":"_price","type":"uint256","description":"price in wei at which sell will happen."},{"name":"_priceDecimals","type":"uint256"}],"name":"sell","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Sell tokens for ether at specified price. Tokens are taken from caller though an allowance logic. Amount should be less than or equal to current allowance value. Price should be less than or equal to current exchange buyPrice.","signature":"sell(uint256,uint256,uint256)","signatureHash":"d3c9727c"},{"constant":false,"inputs":[{"name":"_recipient","type":"address","description":"address to transfer wei to."}],"name":"withdrawAllEth","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Transfer all wei from exchange to specified address.     * Can be called only by contract owner.","signature":"withdrawAllEth(address)","signatureHash":"d46d79bb"},{"constant":false,"inputs":[{"name":"_buyPrice","type":"uint256","description":"price in wei at which exchange buys tokens."},{"name":"_buyDecimals","type":"uint256"},{"name":"_sellPrice","type":"uint256","description":"price in wei at which exchange sells tokens."},{"name":"_sellDecimals","type":"uint256"}],"name":"setPrices","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Set exchange operation prices. Sell price cannot be less than buy price.     * Can be set only by contract owner.","signature":"setPrices(uint256,uint256,uint256,uint256)","signatureHash":"d8e86854"},{"constant":false,"inputs":[{"name":"tokens","type":"address[]"},{"name":"_to","type":"address"}],"name":"withdrawnTokens","payable":false,"stateMutability":"nonpayable","type":"function","signature":"withdrawnTokens(address[],address)","signatureHash":"d8f9659b"},{"constant":false,"inputs":[{"name":"_isActive","type":"bool"},{"name":"_by","type":"address"}],"name":"emitActiveChanged","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitActiveChanged(bool,address)","signatureHash":"db3dccc0"},{"constant":false,"inputs":[{"name":"_errorCode","type":"uint256"}],"name":"emitError","payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitError(uint256)","signatureHash":"df26ca08"},{"constant":false,"inputs":[{"name":"_recipient","type":"address","description":"address to transfer tokens and wei to."}],"name":"withdrawAll","outputs":[{"name":"result","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Transfer all tokens and wei from exchange to specified address.     * Can be called only by contract owner.","signature":"withdrawAll(address)","signatureHash":"fa09e630"},{"constant":true,"inputs":[{"name":"_authorized","type":"address"}],"name":"isAuthorized","payable":false,"stateMutability":"view","type":"function","notice":"Tells whether given address is authorized or not","signature":"isAuthorized(address)","signatureHash":"fe9fbb80"},{"payable":true,"stateMutability":"payable","type":"fallback","inputs":[]},{"anonymous":false,"inputs":[{"indexed":true,"name":"exchange","type":"address"},{"indexed":true,"name":"who","type":"address"},{"indexed":false,"name":"token","type":"uint256"},{"indexed":false,"name":"eth","type":"uint256"}],"name":"ExchangeSell","type":"event","signature":"ExchangeSell(address,address,uint256,uint256)","signatureHash":"9396518c"},{"anonymous":false,"inputs":[{"indexed":true,"name":"exchange","type":"address"},{"indexed":true,"name":"who","type":"address"},{"indexed":false,"name":"token","type":"uint256"},{"indexed":false,"name":"eth","type":"uint256"}],"name":"ExchangeBuy","type":"event","signature":"ExchangeBuy(address,address,uint256,uint256)","signatureHash":"666f2a1e"},{"anonymous":false,"inputs":[{"indexed":true,"name":"exchange","type":"address"},{"indexed":true,"name":"sender","type":"address"},{"indexed":true,"name":"amount","type":"uint256"}],"name":"ExchangeReceivedEther","type":"event","signature":"ExchangeReceivedEther(address,address,uint256)","signatureHash":"64421356"},{"anonymous":false,"inputs":[{"indexed":true,"name":"exchange","type":"address"},{"indexed":true,"name":"recipient","type":"address"},{"indexed":false,"name":"amount","type":"uint256"},{"indexed":true,"name":"by","type":"address"}],"name":"ExchangeWithdrawTokens","type":"event","signature":"ExchangeWithdrawTokens(address,address,uint256,address)","signatureHash":"33a424bf"},{"anonymous":false,"inputs":[{"indexed":true,"name":"exchange","type":"address"},{"indexed":true,"name":"recipient","type":"address"},{"indexed":false,"name":"amount","type":"uint256"},{"indexed":true,"name":"by","type":"address"}],"name":"ExchangeWithdrawEther","type":"event","signature":"ExchangeWithdrawEther(address,address,uint256,address)","signatureHash":"e44fa178"},{"anonymous":false,"inputs":[{"indexed":true,"name":"exchange","type":"address"},{"indexed":false,"name":"rewards","type":"address"},{"indexed":false,"name":"feeValue","type":"uint256"},{"indexed":true,"name":"by","type":"address"}],"name":"ExchangeFeeUpdated","type":"event","signature":"ExchangeFeeUpdated(address,address,uint256,address)","signatureHash":"8de091a3"},{"anonymous":false,"inputs":[{"indexed":true,"name":"exchange","type":"address"},{"indexed":false,"name":"buyPrice","type":"uint256"},{"indexed":false,"name":"buyDecimals","type":"uint256"},{"indexed":false,"name":"sellPrice","type":"uint256"},{"indexed":false,"name":"sellDecimals","type":"uint256"},{"indexed":true,"name":"by","type":"address"}],"name":"ExchangePricesUpdated","type":"event","signature":"ExchangePricesUpdated(address,uint256,uint256,uint256,uint256,address)","signatureHash":"b1341f01"},{"anonymous":false,"inputs":[{"indexed":true,"name":"exchange","type":"address"},{"indexed":false,"name":"isActive","type":"bool"},{"indexed":true,"name":"by","type":"address"}],"name":"ExchangeActiveChanged","type":"event","signature":"ExchangeActiveChanged(address,bool,address)","signatureHash":"f7477d39"},{"anonymous":false,"inputs":[{"indexed":true,"name":"exchange","type":"address"},{"indexed":false,"name":"errorCode","type":"uint256"}],"name":"Error","type":"event","signature":"Error(address,uint256)","signatureHash":"9cf38cf2"}]}
