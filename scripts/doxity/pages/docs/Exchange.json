{"fileName":"/contracts/exchange/Exchange.sol","name":"Exchange","abi":[{"constant":false,"inputs":[{"name":"_eventsHistory","type":"address"}],"name":"setupEventsHistory","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_buyPrice","type":"uint256"},{"name":"_sellPrice","type":"uint256"}],"name":"setPrices","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_recipient","type":"address"},{"name":"_amount","type":"uint256"}],"name":"withdrawTokens","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_recipient","type":"address"},{"name":"_amount","type":"uint256"}],"name":"withdrawEth","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"isActive","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"asset","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"claimContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_asset","type":"address"},{"name":"_rewards","type":"address"},{"name":"_delegate","type":"address"},{"name":"_fee","type":"uint256"}],"name":"init","outputs":[{"name":"errorCode","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"sellPrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"}],"name":"changeContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"pendingContractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"maxAmount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"feePercent","type":"uint256"}],"name":"emitFeeUpdated","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"feePercent","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"destroy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"isActive","type":"bool"}],"name":"emitActiveChanged","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"buyPrice","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"buyPrice","type":"uint256"},{"name":"sellPrice","type":"uint256"}],"name":"emitPricesUpdated","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"minAmount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"}],"name":"transferContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_recipient","type":"address"}],"name":"withdrawAllTokens","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_active","type":"bool"}],"name":"setActive","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"contractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_recipient","type":"address"}],"name":"withdrawAllEth","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_amount","type":"uint256"},{"name":"_price","type":"uint256"}],"name":"buy","outputs":[{"name":"","type":"uint256"}],"payable":true,"stateMutability":"payable","type":"function"},{"constant":false,"inputs":[{"name":"_amount","type":"uint256"},{"name":"_price","type":"uint256"}],"name":"sell","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"tokens","type":"address[]"},{"name":"_to","type":"address"}],"name":"withdrawnTokens","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"errorCode","type":"uint256"}],"name":"emitError","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"eventsHistory","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_recipient","type":"address"}],"name":"withdrawAll","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getEventsHistory","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"payable":true,"stateMutability":"payable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"who","type":"address"},{"indexed":false,"name":"token","type":"uint256"},{"indexed":false,"name":"eth","type":"uint256"}],"name":"Sell","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"who","type":"address"},{"indexed":false,"name":"token","type":"uint256"},{"indexed":false,"name":"eth","type":"uint256"}],"name":"Buy","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"recipient","type":"address"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"WithdrawTokens","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"recipient","type":"address"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"WithdrawEth","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"feeValue","type":"uint256"}],"name":"FeeUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"buyPrice","type":"uint256"},{"indexed":false,"name":"sellPrice","type":"uint256"}],"name":"PricesUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"isActive","type":"bool"}],"name":"ActiveChanged","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"errorCode","type":"uint256"}],"name":"Error","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"sender","type":"address"},{"indexed":true,"name":"amount","type":"uint256"}],"name":"ReceivedEther","type":"event"}],"source":"pragma solidity ^0.4.11;\n\nimport \"../core/common/Object.sol\";\nimport {ERC20Interface as Asset} from \"../core/erc20/ERC20Interface.sol\";\n\ncontract ExchangeEmitter {\n    function emitError(uint errorCode);\n    function emitFeeUpdated(uint feeValue);\n    function emitPricesUpdated(uint buyPrice, uint sellPrice);\n    function emitActiveChanged(bool isActive);\n}\n\n\n/**\n * @title ERC20-Ether exchange contract.\n *\n * Users are able to buy/sell assigned ERC20 token for ether, as long as there is available\n * supply. Contract owner maintains sufficient token and ether supply, and sets buy/sell prices.\n *\n * In order to be able to sell tokens, user needs to create allowance for this contract, using\n * standard ERC20 approve() function, so that exchange can take tokens from the user, when user\n * orders a sell.\n *\n * Note: all the non constant functions return false instead of throwing in case if state change\n * didn't happen yet.\n */\ncontract Exchange is Object {\n\n    uint constant ERROR_EXCHANGE_INVALID_PARAMETER = 6000;\n    uint constant ERROR_EXCHANGE_INVALID_INVOCATION = 6001;\n    uint constant ERROR_EXCHANGE_INVALID_FEE_PERCENT = 6002;\n    uint constant ERROR_EXCHANGE_INVALID_PRICE = 6003;\n    uint constant ERROR_EXCHANGE_MAINTENANCE_MODE = 6004;\n    uint constant ERROR_EXCHANGE_TOO_HIGH_PRICE = 6005;\n    uint constant ERROR_EXCHANGE_TOO_LOW_PRICE = 6006;\n    uint constant ERROR_EXCHANGE_INSUFFICIENT_BALANCE = 6007;\n    uint constant ERROR_EXCHANGE_INSUFFICIENT_ETHER_SUPPLY = 6008;\n    uint constant ERROR_EXCHANGE_PAYMENT_FAILED = 6009;\n    uint constant ERROR_EXCHANGE_TRANSFER_FAILED = 6010;\n    uint constant ERROR_EXCHANGE_FEE_TRANSFER_FAILED = 6011;\n\n    // Assigned ERC20 token.\n    Asset public asset;\n    address rewards;\n    address delegate;\n    //Switch for turn on and off the exchange operations\n    bool public isActive;\n    // Price in wei at which exchange buys tokens.\n    uint public buyPrice = 1;\n    // Price in wei at which exchange sells tokens.\n    uint public sellPrice = 2;\n    uint public minAmount;\n    uint public maxAmount;\n    // Fee value for operations 10000 is 0.01.\n    uint public feePercent = 10000;\n    // User sold tokens and received wei.\n    event Sell(address indexed who, uint token, uint eth);\n    // User bought tokens and payed wei.\n    event Buy(address indexed who, uint token, uint eth);\n    event WithdrawTokens(address indexed recipient, uint amount);\n    event WithdrawEth(address indexed recipient, uint amount);\n    event FeeUpdated(address indexed self, uint feeValue);\n    event PricesUpdated(address indexed self, uint buyPrice, uint sellPrice);\n    event ActiveChanged(address indexed self, bool isActive);\n    event Error(uint errorCode);\n\n    /**\n     * @dev On received ethers\n     * @param sender Ether sender\n     * @param amount Ether value\n     */\n    event ReceivedEther(address indexed sender, uint256 indexed amount);\n\n    // Should use interface of the emitter, but address of events history.\n    ExchangeEmitter public eventsHistory;\n\n    /**\n     * Emits Error event with specified error message.\n     *\n     * Should only be used if no state changes happened.\n     *\n     * @param error error from Errors library.\n     */\n    function _error(uint error) internal returns (uint) {\n        getEventsHistory().emitError(error);\n        return error;\n    }\n\n    function _emitFeeUpdated(uint feePercent) internal {\n        getEventsHistory().emitFeeUpdated(feePercent);\n    }\n\n    function _emitPricesUpdated(uint buyPrice, uint sellPrice) internal {\n        getEventsHistory().emitPricesUpdated(buyPrice, sellPrice);\n    }\n\n    function _emitActiveChanged(bool isActive) internal {\n        getEventsHistory().emitActiveChanged(isActive);\n    }\n\n    /**\n     * Sets EventsHstory contract address.\n     *\n     * Can be set only once, and only by contract owner.\n     *\n     * @param _eventsHistory MultiEventsHistory contract address.\n     *\n     * @return success.\n     */\n    function setupEventsHistory(address _eventsHistory) onlyContractOwner returns (uint) {\n        if (address(eventsHistory) != 0x0) {\n            return _error(ERROR_EXCHANGE_INVALID_INVOCATION);\n        }\n\n        eventsHistory = ExchangeEmitter(_eventsHistory);\n        return OK;\n    }\n\n    /**\n     * Assigns ERC20 token for exchange.\n     *\n     * Can be set only once, and only by contract owner.\n     *\n     * @param _asset ERC20 token address.\n     *\n     * @return success.\n     */\n    function init(Asset _asset, address _rewards, address _delegate, uint _fee) onlyContractOwner returns (uint errorCode) {\n        if (address(asset) != 0x0 || rewards != 0x0) {\n            return _error(ERROR_EXCHANGE_INVALID_INVOCATION);\n        }\n\n        asset = _asset;\n        rewards = _rewards;\n        delegate = _delegate;\n        uint feeResult = setFee(_fee);\n        errorCode = feeResult;\n        if (feeResult == OK) {\n            isActive = true;\n        }\n    }\n\n    function setFee(uint _feePercent) internal returns (uint) {\n        if (feePercent < 1 || feePercent > 10000) {\n            return _error(ERROR_EXCHANGE_INVALID_FEE_PERCENT);\n        }\n\n        feePercent = _feePercent;\n        _emitFeeUpdated(feePercent);\n        return OK;\n    }\n\n    function setActive(bool _active) onlyContractOwner returns (uint) {\n        if (isActive != _active) {\n            _emitActiveChanged(_active);\n        }\n\n        isActive = _active;\n        return OK;\n    }\n\n    /**\n     * Set exchange operation prices.\n     * Sell price cannot be less than buy price.\n     *\n     * Can be set only by contract owner.\n     *\n     * @param _buyPrice price in wei at which exchange buys tokens.\n     * @param _sellPrice price in wei at which exchange sells tokens.\n     *\n     * @return success.\n     */\n    function setPrices(uint _buyPrice, uint _sellPrice) onlyContractOwner returns (uint) {\n        if (_sellPrice < _buyPrice) {\n            return _error(ERROR_EXCHANGE_INVALID_PRICE);\n        }\n\n        buyPrice = _buyPrice;\n        sellPrice = _sellPrice;\n        _emitPricesUpdated(_buyPrice, _sellPrice);\n\n        return OK;\n    }\n\n    /**\n     * Returns assigned token address balance.\n     *\n     * @param _address address to get balance.\n     *\n     * @return token balance.\n     */\n    function _balanceOf(address _address) constant internal returns (uint) {\n        return asset.balanceOf(_address);\n    }\n\n    /**\n     * Sell tokens for ether at specified price. Tokens are taken from caller\n     * though an allowance logic.\n     * Amount should be less than or equal to current allowance value.\n     * Price should be less than or equal to current exchange buyPrice.\n     *\n     * @param _amount amount of tokens to sell.\n     * @param _price price in wei at which sell will happen.\n     *\n     * @return success.\n     */\n    function sell(uint _amount, uint _price) returns (uint) {\n        if (!isActive) {\n            return _error(ERROR_EXCHANGE_MAINTENANCE_MODE);\n        }\n\n        if (_price > buyPrice) {\n            return _error(ERROR_EXCHANGE_TOO_HIGH_PRICE);\n        }\n\n        if (_balanceOf(msg.sender) < _amount) {\n            return _error(ERROR_EXCHANGE_INSUFFICIENT_BALANCE);\n        }\n\n        uint total = _mul(_amount, _price);\n        if (this.balance < total) {\n            return _error(ERROR_EXCHANGE_INSUFFICIENT_ETHER_SUPPLY);\n        }\n\n        if (!asset.transferFrom(msg.sender, this, _amount)) {\n            return _error(ERROR_EXCHANGE_PAYMENT_FAILED);\n        }\n\n        if (!msg.sender.send(total)) {\n            throw;\n        }\n\n        Sell(msg.sender, _amount, total);\n\n        return OK;\n    }\n\n    /**\n     * Buy tokens for ether at specified price. Payment needs to be sent along\n     * with the call, and should equal amount * price.\n     * Price should be greater than or equal to current exchange sellPrice.\n     *\n     * @param _amount amount of tokens to buy.\n     * @param _price price in wei at which buy will happen.\n     *\n     * @return success.\n     */\n    function buy(uint _amount, uint _price) payable returns (uint) {\n        if (!isActive) {\n            return _error(ERROR_EXCHANGE_MAINTENANCE_MODE);\n        }\n\n        if (_price < sellPrice) {\n            return _error(ERROR_EXCHANGE_TOO_LOW_PRICE);\n        }\n\n        if (_balanceOf(this) < _amount) {\n            return _error(ERROR_EXCHANGE_INSUFFICIENT_BALANCE);\n        }\n\n        uint total = _mul(_amount, _price);\n        if (msg.value != total) {\n            return _error(ERROR_EXCHANGE_INSUFFICIENT_ETHER_SUPPLY);\n        }\n\n        if (!asset.transfer(msg.sender, _amount)) {\n            return _error(ERROR_EXCHANGE_TRANSFER_FAILED);\n        }\n\n        Buy(msg.sender, _amount, total);\n\n        return OK;\n    }\n\n    /**\n     * Transfer specified amount of tokens from exchange to specified address.\n     *\n     * Can be called only by contract owner.\n     *\n     * @param _recipient address to transfer tokens to.\n     * @param _amount amount of tokens to transfer.\n     *\n     * @return success.\n     */\n    function withdrawTokens(address _recipient, uint _amount) onlyContractOwner returns (uint) {\n        if (_balanceOf(this) < _amount) {\n            return _error(ERROR_EXCHANGE_INSUFFICIENT_BALANCE);\n        }\n\n        uint amount = (_amount * 10000) / (10000 + feePercent);\n        if (!asset.transfer(_recipient, amount)) {\n            return _error(ERROR_EXCHANGE_TRANSFER_FAILED);\n        }\n\n        WithdrawTokens(_recipient, amount);\n\n        if (!asset.transfer(rewards, _amount - amount)) {\n            _error(ERROR_EXCHANGE_FEE_TRANSFER_FAILED);\n        }\n\n        return OK;\n    }\n\n    /**\n     * Transfer all tokens from exchange to specified address.\n     *\n     * Can be called only by contract owner.\n     *\n     * @param _recipient address to transfer tokens to.\n     *\n     * @return success.\n     */\n    function withdrawAllTokens(address _recipient) onlyContractOwner returns (uint) {\n        return withdrawTokens(_recipient, _balanceOf(this));\n    }\n\n    /**\n     * Transfer specified amount of wei from exchange to specified address.\n     *\n     * Can be called only by contract owner.\n     *\n     * @param _recipient address to transfer wei to.\n     * @param _amount amount of wei to transfer.\n     *\n     * @return success.\n     */\n    function withdrawEth(address _recipient, uint _amount) onlyContractOwner returns (uint) {\n        if (this.balance < _amount) {\n            return _error(ERROR_EXCHANGE_INSUFFICIENT_ETHER_SUPPLY);\n        }\n\n        uint amount = (_amount * 10000) / (10000 + feePercent);\n\n        if (!_recipient.send(amount)) {\n            return _error(ERROR_EXCHANGE_TRANSFER_FAILED);\n        }\n\n        WithdrawEth(_recipient, amount);\n\n        if (!rewards.send(_amount - amount)) {\n            return _error(ERROR_EXCHANGE_FEE_TRANSFER_FAILED);\n        }\n\n        return OK;\n    }\n\n    /**\n     * Transfer all wei from exchange to specified address.\n     *\n     * Can be called only by contract owner.\n     *\n     * @param _recipient address to transfer wei to.\n     *\n     * @return success.\n     */\n    function withdrawAllEth(address _recipient) onlyContractOwner() returns (uint) {\n        return withdrawEth(_recipient, this.balance);\n    }\n\n    /**\n     * Transfer all tokens and wei from exchange to specified address.\n     *\n     * Can be called only by contract owner.\n     *\n     * @param _recipient address to transfer tokens and wei to.\n     *\n     * @return success.\n     */\n    function withdrawAll(address _recipient) onlyContractOwner returns (uint) {\n        uint withdrawAllTokensResult = withdrawAllTokens(_recipient);\n        if (withdrawAllTokensResult != OK) {\n            return withdrawAllTokensResult;\n        }\n\n        uint withdrawAllEthResult = withdrawAllEth(_recipient);\n        if (withdrawAllEthResult != OK) {\n            return withdrawAllEthResult;\n        }\n\n        return OK;\n    }\n\n    function emitError(uint errorCode) {\n        Error(errorCode);\n    }\n\n    function emitFeeUpdated(uint feePercent) {\n        FeeUpdated(msg.sender, feePercent);\n    }\n\n    function emitPricesUpdated(uint buyPrice, uint sellPrice) {\n        PricesUpdated(msg.sender, buyPrice, sellPrice);\n    }\n\n    function emitActiveChanged(bool isActive) {\n        ActiveChanged(msg.sender, isActive);\n    }\n\n    function getEventsHistory() constant returns (ExchangeEmitter) {\n        return address(eventsHistory) != 0x0 ? eventsHistory : ExchangeEmitter(this);\n    }\n    /**\n     * Overflow-safe multiplication.\n     *\n     * Throws in case of value overflow.\n     *\n     * @param _a first operand.\n     * @param _b second operand.\n     *\n     * @return multiplication result.\n     */\n    function _mul(uint _a, uint _b) internal constant returns (uint) {\n        uint result = _a * _b;\n        if (_a != 0 && result / _a != _b) {\n            throw;\n        }\n        return result;\n    }\n\n    /**\n     * Accept all ether to maintain exchange supply.\n     */\n    function() payable {\n        if (msg.value != 0) {\n            ReceivedEther(msg.sender, msg.value);\n        } else {\n            throw;\n        }\n    }\n}\n","abiDocs":[{"constant":false,"inputs":[{"name":"_eventsHistory","type":"address"}],"name":"setupEventsHistory","payable":false,"stateMutability":"nonpayable","type":"function","signature":"setupEventsHistory(address)","signatureHash":"02927d20"},{"constant":false,"inputs":[{"name":"_buyPrice","type":"uint256"},{"name":"_sellPrice","type":"uint256"}],"name":"setPrices","payable":false,"stateMutability":"nonpayable","type":"function","signature":"setPrices(uint256,uint256)","signatureHash":"05fefda7"},{"constant":false,"inputs":[{"name":"_recipient","type":"address"},{"name":"_amount","type":"uint256"}],"name":"withdrawTokens","payable":false,"stateMutability":"nonpayable","type":"function","signature":"withdrawTokens(address,uint256)","signatureHash":"06b091f9"},{"constant":false,"inputs":[{"name":"_recipient","type":"address"},{"name":"_amount","type":"uint256"}],"name":"withdrawEth","payable":false,"stateMutability":"nonpayable","type":"function","signature":"withdrawEth(address,uint256)","signatureHash":"1b9a91a4"},{"constant":true,"inputs":[],"name":"isActive","payable":false,"stateMutability":"view","type":"function","signature":"isActive()","signatureHash":"22f3e2d4"},{"constant":true,"inputs":[],"name":"asset","payable":false,"stateMutability":"view","type":"function","signature":"asset()","signatureHash":"38d52e0f"},{"constant":false,"inputs":[],"name":"claimContractOwnership","payable":false,"stateMutability":"nonpayable","type":"function","signature":"claimContractOwnership()","signatureHash":"4592cd1d"},{"constant":false,"inputs":[{"name":"_asset","type":"address"},{"name":"_rewards","type":"address"},{"name":"_delegate","type":"address"},{"name":"_fee","type":"uint256"}],"name":"init","payable":false,"stateMutability":"nonpayable","type":"function","signature":"init(address,address,address,uint256)","signatureHash":"46639dba"},{"constant":true,"inputs":[],"name":"sellPrice","payable":false,"stateMutability":"view","type":"function","signature":"sellPrice()","signatureHash":"4b750334"},{"constant":false,"inputs":[{"name":"_to","type":"address"}],"name":"changeContractOwnership","payable":false,"stateMutability":"nonpayable","type":"function","signature":"changeContractOwnership(address)","signatureHash":"557f4bc9"},{"constant":true,"inputs":[],"name":"pendingContractOwner","payable":false,"stateMutability":"view","type":"function","signature":"pendingContractOwner()","signatureHash":"5aa77d3c"},{"constant":true,"inputs":[],"name":"maxAmount","payable":false,"stateMutability":"view","type":"function","signature":"maxAmount()","signatureHash":"5f48f393"},{"constant":false,"inputs":[{"name":"feePercent","type":"uint256"}],"name":"emitFeeUpdated","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitFeeUpdated(uint256)","signatureHash":"6ddfd403"},{"constant":true,"inputs":[],"name":"feePercent","payable":false,"stateMutability":"view","type":"function","signature":"feePercent()","signatureHash":"7fd6f15c"},{"constant":false,"inputs":[],"name":"destroy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"destroy()","signatureHash":"83197ef0"},{"constant":false,"inputs":[{"name":"isActive","type":"bool"}],"name":"emitActiveChanged","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitActiveChanged(bool)","signatureHash":"850a4621"},{"constant":true,"inputs":[],"name":"buyPrice","payable":false,"stateMutability":"view","type":"function","signature":"buyPrice()","signatureHash":"8620410b"},{"constant":false,"inputs":[{"name":"buyPrice","type":"uint256"},{"name":"sellPrice","type":"uint256"}],"name":"emitPricesUpdated","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitPricesUpdated(uint256,uint256)","signatureHash":"975be231"},{"constant":true,"inputs":[],"name":"minAmount","payable":false,"stateMutability":"view","type":"function","signature":"minAmount()","signatureHash":"9b2cb5d8"},{"constant":false,"inputs":[{"name":"_to","type":"address"}],"name":"transferContractOwnership","payable":false,"stateMutability":"nonpayable","type":"function","signature":"transferContractOwnership(address)","signatureHash":"a843c51f"},{"constant":false,"inputs":[{"name":"_recipient","type":"address"}],"name":"withdrawAllTokens","payable":false,"stateMutability":"nonpayable","type":"function","signature":"withdrawAllTokens(address)","signatureHash":"a878aee6"},{"constant":false,"inputs":[{"name":"_active","type":"bool"}],"name":"setActive","payable":false,"stateMutability":"nonpayable","type":"function","signature":"setActive(bool)","signatureHash":"acec338a"},{"constant":true,"inputs":[],"name":"contractOwner","payable":false,"stateMutability":"view","type":"function","signature":"contractOwner()","signatureHash":"ce606ee0"},{"constant":false,"inputs":[{"name":"_recipient","type":"address"}],"name":"withdrawAllEth","payable":false,"stateMutability":"nonpayable","type":"function","signature":"withdrawAllEth(address)","signatureHash":"d46d79bb"},{"constant":false,"inputs":[{"name":"_amount","type":"uint256"},{"name":"_price","type":"uint256"}],"name":"buy","payable":true,"stateMutability":"payable","type":"function","signature":"buy(uint256,uint256)","signatureHash":"d6febde8"},{"constant":false,"inputs":[{"name":"_amount","type":"uint256"},{"name":"_price","type":"uint256"}],"name":"sell","payable":false,"stateMutability":"nonpayable","type":"function","signature":"sell(uint256,uint256)","signatureHash":"d79875eb"},{"constant":false,"inputs":[{"name":"tokens","type":"address[]"},{"name":"_to","type":"address"}],"name":"withdrawnTokens","payable":false,"stateMutability":"nonpayable","type":"function","signature":"withdrawnTokens(address[],address)","signatureHash":"d8f9659b"},{"constant":false,"inputs":[{"name":"errorCode","type":"uint256"}],"name":"emitError","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitError(uint256)","signatureHash":"df26ca08"},{"constant":true,"inputs":[],"name":"eventsHistory","payable":false,"stateMutability":"view","type":"function","signature":"eventsHistory()","signatureHash":"f07629f8"},{"constant":false,"inputs":[{"name":"_recipient","type":"address"}],"name":"withdrawAll","payable":false,"stateMutability":"nonpayable","type":"function","signature":"withdrawAll(address)","signatureHash":"fa09e630"},{"constant":true,"inputs":[],"name":"getEventsHistory","payable":false,"stateMutability":"view","type":"function","signature":"getEventsHistory()","signatureHash":"fff10aba"},{"payable":true,"stateMutability":"payable","type":"fallback","inputs":[]},{"anonymous":false,"inputs":[{"indexed":true,"name":"who","type":"address"},{"indexed":false,"name":"token","type":"uint256"},{"indexed":false,"name":"eth","type":"uint256"}],"name":"Sell","type":"event","signature":"Sell(address,uint256,uint256)","signatureHash":"ed7a144f"},{"anonymous":false,"inputs":[{"indexed":true,"name":"who","type":"address"},{"indexed":false,"name":"token","type":"uint256"},{"indexed":false,"name":"eth","type":"uint256"}],"name":"Buy","type":"event","signature":"Buy(address,uint256,uint256)","signatureHash":"1cbc5ab1"},{"anonymous":false,"inputs":[{"indexed":true,"name":"recipient","type":"address"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"WithdrawTokens","type":"event","signature":"WithdrawTokens(address,uint256)","signatureHash":"680f2e4f"},{"anonymous":false,"inputs":[{"indexed":true,"name":"recipient","type":"address"},{"indexed":false,"name":"amount","type":"uint256"}],"name":"WithdrawEth","type":"event","signature":"WithdrawEth(address,uint256)","signatureHash":"ccbd99ba"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"feeValue","type":"uint256"}],"name":"FeeUpdated","type":"event","signature":"FeeUpdated(address,uint256)","signatureHash":"6f0eaf2c"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"buyPrice","type":"uint256"},{"indexed":false,"name":"sellPrice","type":"uint256"}],"name":"PricesUpdated","type":"event","signature":"PricesUpdated(address,uint256,uint256)","signatureHash":"8182173c"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"isActive","type":"bool"}],"name":"ActiveChanged","type":"event","signature":"ActiveChanged(address,bool)","signatureHash":"1e9e6949"},{"anonymous":false,"inputs":[{"indexed":false,"name":"errorCode","type":"uint256"}],"name":"Error","type":"event","signature":"Error(uint256)","signatureHash":"2e36a709"},{"anonymous":false,"inputs":[{"indexed":true,"name":"sender","type":"address"},{"indexed":true,"name":"amount","type":"uint256"}],"name":"ReceivedEther","type":"event","signature":"ReceivedEther(address,uint256)","signatureHash":"a419615b"}]}
