{"fileName":"/contracts/core/common/Managed.sol","name":"Managed","abi":[{"constant":false,"inputs":[],"name":"claimContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_identifier","type":"bytes32"}],"name":"lookupManager","outputs":[{"name":"manager","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"contractsManager","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"}],"name":"changeContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"pendingContractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address"}],"name":"setContractsManager","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"destroy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"}],"name":"transferContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"contractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"tokens","type":"address[]"},{"name":"_to","type":"address"}],"name":"withdrawnTokens","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"key","type":"address"}],"name":"isAuthorized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_store","type":"address"},{"name":"_crate","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"}],"source":"pragma solidity ^0.4.11;\n\nimport \"./Object.sol\";\nimport {PendingManagerInterface as Shareable} from \"../../pending/PendingManagerInterface.sol\";\nimport \"../user/UserManagerInterface.sol\";\nimport \"../contracts/ContractsManagerInterface.sol\";\nimport \"../storage/StorageAdapter.sol\";\n\ncontract Managed is StorageAdapter, Object {\n    address public contractsManager;\n\n    uint constant UNAUTHORIZED = 0;\n    uint constant MULTISIG_ADDED = 3;\n    uint constant INTERNAL_ERROR = 4;\n\n    modifier onlyAuthorized() {\n        if (isAuthorized(msg.sender)) {\n            _;\n        }\n    }\n\n    modifier onlyAuthorizedContract(address key) {\n        if (isAuthorized(key) || msg.sender == lookupManager(\"PendingManager\")) {\n            _;\n        }\n    }\n\n    function Managed(Storage _store, bytes32 _crate) StorageAdapter(_store, _crate) {\n    }\n\n    /**\n    *  @dev Setter for ContractsManager. Force overrides currect manager.\n    *\n    *  @param _contractsManager contracts manager. 0x0 is not allowed.\n    */\n    function setContractsManager(address _contractsManager) onlyContractOwner {\n        contractsManager = _contractsManager;\n    }\n\n    /**\n    *  @notice Will crash if no manager in the system with given identifier.\n    *\n    *  @dev Returns manager's address by its identifier (type).\n    *\n    *  @param _identifier is a manager's identifier. 0x0 is not allowed.\n    */\n    function lookupManager(bytes32 _identifier) constant returns (address manager) {\n        manager =  ContractsManagerInterface(contractsManager).getContractAddressByType(_identifier);\n\n        // invalid identifier or initialization error. no way to continue.\n        require(manager != 0x0);\n    }\n\n    function isAuthorized(address key) constant returns (bool) {\n        address userManager = lookupManager(\"UserManager\");\n        return UserManagerInterface(userManager).getCBE(key);\n    }\n\n    function multisig() internal returns (uint errorCode) {\n        address shareable = lookupManager(\"PendingManager\");\n\n        if (msg.sender != shareable) {\n            bytes32 _r = sha3(msg.data);\n            errorCode = Shareable(shareable).addTx(_r, msg.data, this, msg.sender);\n\n            return (errorCode == OK) ? MULTISIG_ADDED : errorCode;\n        }\n\n        return OK;\n    }\n}\n","abiDocs":[{"constant":false,"inputs":[],"name":"claimContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Finalize ownership pass.     * Can only be called by pending owner.","signature":"claimContractOwnership()","signatureHash":"4592cd1d"},{"constant":true,"inputs":[{"name":"_identifier","type":"bytes32","description":"is a manager's identifier. 0x0 is not allowed."}],"name":"lookupManager","payable":false,"stateMutability":"view","type":"function","details":"Returns manager's address by its identifier (type).","notice":"Will crash if no manager in the system with given identifier.","signature":"lookupManager(bytes32)","signatureHash":"4fe59012"},{"constant":true,"inputs":[],"name":"contractsManager","payable":false,"stateMutability":"view","type":"function","signature":"contractsManager()","signatureHash":"53253d31"},{"constant":false,"inputs":[{"name":"_to","type":"address","description":"address of the next owner. 0x0 is not allowed."}],"name":"changeContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Prepares ownership pass.     * Can only be called by current owner.","signature":"changeContractOwnership(address)","signatureHash":"557f4bc9"},{"constant":true,"inputs":[],"name":"pendingContractOwner","payable":false,"stateMutability":"view","type":"function","signature":"pendingContractOwner()","signatureHash":"5aa77d3c"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address","description":"contracts manager. 0x0 is not allowed."}],"name":"setContractsManager","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Setter for ContractsManager. Force overrides currect manager.","signature":"setContractsManager(address)","signatureHash":"71d3b573"},{"constant":false,"inputs":[],"name":"destroy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Destroy contract and scrub a data","notice":"Only owner can call it","signature":"destroy()","signatureHash":"83197ef0"},{"constant":false,"inputs":[{"name":"_to","type":"address","description":"the next contract owner"}],"name":"transferContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Direct ownership pass without change/claim pattern. Can be invoked only by current contract owner","return":"`true` if success, `false` otherwise","signature":"transferContractOwnership(address)","signatureHash":"a843c51f"},{"constant":true,"inputs":[],"name":"contractOwner","payable":false,"stateMutability":"view","type":"function","signature":"contractOwner()","signatureHash":"ce606ee0"},{"constant":false,"inputs":[{"name":"tokens","type":"address[]"},{"name":"_to","type":"address"}],"name":"withdrawnTokens","payable":false,"stateMutability":"nonpayable","type":"function","signature":"withdrawnTokens(address[],address)","signatureHash":"d8f9659b"},{"constant":true,"inputs":[{"name":"key","type":"address"}],"name":"isAuthorized","payable":false,"stateMutability":"view","type":"function","signature":"isAuthorized(address)","signatureHash":"fe9fbb80"},{"inputs":[{"name":"_store","type":"address"},{"name":"_crate","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"}]}
