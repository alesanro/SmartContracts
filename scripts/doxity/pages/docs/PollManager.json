{"fileName":"/contracts/vote/PollManager.sol","name":"PollManager","abi":[{"constant":false,"inputs":[{"name":"pollId","type":"uint256"}],"name":"emitPollDeleted","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_percent","type":"uint256"}],"name":"setVotesPercent","outputs":[{"name":"errorCode","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_id","type":"uint256"}],"name":"isPollOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address"}],"name":"init","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"pollId","type":"uint256"},{"name":"option","type":"bytes32"},{"name":"count","type":"uint256"}],"name":"emitOptionRemoved","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"pollId","type":"uint256"}],"name":"emitPollCreated","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_pollId","type":"uint256"}],"name":"removePoll","outputs":[{"name":"errorCode","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_pollId","type":"uint256"}],"name":"adminEndPoll","outputs":[{"name":"errorCode","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"emitSharesPercentUpdated","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"claimContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"cleanInactivePolls","outputs":[{"name":"errorCode","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_identifier","type":"bytes32"}],"name":"lookupManager","outputs":[{"name":"manager","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"contractsManager","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"}],"name":"changeContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"pendingContractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_pollId","type":"uint256"},{"name":"_detailsIpfsHash","type":"bytes32"}],"name":"updatePollDetailsIpfsHash","outputs":[{"name":"errorCode","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_eventsHistory","type":"address"}],"name":"setEventsHistory","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getVoteLimit","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_pollId","type":"uint256"},{"name":"_option","type":"bytes32"}],"name":"addPollOption","outputs":[{"name":"errorCode","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"pollId","type":"uint256"},{"name":"option","type":"bytes32"},{"name":"count","type":"uint256"}],"name":"emitOptionAdded","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address"}],"name":"setContractsManager","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_options","type":"bytes32[16]"},{"name":"_ipfsHashes","type":"bytes32[4]"},{"name":"_detailsIpfsHash","type":"bytes32"},{"name":"_votelimit","type":"uint256"},{"name":"_deadline","type":"uint256"}],"name":"NewPoll","outputs":[{"name":"errorCode","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"destroy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"pollId","type":"uint256"}],"name":"emitPollActivated","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"pollId","type":"uint256"}],"name":"emitPollEnded","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"}],"name":"transferContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"pollId","type":"uint256"}],"name":"emitPollDetailsUpdated","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_id","type":"uint256"},{"name":"_hash","type":"bytes32"}],"name":"addIpfsHashToPoll","outputs":[{"name":"errorCode","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"contractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"tokens","type":"address[]"},{"name":"_to","type":"address"}],"name":"withdrawnTokens","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"errorCode","type":"uint256"}],"name":"emitError","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_pollId","type":"uint256"},{"name":"_option","type":"bytes32"}],"name":"removePollOption","outputs":[{"name":"errorCode","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_pollId","type":"uint256"}],"name":"checkPollIsActive","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_pollId","type":"uint256"}],"name":"activatePoll","outputs":[{"name":"errorCode","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"id","type":"uint256"},{"name":"hash","type":"bytes32"},{"name":"count","type":"uint256"}],"name":"emitIpfsHashToPollAdded","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"key","type":"address"}],"name":"isAuthorized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getEventsHistory","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_store","type":"address"},{"name":"_crate","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":false,"stateMutability":"nonpayable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":false,"name":"pollId","type":"uint256"}],"name":"PollCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"pollId","type":"uint256"}],"name":"PollDeleted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"pollId","type":"uint256"}],"name":"PollEnded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"pollId","type":"uint256"}],"name":"PollActivated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"choice","type":"uint256"},{"indexed":false,"name":"pollId","type":"uint256"}],"name":"VoteCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"}],"name":"SharesPercentUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"},{"indexed":false,"name":"hash","type":"bytes32"},{"indexed":false,"name":"count","type":"uint256"}],"name":"IpfsHashToPollAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"},{"indexed":false,"name":"option","type":"bytes32"},{"indexed":false,"name":"count","type":"uint256"}],"name":"OptionAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"},{"indexed":false,"name":"option","type":"bytes32"},{"indexed":false,"name":"count","type":"uint256"}],"name":"OptionRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"}],"name":"PollDetailsUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"errorCode","type":"uint256"}],"name":"Error","type":"event"}],"source":"pragma solidity ^0.4.11;\n\nimport \"./Vote.sol\";\nimport \"./PollEmitter.sol\";\nimport {TimeHolderInterface as TimeHolder} from \"../timeholder/TimeHolderInterface.sol\";\n\ncontract PollManager is PollEmitter, Vote {\n    /**\n    * Presents a percent of shares used for limiting votes. 1 unit == 0.01%.\n    * @dev Used because of absence of floating point numbers\n    */\n    StorageInterface.UInt sharesPercent;\n    StorageInterface.UInt pollsIdCounter;\n\n    uint8 constant DEFAULT_SHARES_PERCENT = 1;\n    uint8 constant ACTIVE_POLLS_MAX = 20;\n    uint8 constant OPTIONS_POLLS_MAX = 16;\n    uint8 constant IPFS_HASH_POLLS_MAX = 5;\n\n    function PollManager(Storage _store, bytes32 _crate) Vote(_store, _crate) {\n        sharesPercent.init('sharesPercent');\n    }\n\n    function init(address _contractsManager) onlyContractOwner returns (uint) {\n        uint result = BaseManager.init(_contractsManager, \"PollManager\");\n\n        // do not update default values if reinitialization\n        if (REINITIALIZED != result) {\n            store.set(sharesPercent, DEFAULT_SHARES_PERCENT);\n        }\n\n        pollsIdCounter.init('pollsIdCounter');\n\n        return OK;\n    }\n\n    function getVoteLimit() constant returns (uint) {\n        address timeHolder = lookupManager(\"TimeHolder\");\n        return TimeHolder(timeHolder).totalSupply() / 10000 * store.get(sharesPercent); // @see sharesPercent description\n    }\n\n    function NewPoll(bytes32[16] _options, bytes32[4] _ipfsHashes, bytes32 _detailsIpfsHash, uint _votelimit, uint _deadline) returns (uint errorCode) {\n        if (_detailsIpfsHash == bytes32(0)) {\n            return _emitError(ERROR_VOTE_DETAILS_HASH_INVALID_PARAMETER);\n        }\n\n        if (_votelimit > getVoteLimit()) {\n            return _emitError(ERROR_VOTE_LIMIT_EXCEEDED);\n        }\n\n        if (_deadline < now) {\n            return _emitError(ERROR_VOTE_DEADLINE_INVALID_PARAMETER);\n        }\n\n        uint id = store.get(pollsIdCounter) + 1;\n        store.add(polls, id);\n        store.set(pollsIdCounter, id);\n        store.set(owner, id, msg.sender);\n        store.set(detailsIpfsHash, id, _detailsIpfsHash);\n        store.set(votelimit, id, _votelimit);\n        store.set(deadline, id, _deadline);\n        store.set(status, id, true);\n        store.set(active, id, false);\n        store.set(creationTime, id, now);\n        uint i;\n        for (i = 0; i < _options.length; i++) {\n            if (_options[i] != bytes32(0)) {\n                store.add(optionsId, bytes32(id), _options[i]);\n            }\n        }\n\n        for (i = 0; i < _ipfsHashes.length; i++) {\n            if (_ipfsHashes[i] != bytes32(0)) {\n                store.add(ipfsHashes, bytes32(id), _ipfsHashes[i]);\n            }\n        }\n        _emitPollCreated(id);\n        return OK;\n    }\n\n    function addIpfsHashToPoll(uint _id, bytes32 _hash) onlyCreator(_id) returns (uint errorCode) {\n        if (!isPollExist(_id)) {\n            return _emitError(ERROR_VOTE_POLL_DOES_NOT_EXIST);\n        }\n        if (_hash == bytes32(0)) {\n            return _emitError(ERROR_VOTE_HASH_INVALID_PARAMETER);\n        }\n\n        if (store.count(ipfsHashes, bytes32(_id)) >= IPFS_HASH_POLLS_MAX) {\n            return _emitError(ERROR_VOTE_POLL_LIMIT_REACHED);\n        }\n\n        store.add(ipfsHashes, bytes32(_id), _hash);\n        _emitIpfsHashToPollAdded(_id, _hash, store.count(ipfsHashes, bytes32(_id)));\n        return OK;\n    }\n\n    function setVotesPercent(uint _percent) returns (uint errorCode) {\n        if (!(_percent > 0 && _percent < 10000)) {\n            return _emitError(ERROR_VOTE_SHARES_PERCENT_OUT_OF_RANGE);\n        }\n\n        uint e = multisig();\n        if (OK != e) {\n            return _checkAndEmitError(e);\n        }\n\n        store.set(sharesPercent, _percent);\n        _emitSharesPercentUpdated();\n        return OK;\n    }\n\n    function removePoll(uint _pollId) onlyAuthorized returns (uint errorCode) {\n        if (!isPollExist(_pollId)) {\n            return _emitError(ERROR_VOTE_POLL_DOES_NOT_EXIST);\n        }\n\n        if (!(checkPollIsInactive(_pollId) && store.get(status, _pollId))) {\n            return _emitError(ERROR_VOTE_INVALID_INVOCATION);\n        }\n\n        return deletePoll(_pollId);\n    }\n\n    function cleanInactivePolls() onlyAuthorized returns (uint errorCode) {\n        StorageInterface.Iterator memory iterator = store.listIterator(polls);\n        uint pollId;\n        while(store.canGetNextWithIterator(polls, iterator)) {\n            pollId = store.getNextWithIterator(polls, iterator);\n            if (checkPollIsInactive(pollId)) {\n                deletePoll(pollId);\n            }\n        }\n        return OK;\n    }\n\n    function deletePoll(uint _pollId) internal returns (uint) {\n        store.remove(polls, _pollId);\n        store.set(owner, _pollId, 0x0);\n        store.set(detailsIpfsHash, _pollId, bytes32(0));\n        store.set(votelimit, _pollId, 0);\n        store.set(deadline, _pollId, 0);\n        store.set(creationTime, _pollId, 0);\n\n        _emitPollDeleted(_pollId);\n        return OK;\n    }\n\n    function activatePoll(uint _pollId) returns (uint errorCode) {\n        if (!isPollExist(_pollId)) {\n            return _emitError(ERROR_VOTE_POLL_DOES_NOT_EXIST);\n        }\n\n        if (store.count(optionsId, bytes32(_pollId)) < 2) {\n            return _emitError(ERROR_VOTE_OPTIONS_EMPTY_LIST);\n        }\n\n        uint e = multisig();\n        if (OK != e) {\n            return _checkAndEmitError(e);\n        }\n\n        if ((store.get(activePollsCount) + 1) > ACTIVE_POLLS_MAX) {\n            return _emitError(ERROR_VOTE_ACTIVE_POLL_LIMIT_REACHED);\n        }\n\n        if (!store.get(status, _pollId)) {\n            return _emitError(ERROR_VOTE_UNABLE_TO_ACTIVATE_POLL);\n        }\n\n        store.set(active, _pollId, true);\n        store.set(activePollsCount, store.get(activePollsCount) + 1);\n        _emitPollActivated(_pollId);\n        return OK;\n    }\n\n    function adminEndPoll(uint _pollId) returns (uint errorCode) {\n        if (!isPollExist(_pollId)) {\n            return _emitError(ERROR_VOTE_POLL_DOES_NOT_EXIST);\n        }\n\n        uint e = multisig();\n        if (OK != e) {\n            return _checkAndEmitError(e);\n        }\n\n        uint result = endPoll(_pollId);\n        return _checkAndEmitError(result);\n    }\n\n    function updatePollDetailsIpfsHash(uint _pollId, bytes32 _detailsIpfsHash) onlyCreator(_pollId) returns (uint errorCode) {\n        if (!isPollExist(_pollId)) {\n            return _emitError(ERROR_VOTE_POLL_DOES_NOT_EXIST);\n        }\n\n        if (checkPollIsActive(_pollId)) {\n            return _emitError(ERROR_VOTE_POLL_SHOULD_BE_INACTIVE);\n        }\n\n        if (_detailsIpfsHash == bytes32(0)) {\n            return _emitError(ERROR_VOTE_DETAILS_HASH_INVALID_PARAMETER);\n        }\n\n        if (store.get(detailsIpfsHash, _pollId) != _detailsIpfsHash) {\n            store.set(detailsIpfsHash, _pollId, _detailsIpfsHash);\n        }\n\n        _emitPollDetailsUpdated(_pollId);\n        return OK;\n    }\n\n    function addPollOption(uint _pollId, bytes32 _option) onlyCreator(_pollId) returns (uint errorCode) {\n        errorCode = _checkUpdatablePollOption(_pollId, _option);\n        if (errorCode != OK) {\n            return _emitError(errorCode);\n        }\n\n        if (store.count(optionsId, bytes32(_pollId)) >= OPTIONS_POLLS_MAX) {\n            return _emitError(ERROR_VOTE_OPTIONS_LIMIT_REACHED);\n        }\n\n        if (store.includes(optionsId, bytes32(_pollId), _option)) {\n            return _emitError(ERROR_VOTE_INVALID_PARAMETER);\n        }\n\n        store.add(optionsId, bytes32(_pollId), _option);\n        _emitOptionAdded(_pollId, _option, store.count(optionsId, bytes32(_pollId)));\n        return OK;\n    }\n\n    function removePollOption(uint _pollId, bytes32 _option) onlyCreator(_pollId) returns (uint errorCode) {\n        errorCode = _checkUpdatablePollOption(_pollId, _option);\n        if (errorCode != OK) {\n            return _emitError(errorCode);\n        }\n\n        if (!store.includes(optionsId, bytes32(_pollId), _option)) {\n            return _emitError(ERROR_VOTE_OPTION_INVALID_PARAMETER);\n        }\n\n        store.remove(optionsId, bytes32(_pollId), _option);\n        _emitOptionRemoved(_pollId, _option, store.count(optionsId, bytes32(_pollId)));\n        return OK;\n    }\n\n    function _checkUpdatablePollOption(uint _pollId, bytes32 _option) private constant returns (uint errorCode) {\n        if (!isPollExist(_pollId)) {\n            return ERROR_VOTE_POLL_DOES_NOT_EXIST;\n        }\n\n        if (checkPollIsActive(_pollId)) {\n            return ERROR_VOTE_POLL_SHOULD_BE_INACTIVE;\n        }\n\n        if (_option == bytes32(0)) {\n            return ERROR_VOTE_OPTION_INVALID_PARAMETER;\n        }\n\n        return OK;\n    }\n\n    function _emitError(uint error) internal returns (uint) {\n        PollManager(getEventsHistory()).emitError(error );\n        return error;\n    }\n\n    function _checkAndEmitError(uint error) internal returns (uint) {\n        if (error != OK && error != MULTISIG_ADDED) {\n            return _emitError(error);\n        }\n\n        return error;\n    }\n\n    function _emitSharesPercentUpdated() internal {\n        PollManager(getEventsHistory()).emitSharesPercentUpdated();\n    }\n\n    function _emitPollCreated(uint pollId) internal {\n        PollManager(getEventsHistory()).emitPollCreated(pollId);\n    }\n\n    function _emitPollDeleted(uint pollId) internal {\n        PollManager(getEventsHistory()).emitPollDeleted(pollId);\n    }\n\n    function _emitPollEnded(uint pollId) internal {\n        PollManager(getEventsHistory()).emitPollEnded(pollId);\n    }\n\n    function _emitPollActivated(uint pollId) internal {\n        PollManager(getEventsHistory()).emitPollActivated(pollId);\n    }\n\n    function _emitIpfsHashToPollAdded(uint id, bytes32 hash, uint count) internal {\n        PollManager(getEventsHistory()).emitIpfsHashToPollAdded(id, hash, count);\n    }\n\n    function _emitOptionAdded(uint pollId, bytes32 option, uint count) internal {\n        PollManager(getEventsHistory()).emitOptionAdded(pollId, option, count);\n    }\n\n    function _emitOptionRemoved(uint pollId, bytes32 option, uint count) internal {\n        PollManager(getEventsHistory()).emitOptionRemoved(pollId, option, count);\n    }\n\n    function _emitPollDetailsUpdated(uint pollId) internal {\n        PollManager(getEventsHistory()).emitPollDetailsUpdated(pollId);\n    }\n}\n","abiDocs":[{"constant":false,"inputs":[{"name":"pollId","type":"uint256"}],"name":"emitPollDeleted","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitPollDeleted(uint256)","signatureHash":"01a5c0c5"},{"constant":false,"inputs":[{"name":"_percent","type":"uint256"}],"name":"setVotesPercent","payable":false,"stateMutability":"nonpayable","type":"function","signature":"setVotesPercent(uint256)","signatureHash":"023fa93f"},{"constant":true,"inputs":[{"name":"_id","type":"uint256"}],"name":"isPollOwner","payable":false,"stateMutability":"view","type":"function","signature":"isPollOwner(uint256)","signatureHash":"15601a21"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address"}],"name":"init","payable":false,"stateMutability":"nonpayable","type":"function","signature":"init(address)","signatureHash":"19ab453c"},{"constant":false,"inputs":[{"name":"pollId","type":"uint256"},{"name":"option","type":"bytes32"},{"name":"count","type":"uint256"}],"name":"emitOptionRemoved","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitOptionRemoved(uint256,bytes32,uint256)","signatureHash":"2184dacd"},{"constant":false,"inputs":[{"name":"pollId","type":"uint256"}],"name":"emitPollCreated","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitPollCreated(uint256)","signatureHash":"272eddaa"},{"constant":false,"inputs":[{"name":"_pollId","type":"uint256"}],"name":"removePoll","payable":false,"stateMutability":"nonpayable","type":"function","signature":"removePoll(uint256)","signatureHash":"34bfce7f"},{"constant":false,"inputs":[{"name":"_pollId","type":"uint256"}],"name":"adminEndPoll","payable":false,"stateMutability":"nonpayable","type":"function","signature":"adminEndPoll(uint256)","signatureHash":"3a35b52d"},{"constant":false,"inputs":[],"name":"emitSharesPercentUpdated","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitSharesPercentUpdated()","signatureHash":"3d99a74a"},{"constant":false,"inputs":[],"name":"claimContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Finalize ownership pass.     * Can only be called by pending owner.","signature":"claimContractOwnership()","signatureHash":"4592cd1d"},{"constant":false,"inputs":[],"name":"cleanInactivePolls","payable":false,"stateMutability":"nonpayable","type":"function","signature":"cleanInactivePolls()","signatureHash":"4877ccb8"},{"constant":true,"inputs":[{"name":"_identifier","type":"bytes32","description":"is a manager's identifier. 0x0 is not allowed."}],"name":"lookupManager","payable":false,"stateMutability":"view","type":"function","details":"Returns manager's address by its identifier (type).","notice":"Will crash if no manager in the system with given identifier.","signature":"lookupManager(bytes32)","signatureHash":"4fe59012"},{"constant":true,"inputs":[],"name":"contractsManager","payable":false,"stateMutability":"view","type":"function","signature":"contractsManager()","signatureHash":"53253d31"},{"constant":false,"inputs":[{"name":"_to","type":"address","description":"address of the next owner. 0x0 is not allowed."}],"name":"changeContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Prepares ownership pass.     * Can only be called by current owner.","signature":"changeContractOwnership(address)","signatureHash":"557f4bc9"},{"constant":true,"inputs":[],"name":"pendingContractOwner","payable":false,"stateMutability":"view","type":"function","signature":"pendingContractOwner()","signatureHash":"5aa77d3c"},{"constant":false,"inputs":[{"name":"_pollId","type":"uint256"},{"name":"_detailsIpfsHash","type":"bytes32"}],"name":"updatePollDetailsIpfsHash","payable":false,"stateMutability":"nonpayable","type":"function","signature":"updatePollDetailsIpfsHash(uint256,bytes32)","signatureHash":"62339cc0"},{"constant":false,"inputs":[{"name":"_eventsHistory","type":"address"}],"name":"setEventsHistory","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"setEventsHistory(address)","signatureHash":"6521afd7"},{"constant":true,"inputs":[],"name":"getVoteLimit","payable":false,"stateMutability":"view","type":"function","signature":"getVoteLimit()","signatureHash":"657e8c13"},{"constant":false,"inputs":[{"name":"_pollId","type":"uint256"},{"name":"_option","type":"bytes32"}],"name":"addPollOption","payable":false,"stateMutability":"nonpayable","type":"function","signature":"addPollOption(uint256,bytes32)","signatureHash":"69b6f6f2"},{"constant":false,"inputs":[{"name":"pollId","type":"uint256"},{"name":"option","type":"bytes32"},{"name":"count","type":"uint256"}],"name":"emitOptionAdded","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitOptionAdded(uint256,bytes32,uint256)","signatureHash":"6a1b34be"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address","description":"contracts manager. 0x0 is not allowed."}],"name":"setContractsManager","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Setter for ContractsManager. Force overrides currect manager.","signature":"setContractsManager(address)","signatureHash":"71d3b573"},{"constant":false,"inputs":[{"name":"_options","type":"bytes32[16]"},{"name":"_ipfsHashes","type":"bytes32[4]"},{"name":"_detailsIpfsHash","type":"bytes32"},{"name":"_votelimit","type":"uint256"},{"name":"_deadline","type":"uint256"}],"name":"NewPoll","payable":false,"stateMutability":"nonpayable","type":"function","signature":"NewPoll(bytes32[16],bytes32[4],bytes32,uint256,uint256)","signatureHash":"7d6a1f14"},{"constant":false,"inputs":[],"name":"destroy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"destroy()","signatureHash":"83197ef0"},{"constant":false,"inputs":[{"name":"pollId","type":"uint256"}],"name":"emitPollActivated","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitPollActivated(uint256)","signatureHash":"8d009faf"},{"constant":false,"inputs":[{"name":"pollId","type":"uint256"}],"name":"emitPollEnded","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitPollEnded(uint256)","signatureHash":"8d65e2b5"},{"constant":false,"inputs":[{"name":"_to","type":"address","description":"the next contract owner"}],"name":"transferContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Direct ownership pass without change/claim pattern. Can be invoked only by current contract owner","return":"`true` if success, `false` otherwise","signature":"transferContractOwnership(address)","signatureHash":"a843c51f"},{"constant":false,"inputs":[{"name":"pollId","type":"uint256"}],"name":"emitPollDetailsUpdated","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitPollDetailsUpdated(uint256)","signatureHash":"adb4099f"},{"constant":false,"inputs":[{"name":"_id","type":"uint256"},{"name":"_hash","type":"bytes32"}],"name":"addIpfsHashToPoll","payable":false,"stateMutability":"nonpayable","type":"function","signature":"addIpfsHashToPoll(uint256,bytes32)","signatureHash":"c6c41bdb"},{"constant":true,"inputs":[],"name":"contractOwner","payable":false,"stateMutability":"view","type":"function","signature":"contractOwner()","signatureHash":"ce606ee0"},{"constant":false,"inputs":[{"name":"tokens","type":"address[]"},{"name":"_to","type":"address"}],"name":"withdrawnTokens","payable":false,"stateMutability":"nonpayable","type":"function","signature":"withdrawnTokens(address[],address)","signatureHash":"d8f9659b"},{"constant":false,"inputs":[{"name":"errorCode","type":"uint256"}],"name":"emitError","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitError(uint256)","signatureHash":"df26ca08"},{"constant":false,"inputs":[{"name":"_pollId","type":"uint256"},{"name":"_option","type":"bytes32"}],"name":"removePollOption","payable":false,"stateMutability":"nonpayable","type":"function","signature":"removePollOption(uint256,bytes32)","signatureHash":"e469805c"},{"constant":true,"inputs":[{"name":"_pollId","type":"uint256"}],"name":"checkPollIsActive","payable":false,"stateMutability":"view","type":"function","signature":"checkPollIsActive(uint256)","signatureHash":"eaffbbb6"},{"constant":false,"inputs":[{"name":"_pollId","type":"uint256"}],"name":"activatePoll","payable":false,"stateMutability":"nonpayable","type":"function","signature":"activatePoll(uint256)","signatureHash":"ebb96896"},{"constant":false,"inputs":[{"name":"id","type":"uint256"},{"name":"hash","type":"bytes32"},{"name":"count","type":"uint256"}],"name":"emitIpfsHashToPollAdded","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitIpfsHashToPollAdded(uint256,bytes32,uint256)","signatureHash":"ee2df7df"},{"constant":true,"inputs":[{"name":"key","type":"address"}],"name":"isAuthorized","payable":false,"stateMutability":"view","type":"function","signature":"isAuthorized(address)","signatureHash":"fe9fbb80"},{"constant":true,"inputs":[],"name":"getEventsHistory","payable":false,"stateMutability":"view","type":"function","signature":"getEventsHistory()","signatureHash":"fff10aba"},{"inputs":[{"name":"_store","type":"address"},{"name":"_crate","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":false,"stateMutability":"nonpayable","type":"fallback","inputs":[]},{"anonymous":false,"inputs":[{"indexed":false,"name":"pollId","type":"uint256"}],"name":"PollCreated","type":"event","signature":"PollCreated(uint256)","signatureHash":"ab0309b6"},{"anonymous":false,"inputs":[{"indexed":false,"name":"pollId","type":"uint256"}],"name":"PollDeleted","type":"event","signature":"PollDeleted(uint256)","signatureHash":"e66ba7d1"},{"anonymous":false,"inputs":[{"indexed":false,"name":"pollId","type":"uint256"}],"name":"PollEnded","type":"event","signature":"PollEnded(uint256)","signatureHash":"14d4cfc1"},{"anonymous":false,"inputs":[{"indexed":false,"name":"pollId","type":"uint256"}],"name":"PollActivated","type":"event","signature":"PollActivated(uint256)","signatureHash":"4d863a7b"},{"anonymous":false,"inputs":[{"indexed":false,"name":"choice","type":"uint256"},{"indexed":false,"name":"pollId","type":"uint256"}],"name":"VoteCreated","type":"event","signature":"VoteCreated(uint256,uint256)","signatureHash":"f558b17e"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"}],"name":"SharesPercentUpdated","type":"event","signature":"SharesPercentUpdated(address)","signatureHash":"22fe0086"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"},{"indexed":false,"name":"hash","type":"bytes32"},{"indexed":false,"name":"count","type":"uint256"}],"name":"IpfsHashToPollAdded","type":"event","signature":"IpfsHashToPollAdded(uint256,bytes32,uint256)","signatureHash":"a5c4447e"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"},{"indexed":false,"name":"option","type":"bytes32"},{"indexed":false,"name":"count","type":"uint256"}],"name":"OptionAdded","type":"event","signature":"OptionAdded(uint256,bytes32,uint256)","signatureHash":"b6f1f68e"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"},{"indexed":false,"name":"option","type":"bytes32"},{"indexed":false,"name":"count","type":"uint256"}],"name":"OptionRemoved","type":"event","signature":"OptionRemoved(uint256,bytes32,uint256)","signatureHash":"a410cc9c"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"}],"name":"PollDetailsUpdated","type":"event","signature":"PollDetailsUpdated(uint256)","signatureHash":"9514e96b"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"errorCode","type":"uint256"}],"name":"Error","type":"event","signature":"Error(address,uint256)","signatureHash":"9cf38cf2"}]}
