{"fileName":"/contracts/loc/LOCManager.sol","name":"LOCManager","abi":[{"constant":false,"inputs":[{"name":"_locName","type":"bytes32"},{"name":"_newName","type":"bytes32"}],"name":"emitUpdateLOC","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getLOCCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_name","type":"bytes32"}],"name":"removeLOC","outputs":[{"name":"errorCode","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_id","type":"uint256"}],"name":"getLOCById","outputs":[{"name":"locName","type":"bytes32"},{"name":"website","type":"bytes32"},{"name":"issued","type":"uint256"},{"name":"issueLimit","type":"uint256"},{"name":"publishedHash","type":"bytes32"},{"name":"expDate","type":"uint256"},{"name":"status","type":"uint256"},{"name":"securityPercentage","type":"uint256"},{"name":"currency","type":"bytes32"},{"name":"creatrDate","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_symbol","type":"bytes32"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"sendAsset","outputs":[{"name":"errorCode","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_locName","type":"bytes32"},{"name":"_count","type":"uint256"}],"name":"emitNewLOC","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"claimContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_identifier","type":"bytes32"}],"name":"lookupManager","outputs":[{"name":"manager","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"wallet","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"contractsManager","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"}],"name":"changeContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"pendingContractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"locName","type":"bytes32"},{"name":"_oldStatus","type":"uint256"},{"name":"_newStatus","type":"uint256"}],"name":"emitUpdLOCStatus","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"},{"name":"_locName","type":"bytes32"}],"name":"revokeAsset","outputs":[{"name":"errorCode","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_eventsHistory","type":"address"}],"name":"setEventsHistory","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_name","type":"bytes32"},{"name":"_newname","type":"bytes32"},{"name":"_website","type":"bytes32"},{"name":"_issueLimit","type":"uint256"},{"name":"_publishedHash","type":"bytes32"},{"name":"_expDate","type":"uint256"}],"name":"setLOC","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address"}],"name":"setContractsManager","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_name","type":"bytes32"}],"name":"getLOCByName","outputs":[{"name":"_locName","type":"bytes32"},{"name":"_website","type":"bytes32"},{"name":"_issued","type":"uint256"},{"name":"_issueLimit","type":"uint256"},{"name":"_publishedHash","type":"bytes32"},{"name":"_expDate","type":"uint256"},{"name":"_status","type":"uint256"},{"name":"_securityPercentage","type":"uint256"},{"name":"_currency","type":"bytes32"},{"name":"_createDate","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_locName","type":"bytes32"},{"name":"_value","type":"uint256"}],"name":"emitRevoke","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"destroy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_name","type":"bytes32"},{"name":"_status","type":"uint8"}],"name":"setStatus","outputs":[{"name":"errorCode","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_locName","type":"bytes32"}],"name":"emitRemLOC","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_symbol","type":"bytes32"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"emitAssetSent","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_locName","type":"bytes32"},{"name":"_value","type":"uint256"}],"name":"emitReissue","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"}],"name":"transferContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_name","type":"bytes32"},{"name":"_website","type":"bytes32"},{"name":"_issueLimit","type":"uint256"},{"name":"_publishedHash","type":"bytes32"},{"name":"_expDate","type":"uint256"},{"name":"_currency","type":"bytes32"}],"name":"addLOC","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_locName","type":"bytes32"},{"name":"_oldHash","type":"bytes32"},{"name":"_newHash","type":"bytes32"}],"name":"emitHashUpdate","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"},{"name":"_locName","type":"bytes32"}],"name":"reissueAsset","outputs":[{"name":"errorCode","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"contractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getLOCNames","outputs":[{"name":"","type":"bytes32[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"tokens","type":"address[]"},{"name":"_to","type":"address"}],"name":"withdrawnTokens","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_errorCode","type":"uint256"}],"name":"emitError","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address"},{"name":"_wallet","type":"address"}],"name":"init","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"key","type":"address"}],"name":"isAuthorized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getEventsHistory","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_store","type":"address"},{"name":"_crate","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":false,"stateMutability":"nonpayable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"symbol","type":"bytes32"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"AssetSent","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"locName","type":"bytes32"},{"indexed":false,"name":"oldHash","type":"bytes32"},{"indexed":false,"name":"newHash","type":"bytes32"}],"name":"HashUpdate","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"locName","type":"bytes32"},{"indexed":false,"name":"count","type":"uint256"}],"name":"NewLOC","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"locName","type":"bytes32"},{"indexed":false,"name":"newName","type":"bytes32"}],"name":"UpdateLOC","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":true,"name":"locName","type":"bytes32"}],"name":"RemLOC","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"locName","type":"bytes32"},{"indexed":false,"name":"oldStatus","type":"uint256"},{"indexed":false,"name":"newStatus","type":"uint256"}],"name":"UpdLOCStatus","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"locName","type":"bytes32"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Reissue","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"locName","type":"bytes32"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Revoke","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"errorCode","type":"uint256"}],"name":"Error","type":"event"}],"source":"pragma solidity ^0.4.11;\n\nimport \"../core/common/BaseManager.sol\";\nimport \"../assets/FeeInterface.sol\";\nimport \"../core/erc20/ERC20ManagerInterface.sol\";\nimport \"../core/platform/ChronoBankAssetProxyInterface.sol\";\nimport \"./LOCManagerEmitter.sol\";\nimport \"./ReissuableWalletInterface.sol\";\n\ncontract LOCManager is LOCManagerEmitter, BaseManager {\n\n    uint constant ERROR_LOC_NOT_FOUND = 1000;\n    uint constant ERROR_LOC_EXISTS = 1001;\n    uint constant ERROR_LOC_INACTIVE = 1002;\n    uint constant ERROR_LOC_SHOULD_NO_BE_ACTIVE = 1003;\n    uint constant ERROR_LOC_INVALID_PARAMETER = 1004;\n    uint constant ERROR_LOC_INVALID_INVOCATION = 1005;\n    uint constant ERROR_LOC_ADD_CONTRACT = 1006;\n    uint constant ERROR_LOC_SEND_ASSET = 1007;\n    uint constant ERROR_LOC_REQUESTED_ISSUE_VALUE_EXCEEDED = 1008;\n    uint constant ERROR_LOC_REISSUING_ASSET_FAILED = 1009;\n    uint constant ERROR_LOC_REQUESTED_REVOKE_VALUE_EXCEEDED = 1010;\n    uint constant ERROR_LOC_REVOKING_ASSET_FAILED = 1011;\n\n    StorageInterface.Set offeringCompaniesNames;\n    StorageInterface.Bytes32Bytes32Mapping website;\n    StorageInterface.Bytes32Bytes32Mapping publishedHash;\n    StorageInterface.Bytes32Bytes32Mapping currency;\n    StorageInterface.Bytes32UIntMapping issued;\n    StorageInterface.Bytes32UIntMapping issueLimit;\n    StorageInterface.Bytes32UIntMapping expDate;\n    StorageInterface.Bytes32UIntMapping status;\n    StorageInterface.Bytes32UIntMapping createDate;\n    StorageInterface.Address walletStorage;\n\n    enum Status {maintenance, active, suspended, bankrupt}\n\n    function LOCManager(Storage _store, bytes32 _crate) BaseManager(_store, _crate) {\n        offeringCompaniesNames.init('offeringCompaniesNames');\n        website.init('website');\n        publishedHash.init('publishedHash');\n        currency.init('currency');\n        issued.init('issued');\n        issueLimit.init('issueLimit');\n        expDate.init('expDate');\n        status.init('status');\n        createDate.init('createDate');\n        walletStorage.init('walletStorage');\n    }\n\n    function init(address _contractsManager, address _wallet) onlyContractOwner returns (uint) {\n        BaseManager.init(_contractsManager, \"LOCManager\");\n        store.set(walletStorage, _wallet);\n        return OK;\n    }\n\n    function wallet() public constant returns (address) {\n        return store.get(walletStorage);\n    }\n\n    function isLOCExist(bytes32 _locName) private constant returns (bool) {\n        return store.includes(offeringCompaniesNames, _locName);\n    }\n\n    function isLOCActive(bytes32 _locName) private constant returns (bool) {\n        return store.get(status, _locName) == uint(Status.active);\n    }\n\n    function sendAsset(bytes32 _symbol, address _to, uint _value) returns (uint errorCode) {\n        errorCode = multisig();\n        if (OK != errorCode) {\n            return _handleResult(errorCode);\n        }\n\n        var (_, _token) = _getPlatformAndTokenForSymbol(_symbol);\n        ReissuableWalletInterface _wallet = ReissuableWalletInterface(wallet());\n        if (!_wallet.withdraw(_token, _to, _value)) {\n            return _emitError(ERROR_LOC_SEND_ASSET);\n        }\n\n        _emitAssetSent(_symbol, _to, _value);\n        return OK;\n    }\n\n    function reissueAsset(uint _value, bytes32 _locName) returns (uint errorCode) {\n        errorCode = multisig();\n        if (OK != errorCode) {\n            return _handleResult(errorCode);\n        }\n\n        if (!isLOCActive(_locName)) {\n            return _emitError(ERROR_LOC_INACTIVE);\n        }\n\n        uint _issued = store.get(issued, _locName);\n        if (_value <= store.get(issueLimit, _locName) - _issued) {\n            bytes32 _symbol = store.get(currency, _locName);\n            var (_platform, _) = _getPlatformAndTokenForSymbol(_symbol);\n            ReissuableWalletInterface _wallet = ReissuableWalletInterface(wallet());\n            if (_wallet.reissue(_platform, _symbol, _value) == OK) {\n                store.set(issued, _locName, _issued + _value);\n                _emitReissue(_locName, _value);\n                errorCode = OK;\n            } else {\n                errorCode = _emitError(ERROR_LOC_REISSUING_ASSET_FAILED);\n            }\n        } else {\n            errorCode = _emitError(ERROR_LOC_REQUESTED_ISSUE_VALUE_EXCEEDED);\n        }\n    }\n\n    function revokeAsset(uint _value, bytes32 _locName) returns (uint errorCode) {\n        errorCode = multisig();\n        if (OK != errorCode) {\n            return _handleResult(errorCode);\n        }\n\n        if (!isLOCActive(_locName)) {\n            return _emitError(ERROR_LOC_INACTIVE);\n        }\n\n        uint _issued = store.get(issued, _locName);\n        if (_value <= _issued) {\n            bytes32 _symbol = store.get(currency, _locName);\n            var (_platform, _) = _getPlatformAndTokenForSymbol(_symbol);\n            ReissuableWalletInterface _wallet = ReissuableWalletInterface(wallet());\n            if (_wallet.revoke(_platform, _symbol, _value) == OK) {\n                store.set(issued, _locName, _issued - _value);\n                _emitRevoke(_locName, _value);\n                errorCode = OK;\n            }\n            else {\n                errorCode = _emitError(ERROR_LOC_REVOKING_ASSET_FAILED);\n            }\n        }\n        else {\n            errorCode = _emitError(ERROR_LOC_REQUESTED_REVOKE_VALUE_EXCEEDED);\n        }\n    }\n\n    function removeLOC(bytes32 _name) returns (uint errorCode) {\n        errorCode = multisig();\n        if (OK != errorCode) {\n            return _handleResult(errorCode);\n        }\n\n        if (!isLOCExist(_name)) {\n            return _emitError(ERROR_LOC_NOT_FOUND);\n        }\n\n        if (isLOCActive(_name)) {\n            return _emitError(ERROR_LOC_SHOULD_NO_BE_ACTIVE);\n        }\n\n        store.remove(offeringCompaniesNames, _name);\n        store.set(website, _name, 0);\n        store.set(issueLimit, _name, 0);\n        store.set(issued, _name, 0);\n        store.set(createDate, _name, 0);\n        store.set(publishedHash, _name, 0);\n        store.set(expDate, _name, 0);\n        store.set(currency, _name, 0);\n        store.set(createDate, _name, 0);\n        _emitRemLOC(_name);\n\n        return OK;\n    }\n\n    function addLOC(bytes32 _name, bytes32 _website, uint _issueLimit, bytes32 _publishedHash, uint _expDate, bytes32 _currency) onlyAuthorized returns (uint) {\n        if (isLOCExist(_name)) {\n            return _emitError(ERROR_LOC_EXISTS);\n        }\n\n        store.add(offeringCompaniesNames, _name);\n        store.set(website, _name, _website);\n        store.set(issueLimit, _name, _issueLimit);\n        store.set(publishedHash, _name, _publishedHash);\n        store.set(expDate, _name, _expDate);\n        store.set(currency, _name, _currency);\n        store.set(createDate, _name, now);\n        _emitNewLOC(_name, store.count(offeringCompaniesNames));\n\n        return OK;\n    }\n\n    function setLOC(bytes32 _name, bytes32 _newname, bytes32 _website, uint _issueLimit, bytes32 _publishedHash, uint _expDate) onlyAuthorized returns (uint) {\n        if (!isLOCExist(_name)) {\n            return _emitError(ERROR_LOC_NOT_FOUND);\n        }\n\n        if (isLOCActive(_name)) {\n            return _emitError(ERROR_LOC_SHOULD_NO_BE_ACTIVE);\n        }\n\n        if (_newname == bytes32(0)) {\n            return _emitError(ERROR_LOC_INVALID_PARAMETER);\n        }\n        _emitUpdateLOC(_name, _newname);\n        if (!(_newname == _name)) {\n            store.set(offeringCompaniesNames, _name, _newname);\n            store.set(website, _newname, store.get(website, _name));\n            store.set(issueLimit, _newname, store.get(issueLimit, _name));\n            store.set(publishedHash, _newname, store.get(publishedHash, _name));\n            store.set(expDate, _newname, store.get(expDate, _name));\n            store.set(currency, _newname, store.get(currency, _name));\n            store.set(createDate, _newname, store.get(createDate, _name));\n            _name = _newname;\n        }\n        if (!(_website == store.get(website, _name))) {\n            store.set(website, _name, _website);\n        }\n        if (!(_issueLimit == store.get(issueLimit, _name))) {\n            store.set(issueLimit, _name, _issueLimit);\n        }\n        if (!(_publishedHash == store.get(publishedHash, _name))) {\n            store.set(publishedHash, _name, _publishedHash);\n        }\n        if (!(_expDate == store.get(expDate, _name))) {\n            store.set(expDate, _name, _expDate);\n        }\n\n        return OK;\n    }\n\n    function setStatus(bytes32 _name, Status _status) returns (uint errorCode) {\n        errorCode = multisig();\n        if (OK != errorCode) {\n            return _handleResult(errorCode);\n        }\n\n        if (!isLOCExist(_name)) {\n            return _emitError(ERROR_LOC_NOT_FOUND);\n        }\n\n        if (store.get(status, _name) == uint(_status)) {\n            return _emitError(ERROR_LOC_INVALID_PARAMETER);\n        }\n\n        store.set(status, _name, uint(_status));\n        _emitUpdLOCStatus(_name, store.get(status, _name), uint(_status));\n\n        return OK;\n    }\n\n    function getLOCByName(bytes32 _name) constant returns (bytes32 _locName, bytes32 _website,\n    uint _issued,\n    uint _issueLimit,\n    bytes32 _publishedHash,\n    uint _expDate,\n    uint _status,\n    uint _securityPercentage,\n    bytes32 _currency,\n    uint _createDate) {\n        _website = store.get(website, _name);\n        _issued = store.get(issued, _name);\n        _issueLimit = store.get(issueLimit, _name);\n        _publishedHash = store.get(publishedHash, _name);\n        _expDate = store.get(expDate, _name);\n        _status = store.get(status, _name);\n        _currency = store.get(currency, _name);\n        _createDate = store.get(createDate, _name);\n        return (_name, _website, _issued, _issueLimit, _publishedHash, _expDate, _status, 10, _currency, _createDate);\n    }\n\n    function getLOCById(uint _id) constant returns (bytes32 locName, bytes32 website,\n    uint issued,\n    uint issueLimit,\n    bytes32 publishedHash,\n    uint expDate,\n    uint status,\n    uint securityPercentage,\n    bytes32 currency,\n    uint creatrDate) {\n        bytes32 _name = store.get(offeringCompaniesNames, _id);\n        return getLOCByName(_name);\n    }\n\n    function getLOCNames() constant returns (bytes32[]) {\n        return store.get(offeringCompaniesNames);\n    }\n\n    function getLOCCount() constant returns (uint) {\n        return store.count(offeringCompaniesNames);\n    }\n\n    function _getPlatformAndTokenForSymbol(bytes32 _symbol) private constant returns (address _platform, address _token) {\n        ERC20ManagerInterface _erc20Manager = ERC20ManagerInterface(lookupManager(\"ERC20Manager\"));\n        _token = _erc20Manager.getTokenAddressBySymbol(_symbol);\n        _platform = ChronoBankAssetProxyInterface(_token).chronoBankPlatform();\n    }\n\n    function _emitNewLOC(bytes32 _locName, uint count) internal {\n        LOCManager(getEventsHistory()).emitNewLOC(_locName, count);\n    }\n\n    function _emitRemLOC(bytes32 _locName) internal {\n        LOCManager(getEventsHistory()).emitRemLOC(_locName);\n    }\n\n    function _emitUpdateLOC(bytes32 _locName, bytes32 _newName) internal {\n        LOCManager(getEventsHistory()).emitUpdateLOC(_locName, _newName);\n    }\n\n    function _emitUpdLOCStatus(bytes32 _locName, uint _oldStatus, uint _newStatus) internal {\n        LOCManager(getEventsHistory()).emitUpdLOCStatus(_locName, _oldStatus, _newStatus);\n    }\n\n    function _emitHashUpdate(bytes32 _locName, bytes32 _oldHash, bytes32 _newHash) internal {\n        LOCManager(getEventsHistory()).emitHashUpdate(_locName, _oldHash, _newHash);\n    }\n\n    function _emitReissue(bytes32 _locName, uint _value) internal {\n        LOCManager(getEventsHistory()).emitReissue(_locName, _value);\n    }\n\n    function _emitRevoke(bytes32 _locName, uint _value) internal {\n        LOCManager(getEventsHistory()).emitRevoke(_locName, _value);\n    }\n\n    function _handleResult(uint error) internal returns (uint) {\n        if (error != OK && error != MULTISIG_ADDED) {\n            return _emitError(error);\n        }\n        return error;\n    }\n\n    function _emitError(uint error) internal returns (uint) {\n        LOCManager(getEventsHistory()).emitError(error);\n        return error;\n    }\n\n    function _emitAssetSent(bytes32 symbol, address to, uint value) internal  {\n        LOCManager(getEventsHistory()).emitAssetSent(symbol, to, value);\n    }\n\n    function() {\n        throw;\n    }\n}\n","abiDocs":[{"constant":false,"inputs":[{"name":"_locName","type":"bytes32"},{"name":"_newName","type":"bytes32"}],"name":"emitUpdateLOC","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitUpdateLOC(bytes32,bytes32)","signatureHash":"12b3e862"},{"constant":true,"inputs":[],"name":"getLOCCount","payable":false,"stateMutability":"view","type":"function","signature":"getLOCCount()","signatureHash":"23400cf6"},{"constant":false,"inputs":[{"name":"_name","type":"bytes32"}],"name":"removeLOC","payable":false,"stateMutability":"nonpayable","type":"function","signature":"removeLOC(bytes32)","signatureHash":"3b993649"},{"constant":true,"inputs":[{"name":"_id","type":"uint256"}],"name":"getLOCById","payable":false,"stateMutability":"view","type":"function","signature":"getLOCById(uint256)","signatureHash":"3c22b5af"},{"constant":false,"inputs":[{"name":"_symbol","type":"bytes32"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"sendAsset","payable":false,"stateMutability":"nonpayable","type":"function","signature":"sendAsset(bytes32,address,uint256)","signatureHash":"404166b6"},{"constant":false,"inputs":[{"name":"_locName","type":"bytes32"},{"name":"_count","type":"uint256"}],"name":"emitNewLOC","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitNewLOC(bytes32,uint256)","signatureHash":"41f70189"},{"constant":false,"inputs":[],"name":"claimContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Finalize ownership pass.     * Can only be called by pending owner.","signature":"claimContractOwnership()","signatureHash":"4592cd1d"},{"constant":true,"inputs":[{"name":"_identifier","type":"bytes32","description":"is a manager's identifier. 0x0 is not allowed."}],"name":"lookupManager","payable":false,"stateMutability":"view","type":"function","details":"Returns manager's address by its identifier (type).","notice":"Will crash if no manager in the system with given identifier.","signature":"lookupManager(bytes32)","signatureHash":"4fe59012"},{"constant":true,"inputs":[],"name":"wallet","payable":false,"stateMutability":"view","type":"function","signature":"wallet()","signatureHash":"521eb273"},{"constant":true,"inputs":[],"name":"contractsManager","payable":false,"stateMutability":"view","type":"function","signature":"contractsManager()","signatureHash":"53253d31"},{"constant":false,"inputs":[{"name":"_to","type":"address","description":"address of the next owner. 0x0 is not allowed."}],"name":"changeContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Prepares ownership pass.     * Can only be called by current owner.","signature":"changeContractOwnership(address)","signatureHash":"557f4bc9"},{"constant":true,"inputs":[],"name":"pendingContractOwner","payable":false,"stateMutability":"view","type":"function","signature":"pendingContractOwner()","signatureHash":"5aa77d3c"},{"constant":false,"inputs":[{"name":"locName","type":"bytes32"},{"name":"_oldStatus","type":"uint256"},{"name":"_newStatus","type":"uint256"}],"name":"emitUpdLOCStatus","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitUpdLOCStatus(bytes32,uint256,uint256)","signatureHash":"62823486"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"},{"name":"_locName","type":"bytes32"}],"name":"revokeAsset","payable":false,"stateMutability":"nonpayable","type":"function","signature":"revokeAsset(uint256,bytes32)","signatureHash":"63e05a7c"},{"constant":false,"inputs":[{"name":"_eventsHistory","type":"address"}],"name":"setEventsHistory","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"setEventsHistory(address)","signatureHash":"6521afd7"},{"constant":false,"inputs":[{"name":"_name","type":"bytes32"},{"name":"_newname","type":"bytes32"},{"name":"_website","type":"bytes32"},{"name":"_issueLimit","type":"uint256"},{"name":"_publishedHash","type":"bytes32"},{"name":"_expDate","type":"uint256"}],"name":"setLOC","payable":false,"stateMutability":"nonpayable","type":"function","signature":"setLOC(bytes32,bytes32,bytes32,uint256,bytes32,uint256)","signatureHash":"71749ac7"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address","description":"contracts manager. 0x0 is not allowed."}],"name":"setContractsManager","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Setter for ContractsManager. Force overrides currect manager.","signature":"setContractsManager(address)","signatureHash":"71d3b573"},{"constant":true,"inputs":[{"name":"_name","type":"bytes32"}],"name":"getLOCByName","payable":false,"stateMutability":"view","type":"function","signature":"getLOCByName(bytes32)","signatureHash":"7613251f"},{"constant":false,"inputs":[{"name":"_locName","type":"bytes32"},{"name":"_value","type":"uint256"}],"name":"emitRevoke","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitRevoke(bytes32,uint256)","signatureHash":"823ad10d"},{"constant":false,"inputs":[],"name":"destroy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"destroy()","signatureHash":"83197ef0"},{"constant":false,"inputs":[{"name":"_name","type":"bytes32"},{"name":"_status","type":"uint8"}],"name":"setStatus","payable":false,"stateMutability":"nonpayable","type":"function","signature":"setStatus(bytes32,uint8)","signatureHash":"8de654ba"},{"constant":false,"inputs":[{"name":"_locName","type":"bytes32"}],"name":"emitRemLOC","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitRemLOC(bytes32)","signatureHash":"8e784379"},{"constant":false,"inputs":[{"name":"_symbol","type":"bytes32"},{"name":"_to","type":"address"},{"name":"_value","type":"uint256"}],"name":"emitAssetSent","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitAssetSent(bytes32,address,uint256)","signatureHash":"9e17a753"},{"constant":false,"inputs":[{"name":"_locName","type":"bytes32"},{"name":"_value","type":"uint256"}],"name":"emitReissue","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitReissue(bytes32,uint256)","signatureHash":"a2f11a85"},{"constant":false,"inputs":[{"name":"_to","type":"address","description":"the next contract owner"}],"name":"transferContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Direct ownership pass without change/claim pattern. Can be invoked only by current contract owner","return":"`true` if success, `false` otherwise","signature":"transferContractOwnership(address)","signatureHash":"a843c51f"},{"constant":false,"inputs":[{"name":"_name","type":"bytes32"},{"name":"_website","type":"bytes32"},{"name":"_issueLimit","type":"uint256"},{"name":"_publishedHash","type":"bytes32"},{"name":"_expDate","type":"uint256"},{"name":"_currency","type":"bytes32"}],"name":"addLOC","payable":false,"stateMutability":"nonpayable","type":"function","signature":"addLOC(bytes32,bytes32,uint256,bytes32,uint256,bytes32)","signatureHash":"afe8bf93"},{"constant":false,"inputs":[{"name":"_locName","type":"bytes32"},{"name":"_oldHash","type":"bytes32"},{"name":"_newHash","type":"bytes32"}],"name":"emitHashUpdate","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitHashUpdate(bytes32,bytes32,bytes32)","signatureHash":"b357f0da"},{"constant":false,"inputs":[{"name":"_value","type":"uint256"},{"name":"_locName","type":"bytes32"}],"name":"reissueAsset","payable":false,"stateMutability":"nonpayable","type":"function","signature":"reissueAsset(uint256,bytes32)","signatureHash":"c46f734b"},{"constant":true,"inputs":[],"name":"contractOwner","payable":false,"stateMutability":"view","type":"function","signature":"contractOwner()","signatureHash":"ce606ee0"},{"constant":true,"inputs":[],"name":"getLOCNames","payable":false,"stateMutability":"view","type":"function","signature":"getLOCNames()","signatureHash":"d44770e1"},{"constant":false,"inputs":[{"name":"tokens","type":"address[]"},{"name":"_to","type":"address"}],"name":"withdrawnTokens","payable":false,"stateMutability":"nonpayable","type":"function","signature":"withdrawnTokens(address[],address)","signatureHash":"d8f9659b"},{"constant":false,"inputs":[{"name":"_errorCode","type":"uint256"}],"name":"emitError","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitError(uint256)","signatureHash":"df26ca08"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address"},{"name":"_wallet","type":"address"}],"name":"init","payable":false,"stateMutability":"nonpayable","type":"function","signature":"init(address,address)","signatureHash":"f09a4016"},{"constant":true,"inputs":[{"name":"key","type":"address"}],"name":"isAuthorized","payable":false,"stateMutability":"view","type":"function","signature":"isAuthorized(address)","signatureHash":"fe9fbb80"},{"constant":true,"inputs":[],"name":"getEventsHistory","payable":false,"stateMutability":"view","type":"function","signature":"getEventsHistory()","signatureHash":"fff10aba"},{"inputs":[{"name":"_store","type":"address"},{"name":"_crate","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":false,"stateMutability":"nonpayable","type":"fallback","inputs":[]},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"symbol","type":"bytes32"},{"indexed":true,"name":"to","type":"address"},{"indexed":false,"name":"value","type":"uint256"}],"name":"AssetSent","type":"event","signature":"AssetSent(address,bytes32,address,uint256)","signatureHash":"5a76ac30"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"locName","type":"bytes32"},{"indexed":false,"name":"oldHash","type":"bytes32"},{"indexed":false,"name":"newHash","type":"bytes32"}],"name":"HashUpdate","type":"event","signature":"HashUpdate(address,bytes32,bytes32,bytes32)","signatureHash":"0feb0875"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"locName","type":"bytes32"},{"indexed":false,"name":"count","type":"uint256"}],"name":"NewLOC","type":"event","signature":"NewLOC(address,bytes32,uint256)","signatureHash":"c145a293"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"locName","type":"bytes32"},{"indexed":false,"name":"newName","type":"bytes32"}],"name":"UpdateLOC","type":"event","signature":"UpdateLOC(address,bytes32,bytes32)","signatureHash":"859432cf"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":true,"name":"locName","type":"bytes32"}],"name":"RemLOC","type":"event","signature":"RemLOC(address,bytes32)","signatureHash":"ee5ac2c3"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"locName","type":"bytes32"},{"indexed":false,"name":"oldStatus","type":"uint256"},{"indexed":false,"name":"newStatus","type":"uint256"}],"name":"UpdLOCStatus","type":"event","signature":"UpdLOCStatus(address,bytes32,uint256,uint256)","signatureHash":"53b00f41"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"locName","type":"bytes32"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Reissue","type":"event","signature":"Reissue(address,bytes32,uint256)","signatureHash":"8d1562f2"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"locName","type":"bytes32"},{"indexed":false,"name":"value","type":"uint256"}],"name":"Revoke","type":"event","signature":"Revoke(address,bytes32,uint256)","signatureHash":"596e6e71"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"errorCode","type":"uint256"}],"name":"Error","type":"event","signature":"Error(address,uint256)","signatureHash":"9cf38cf2"}]}
