{"fileName":"/contracts/vote/PollDetails.sol","name":"PollDetails","abi":[{"constant":true,"inputs":[],"name":"getInactivePollsCount","outputs":[{"name":"result","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_id","type":"uint256"}],"name":"isPollOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_id","type":"uint256"}],"name":"getOptionsVotesForPoll","outputs":[{"name":"result","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"pollsCount","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address"}],"name":"init","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_pollId","type":"uint256"}],"name":"getPoll","outputs":[{"name":"_id","type":"uint256"},{"name":"_owner","type":"address"},{"name":"_detailsIpfsHash","type":"bytes32"},{"name":"_votelimit","type":"uint256"},{"name":"_deadline","type":"uint256"},{"name":"_status","type":"bool"},{"name":"_active","type":"bool"},{"name":"_creationTime","type":"uint256"},{"name":"_options","type":"bytes32[]"},{"name":"_hashes","type":"bytes32[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getMemberPolls","outputs":[{"name":"result","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_id","type":"uint256"}],"name":"getMemberVotesForPoll","outputs":[{"name":"result","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getPollsDetailsIpfsHashes","outputs":[{"name":"result","type":"bytes32[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[],"name":"claimContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_identifier","type":"bytes32"}],"name":"lookupManager","outputs":[{"name":"manager","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"contractsManager","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"}],"name":"changeContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"pendingContractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getActivePolls","outputs":[{"name":"result","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_eventsHistory","type":"address"}],"name":"setEventsHistory","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address"}],"name":"setContractsManager","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[],"name":"destroy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":false,"inputs":[{"name":"pollId","type":"uint256"}],"name":"emitPollEnded","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_id","type":"uint256"}],"name":"getOptionsVotesStatisticForPoll","outputs":[{"name":"result","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_id","type":"uint256"}],"name":"getIpfsHashesFromPoll","outputs":[{"name":"result","type":"bytes32[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_id","type":"uint256"}],"name":"getOptionsForPoll","outputs":[{"name":"result","type":"bytes32[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"_to","type":"address"}],"name":"transferContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[],"name":"getActivePollsCount","outputs":[{"name":"result","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getInactivePolls","outputs":[{"name":"result","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"contractOwner","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":false,"inputs":[{"name":"tokens","type":"address[]"},{"name":"_to","type":"address"}],"name":"withdrawnTokens","outputs":[{"name":"","type":"uint256"}],"payable":false,"stateMutability":"nonpayable","type":"function"},{"constant":true,"inputs":[{"name":"_pollId","type":"uint256"}],"name":"checkPollIsActive","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"key","type":"address"}],"name":"isAuthorized","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[],"name":"getEventsHistory","outputs":[{"name":"","type":"address"}],"payable":false,"stateMutability":"view","type":"function"},{"inputs":[{"name":"_store","type":"address"},{"name":"_crate","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":false,"stateMutability":"nonpayable","type":"fallback"},{"anonymous":false,"inputs":[{"indexed":false,"name":"pollId","type":"uint256"}],"name":"PollCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"pollId","type":"uint256"}],"name":"PollDeleted","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"pollId","type":"uint256"}],"name":"PollEnded","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"pollId","type":"uint256"}],"name":"PollActivated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"name":"choice","type":"uint256"},{"indexed":false,"name":"pollId","type":"uint256"}],"name":"VoteCreated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"}],"name":"SharesPercentUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"},{"indexed":false,"name":"hash","type":"bytes32"},{"indexed":false,"name":"count","type":"uint256"}],"name":"IpfsHashToPollAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"},{"indexed":false,"name":"option","type":"bytes32"},{"indexed":false,"name":"count","type":"uint256"}],"name":"OptionAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"},{"indexed":false,"name":"option","type":"bytes32"},{"indexed":false,"name":"count","type":"uint256"}],"name":"OptionRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"}],"name":"PollDetailsUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"errorCode","type":"uint256"}],"name":"Error","type":"event"}],"source":"pragma solidity ^0.4.11;\n\nimport \"./Vote.sol\";\n\ncontract PollDetails is Vote {\n    modifier onlyExistedPoll(uint _id) {\n        if (store.includes(polls, _id)) {\n            _;\n        }\n    }\n\n    function PollDetails(Storage _store, bytes32 _crate) Vote(_store, _crate) {\n    }\n\n    function init(address _contractsManager) onlyContractOwner returns (uint) {\n        return BaseManager.init(_contractsManager, \"PollDetails\");\n    }\n\n    function pollsCount() constant returns (uint) {\n        return store.count(polls);\n    }\n\n    function getActivePolls() constant returns (uint[] result) {\n        result = filteredPolls(checkPollIsActive, getActivePollsCount());\n    }\n\n    function getActivePollsCount() constant returns (uint result) {\n        StorageInterface.Iterator memory iterator = store.listIterator(polls);\n        while (store.canGetNextWithIterator(polls, iterator)) {\n            if (store.get(active, store.getNextWithIterator(polls, iterator))) {\n                ++result;\n            }\n        }\n    }\n\n    function getInactivePollsCount() constant returns (uint result) {\n        return store.count(polls) - getActivePollsCount();\n    }\n\n    function getInactivePolls() constant returns (uint[] result) {\n        result = filteredPolls(checkPollIsInactive, getInactivePollsCount());\n    }\n\n    function filteredPolls(function (uint) constant returns (bool) filter, uint count) private returns (uint[] result) {\n        StorageInterface.Iterator memory iterator = store.listIterator(polls);\n        uint pollId;\n        result = new uint[](count);\n        for(uint j = 0; store.canGetNextWithIterator(polls, iterator);) {\n            pollId = store.getNextWithIterator(polls, iterator);\n            if (filter(pollId)) {\n                result[j++] = pollId;\n            }\n        }\n    }\n\n    function getPollsDetailsIpfsHashes() constant returns (bytes32[] result) {\n        StorageInterface.Iterator memory iterator = store.listIterator(polls);\n        result = new bytes32[](iterator.count());\n        for (uint i = 0; store.canGetNextWithIterator(polls, iterator); ++i) {\n            result[i] = store.get(detailsIpfsHash, store.getNextWithIterator(polls, iterator));\n        }\n    }\n\n    function getMemberPolls() constant returns (uint[] result) {\n        StorageInterface.Iterator memory memberPollsIterator = store.listIterator(memberPolls, bytes32(msg.sender));\n        result = new uint[](memberPollsIterator.count());\n        for (uint i = 0; store.canGetNextWithIterator(memberPolls, memberPollsIterator); ++i) {\n            result[i] = store.getNextWithIterator(memberPolls, memberPollsIterator);\n        }\n    }\n\n    function getMemberVotesForPoll(uint _id) constant returns (uint result) {\n        if (!isPollExist(_id)) {\n            return;\n        }\n\n        result = store.get(memberOption, _id, msg.sender);\n    }\n\n    function getOptionsForPoll(uint _id) constant returns (bytes32[] result) {\n        if (!isPollExist(_id)) {\n            return;\n        }\n\n        StorageInterface.Iterator memory iterator = store.listIterator(optionsId, bytes32(_id));\n        result = new bytes32[](iterator.count());\n        for (uint i = 0; store.canGetNextWithIterator(optionsId, iterator); ++i) {\n            result[i] = store.getNextWithIterator(optionsId, iterator);\n        }\n    }\n\n    function getOptionsVotesStatisticForPoll(uint _id) constant returns (uint[] result) {\n        if (!isPollExist(_id)) {\n            return;\n        }\n\n        uint _optionsCount = store.count(optionsId, bytes32(_id));\n        result = new uint[](_optionsCount);\n        for (uint i = 0; i < _optionsCount; i++) {\n            result[i] = store.get(optionsStats, _id, i + 1);\n        }\n    }\n\n    function getOptionsVotesForPoll(uint _id) constant returns (uint[] result) {\n        if (!isPollExist(_id)) {\n            return;\n        }\n\n        uint _optionsCount = store.count(optionsId, bytes32(_id));\n        result = new uint[](_optionsCount);\n        for (uint i = 0; i < _optionsCount; i++) {\n            result[i] = store.get(options, _id, i + 1);\n        }\n    }\n\n    function getIpfsHashesFromPoll(uint _id) constant returns (bytes32[] result) {\n        if (!isPollExist(_id)) {\n            return;\n        }\n\n        StorageInterface.Iterator memory hashesIterator = store.listIterator(ipfsHashes, bytes32(_id));\n        result = new bytes32[](hashesIterator.count());\n        for (uint i = 0; store.canGetNextWithIterator(ipfsHashes, hashesIterator); ++i) {\n            result[i] = store.getNextWithIterator(ipfsHashes, hashesIterator);\n        }\n    }\n\n    function getPoll(uint _pollId) constant returns (uint _id,\n    address _owner,\n    bytes32 _detailsIpfsHash,\n    uint _votelimit,\n    uint _deadline,\n    bool _status,\n    bool _active,\n    uint _creationTime,\n    bytes32[] _options,\n    bytes32[] _hashes) {\n        if (!isPollExist(_pollId)) {\n            return;\n        }\n\n        _id = _pollId;\n        _owner = store.get(owner, _pollId);\n        _detailsIpfsHash = store.get(detailsIpfsHash, _pollId);\n        _votelimit = store.get(votelimit, _pollId);\n        _deadline = store.get(deadline, _pollId);\n        _status = store.get(status, _pollId);\n        _active = store.get(active, _pollId);\n        _creationTime = store.get(creationTime, _pollId);\n\n        StorageInterface.Iterator memory setIterator = store.listIterator(optionsId, bytes32(_pollId));\n        _options = new bytes32[](setIterator.count());\n        uint i;\n        for (i = 0; store.canGetNextWithIterator(optionsId, setIterator); ++i) {\n            _options[i] = store.getNextWithIterator(optionsId, setIterator);\n        }\n\n        setIterator = store.listIterator(ipfsHashes, bytes32(_pollId));\n        _hashes = new bytes32[](setIterator.count());\n        for (i = 0; store.canGetNextWithIterator(ipfsHashes, setIterator); ++i) {\n            _hashes[i] = store.getNextWithIterator(ipfsHashes, setIterator);\n        }\n    }\n}\n","abiDocs":[{"constant":true,"inputs":[],"name":"getInactivePollsCount","payable":false,"stateMutability":"view","type":"function","signature":"getInactivePollsCount()","signatureHash":"125191a0"},{"constant":true,"inputs":[{"name":"_id","type":"uint256"}],"name":"isPollOwner","payable":false,"stateMutability":"view","type":"function","signature":"isPollOwner(uint256)","signatureHash":"15601a21"},{"constant":true,"inputs":[{"name":"_id","type":"uint256"}],"name":"getOptionsVotesForPoll","payable":false,"stateMutability":"view","type":"function","signature":"getOptionsVotesForPoll(uint256)","signatureHash":"15cc97de"},{"constant":true,"inputs":[],"name":"pollsCount","payable":false,"stateMutability":"view","type":"function","signature":"pollsCount()","signatureHash":"179d760d"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address"}],"name":"init","payable":false,"stateMutability":"nonpayable","type":"function","signature":"init(address)","signatureHash":"19ab453c"},{"constant":true,"inputs":[{"name":"_pollId","type":"uint256"}],"name":"getPoll","payable":false,"stateMutability":"view","type":"function","signature":"getPoll(uint256)","signatureHash":"1a8cbcaa"},{"constant":true,"inputs":[],"name":"getMemberPolls","payable":false,"stateMutability":"view","type":"function","signature":"getMemberPolls()","signatureHash":"1fac0b7b"},{"constant":true,"inputs":[{"name":"_id","type":"uint256"}],"name":"getMemberVotesForPoll","payable":false,"stateMutability":"view","type":"function","signature":"getMemberVotesForPoll(uint256)","signatureHash":"2ab39810"},{"constant":true,"inputs":[],"name":"getPollsDetailsIpfsHashes","payable":false,"stateMutability":"view","type":"function","signature":"getPollsDetailsIpfsHashes()","signatureHash":"43e56634"},{"constant":false,"inputs":[],"name":"claimContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Finalize ownership pass.     * Can only be called by pending owner.","signature":"claimContractOwnership()","signatureHash":"4592cd1d"},{"constant":true,"inputs":[{"name":"_identifier","type":"bytes32","description":"is a manager's identifier. 0x0 is not allowed."}],"name":"lookupManager","payable":false,"stateMutability":"view","type":"function","details":"Returns manager's address by its identifier (type).","notice":"Will crash if no manager in the system with given identifier.","signature":"lookupManager(bytes32)","signatureHash":"4fe59012"},{"constant":true,"inputs":[],"name":"contractsManager","payable":false,"stateMutability":"view","type":"function","signature":"contractsManager()","signatureHash":"53253d31"},{"constant":false,"inputs":[{"name":"_to","type":"address","description":"address of the next owner. 0x0 is not allowed."}],"name":"changeContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","return":"success.","notice":"Prepares ownership pass.     * Can only be called by current owner.","signature":"changeContractOwnership(address)","signatureHash":"557f4bc9"},{"constant":true,"inputs":[],"name":"pendingContractOwner","payable":false,"stateMutability":"view","type":"function","signature":"pendingContractOwner()","signatureHash":"5aa77d3c"},{"constant":true,"inputs":[],"name":"getActivePolls","payable":false,"stateMutability":"view","type":"function","signature":"getActivePolls()","signatureHash":"63a9492f"},{"constant":false,"inputs":[{"name":"_eventsHistory","type":"address"}],"name":"setEventsHistory","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"setEventsHistory(address)","signatureHash":"6521afd7"},{"constant":false,"inputs":[{"name":"_contractsManager","type":"address","description":"contracts manager. 0x0 is not allowed."}],"name":"setContractsManager","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Setter for ContractsManager. Force overrides currect manager.","signature":"setContractsManager(address)","signatureHash":"71d3b573"},{"constant":false,"inputs":[],"name":"destroy","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"destroy()","signatureHash":"83197ef0"},{"constant":false,"inputs":[{"name":"pollId","type":"uint256"}],"name":"emitPollEnded","outputs":[],"payable":false,"stateMutability":"nonpayable","type":"function","signature":"emitPollEnded(uint256)","signatureHash":"8d65e2b5"},{"constant":true,"inputs":[{"name":"_id","type":"uint256"}],"name":"getOptionsVotesStatisticForPoll","payable":false,"stateMutability":"view","type":"function","signature":"getOptionsVotesStatisticForPoll(uint256)","signatureHash":"9b602409"},{"constant":true,"inputs":[{"name":"_id","type":"uint256"}],"name":"getIpfsHashesFromPoll","payable":false,"stateMutability":"view","type":"function","signature":"getIpfsHashesFromPoll(uint256)","signatureHash":"9d51b906"},{"constant":true,"inputs":[{"name":"_id","type":"uint256"}],"name":"getOptionsForPoll","payable":false,"stateMutability":"view","type":"function","signature":"getOptionsForPoll(uint256)","signatureHash":"a6482e79"},{"constant":false,"inputs":[{"name":"_to","type":"address","description":"the next contract owner"}],"name":"transferContractOwnership","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"nonpayable","type":"function","details":"Direct ownership pass without change/claim pattern. Can be invoked only by current contract owner","return":"`true` if success, `false` otherwise","signature":"transferContractOwnership(address)","signatureHash":"a843c51f"},{"constant":true,"inputs":[],"name":"getActivePollsCount","payable":false,"stateMutability":"view","type":"function","signature":"getActivePollsCount()","signatureHash":"a9581703"},{"constant":true,"inputs":[],"name":"getInactivePolls","payable":false,"stateMutability":"view","type":"function","signature":"getInactivePolls()","signatureHash":"cd602332"},{"constant":true,"inputs":[],"name":"contractOwner","payable":false,"stateMutability":"view","type":"function","signature":"contractOwner()","signatureHash":"ce606ee0"},{"constant":false,"inputs":[{"name":"tokens","type":"address[]"},{"name":"_to","type":"address"}],"name":"withdrawnTokens","payable":false,"stateMutability":"nonpayable","type":"function","signature":"withdrawnTokens(address[],address)","signatureHash":"d8f9659b"},{"constant":true,"inputs":[{"name":"_pollId","type":"uint256"}],"name":"checkPollIsActive","payable":false,"stateMutability":"view","type":"function","signature":"checkPollIsActive(uint256)","signatureHash":"eaffbbb6"},{"constant":true,"inputs":[{"name":"key","type":"address"}],"name":"isAuthorized","payable":false,"stateMutability":"view","type":"function","signature":"isAuthorized(address)","signatureHash":"fe9fbb80"},{"constant":true,"inputs":[],"name":"getEventsHistory","payable":false,"stateMutability":"view","type":"function","signature":"getEventsHistory()","signatureHash":"fff10aba"},{"inputs":[{"name":"_store","type":"address"},{"name":"_crate","type":"bytes32"}],"payable":false,"stateMutability":"nonpayable","type":"constructor"},{"payable":false,"stateMutability":"nonpayable","type":"fallback","inputs":[]},{"anonymous":false,"inputs":[{"indexed":false,"name":"pollId","type":"uint256"}],"name":"PollCreated","type":"event","signature":"PollCreated(uint256)","signatureHash":"ab0309b6"},{"anonymous":false,"inputs":[{"indexed":false,"name":"pollId","type":"uint256"}],"name":"PollDeleted","type":"event","signature":"PollDeleted(uint256)","signatureHash":"e66ba7d1"},{"anonymous":false,"inputs":[{"indexed":false,"name":"pollId","type":"uint256"}],"name":"PollEnded","type":"event","signature":"PollEnded(uint256)","signatureHash":"14d4cfc1"},{"anonymous":false,"inputs":[{"indexed":false,"name":"pollId","type":"uint256"}],"name":"PollActivated","type":"event","signature":"PollActivated(uint256)","signatureHash":"4d863a7b"},{"anonymous":false,"inputs":[{"indexed":false,"name":"choice","type":"uint256"},{"indexed":false,"name":"pollId","type":"uint256"}],"name":"VoteCreated","type":"event","signature":"VoteCreated(uint256,uint256)","signatureHash":"f558b17e"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"}],"name":"SharesPercentUpdated","type":"event","signature":"SharesPercentUpdated(address)","signatureHash":"22fe0086"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"},{"indexed":false,"name":"hash","type":"bytes32"},{"indexed":false,"name":"count","type":"uint256"}],"name":"IpfsHashToPollAdded","type":"event","signature":"IpfsHashToPollAdded(uint256,bytes32,uint256)","signatureHash":"a5c4447e"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"},{"indexed":false,"name":"option","type":"bytes32"},{"indexed":false,"name":"count","type":"uint256"}],"name":"OptionAdded","type":"event","signature":"OptionAdded(uint256,bytes32,uint256)","signatureHash":"b6f1f68e"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"},{"indexed":false,"name":"option","type":"bytes32"},{"indexed":false,"name":"count","type":"uint256"}],"name":"OptionRemoved","type":"event","signature":"OptionRemoved(uint256,bytes32,uint256)","signatureHash":"a410cc9c"},{"anonymous":false,"inputs":[{"indexed":true,"name":"id","type":"uint256"}],"name":"PollDetailsUpdated","type":"event","signature":"PollDetailsUpdated(uint256)","signatureHash":"9514e96b"},{"anonymous":false,"inputs":[{"indexed":true,"name":"self","type":"address"},{"indexed":false,"name":"errorCode","type":"uint256"}],"name":"Error","type":"event","signature":"Error(address,uint256)","signatureHash":"9cf38cf2"}]}
