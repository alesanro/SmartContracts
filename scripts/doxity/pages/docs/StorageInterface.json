{"fileName":"/contracts/core/storage/StorageInterface.sol","name":"StorageInterface","abi":[{"constant":true,"inputs":[{"name":"self","type":"bytes32[]"}],"name":"toAddresses","outputs":[{"name":"","type":"address[]"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"self","type":"bool"}],"name":"toBytes32","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"self","type":"bytes32"}],"name":"toBool","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"self","type":"bytes32[]"}],"name":"toUInt","outputs":[{"name":"","type":"uint256[]"}],"payable":false,"stateMutability":"view","type":"function"}],"source":"pragma solidity ^0.4.11;\n\nimport './Storage.sol';\n\nlibrary StorageInterface {\n    struct Config {\n        Storage store;\n        bytes32 crate;\n    }\n\n    struct UInt {\n        bytes32 id;\n    }\n\n    struct Int {\n        bytes32 id;\n    }\n\n    struct Address {\n        bytes32 id;\n    }\n\n    struct Bool {\n        bytes32 id;\n    }\n\n    struct Bytes32 {\n        bytes32 id;\n    }\n\n    struct Mapping {\n        bytes32 id;\n    }\n\n    struct UIntBoolMapping {\n        Bool innerMapping;\n    }\n\n    struct UIntUIntMapping {\n        Mapping innerMapping;\n    }\n\n    struct UIntBytes32Mapping {\n        Mapping innerMapping;\n    }\n\n    struct UIntAddressMapping {\n        Mapping innerMapping;\n    }\n\n    struct AddressUIntMapping {\n        Mapping innerMapping;\n    }\n\n    struct AddressBytes32Mapping {\n        Mapping innerMapping;\n    }\n\n    struct AddressAddressMapping {\n        Mapping innerMapping;\n    }\n\n    struct Bytes32UIntMapping {\n        Mapping innerMapping;\n    }\n\n    struct Bytes32Bytes32Mapping {\n        Mapping innerMapping;\n    }\n\n    struct Bytes32AddressMapping {\n        Mapping innerMapping;\n    }\n\n    struct AddressAddressUIntMapping {\n        Mapping innerMapping;\n    }\n\n    struct AddressUIntUIntMapping {\n        Mapping innerMapping;\n    }\n\n    struct UIntAddressUIntMapping {\n        Mapping innerMapping;\n    }\n\n    struct UIntUIntAddressMapping {\n        Mapping innerMapping;\n    }\n\n    struct UIntUIntBytes32Mapping {\n        Mapping innerMapping;\n    }\n\n    struct UIntUIntUIntMapping {\n        Mapping innerMapping;\n    }\n\n    struct UIntAddressAddressBoolMapping {\n        Bool innerMapping;\n    }\n\n    bytes32 constant SET_IDENTIFIER = \"set\";\n\n    struct Set {\n        UInt count;\n        Mapping indexes;\n        Mapping values;\n    }\n\n    struct AddressesSet {\n        Set innerSet;\n    }\n\n    struct CounterSet {\n        Set innerSet;\n    }\n\n    bytes32 constant ORDERED_SET_IDENTIFIER = \"ordered_set\";\n\n    struct OrderedSet {\n        UInt count;\n        Bytes32 first;\n        Bytes32 last;\n        Mapping nextValues;\n        Mapping previousValues;\n    }\n\n    struct OrderedUIntSet {\n        OrderedSet innerSet;\n    }\n\n    struct OrderedAddressesSet {\n        OrderedSet innerSet;\n    }\n\n    struct Bytes32SetMapping {\n        Set innerMapping;\n    }\n\n    struct AddressesSetMapping {\n        Bytes32SetMapping innerMapping;\n    }\n\n    struct UIntSetMapping {\n        Bytes32SetMapping innerMapping;\n    }\n\n    struct Bytes32OrderedSetMapping {\n        OrderedSet innerMapping;\n    }\n\n    struct UIntOrderedSetMapping {\n        Bytes32OrderedSetMapping innerMapping;\n    }\n\n    struct AddressOrderedSetMapping {\n        Bytes32OrderedSetMapping innerMapping;\n    }\n\n    // Can't use modifier due to a Solidity bug.\n    function sanityCheck(bytes32 _currentId, bytes32 _newId) internal {\n        if (_currentId != 0 || _newId == 0) {\n            throw;\n        }\n    }\n\n    function init(Config storage self, Storage _store, bytes32 _crate) internal {\n        self.store = _store;\n        self.crate = _crate;\n    }\n\n    function init(UInt storage self, bytes32 _id) internal {\n        sanityCheck(self.id, _id);\n        self.id = _id;\n    }\n\n    function init(Int storage self, bytes32 _id) internal {\n        sanityCheck(self.id, _id);\n        self.id = _id;\n    }\n\n    function init(Address storage self, bytes32 _id) internal {\n        sanityCheck(self.id, _id);\n        self.id = _id;\n    }\n\n    function init(Bool storage self, bytes32 _id) internal {\n        sanityCheck(self.id, _id);\n        self.id = _id;\n    }\n\n    function init(Bytes32 storage self, bytes32 _id) internal {\n        sanityCheck(self.id, _id);\n        self.id = _id;\n    }\n\n    function init(Mapping storage self, bytes32 _id) internal {\n        sanityCheck(self.id, _id);\n        self.id = _id;\n    }\n\n    function init(UIntAddressMapping storage self, bytes32 _id) internal {\n        init(self.innerMapping, _id);\n    }\n\n    function init(UIntUIntMapping storage self, bytes32 _id) internal {\n        init(self.innerMapping, _id);\n    }\n\n    function init(UIntBoolMapping storage self, bytes32 _id) internal {\n        init(self.innerMapping, _id);\n    }\n\n    function init(UIntBytes32Mapping storage self, bytes32 _id) internal {\n        init(self.innerMapping, _id);\n    }\n\n    function init(AddressAddressUIntMapping storage self, bytes32 _id) internal {\n        init(self.innerMapping, _id);\n    }\n\n    function init(AddressUIntUIntMapping storage self, bytes32 _id) internal {\n        init(self.innerMapping, _id);\n    }\n\n    function init(UIntAddressUIntMapping storage self, bytes32 _id) internal {\n        init(self.innerMapping, _id);\n    }\n\n    function init(UIntUIntAddressMapping storage self, bytes32 _id) internal {\n        init(self.innerMapping, _id);\n    }\n\n    function init(UIntUIntBytes32Mapping storage self, bytes32 _id) internal {\n        init(self.innerMapping, _id);\n    }\n\n    function init(UIntUIntUIntMapping storage self, bytes32 _id) internal {\n        init(self.innerMapping, _id);\n    }\n\n    function init(UIntAddressAddressBoolMapping storage self, bytes32 _id) internal {\n        init(self.innerMapping, _id);\n    }\n\n    function init(AddressUIntMapping storage self, bytes32 _id) internal {\n        init(self.innerMapping, _id);\n    }\n\n    function init(AddressBytes32Mapping storage self, bytes32 _id) internal {\n        init(self.innerMapping, _id);\n    }\n\n    function init(AddressAddressMapping  storage self, bytes32 _id) internal {\n        init(self.innerMapping, _id);\n    }\n\n    function init(Bytes32UIntMapping storage self, bytes32 _id) internal {\n        init(self.innerMapping, _id);\n    }\n\n    function init(Bytes32Bytes32Mapping storage self, bytes32 _id) internal {\n        init(self.innerMapping, _id);\n    }\n\n    function init(Bytes32AddressMapping  storage self, bytes32 _id) internal {\n        init(self.innerMapping, _id);\n    }\n\n    function init(Set storage self, bytes32 _id) internal {\n        init(self.count, sha3(_id, 'count'));\n        init(self.indexes, sha3(_id, 'indexes'));\n        init(self.values, sha3(_id, 'values'));\n    }\n\n    function init(AddressesSet storage self, bytes32 _id) internal {\n        init(self.innerSet, _id);\n    }\n\n    function init(CounterSet storage self, bytes32 _id) internal {\n        init(self.innerSet, _id);\n    }\n\n    function init(OrderedSet storage self, bytes32 _id) internal {\n        init(self.count, sha3(_id, 'uint/count'));\n        init(self.first, sha3(_id, 'uint/first'));\n        init(self.last, sha3(_id, 'uint/last'));\n        init(self.nextValues, sha3(_id, 'uint/next'));\n        init(self.previousValues, sha3(_id, 'uint/prev'));\n    }\n\n    function init(OrderedUIntSet storage self, bytes32 _id) internal {\n        init(self.innerSet, _id);\n    }\n\n    function init(OrderedAddressesSet storage self, bytes32 _id) internal {\n        init(self.innerSet, _id);\n    }\n\n    function init(Bytes32SetMapping storage self, bytes32 _id) internal {\n        init(self.innerMapping, _id);\n    }\n\n    function init(AddressesSetMapping storage self, bytes32 _id) internal {\n        init(self.innerMapping, _id);\n    }\n\n    function init(UIntSetMapping storage self, bytes32 _id) internal {\n        init(self.innerMapping, _id);\n    }\n\n    function init(Bytes32OrderedSetMapping storage self, bytes32 _id) internal {\n        init(self.innerMapping, _id);\n    }\n\n    function init(UIntOrderedSetMapping storage self, bytes32 _id) internal {\n        init(self.innerMapping, _id);\n    }\n\n    function init(AddressOrderedSetMapping storage self, bytes32 _id) internal {\n        init(self.innerMapping, _id);\n    }\n\n    /** `set` operation */\n\n    function set(Config storage self, UInt storage item, uint _value) internal {\n        self.store.setUInt(self.crate, item.id, _value);\n    }\n\n    function set(Config storage self, UInt storage item, bytes32 _salt, uint _value) internal {\n        self.store.setUInt(self.crate, sha3(item.id, _salt), _value);\n    }\n\n    function set(Config storage self, Int storage item, int _value) internal {\n        self.store.setInt(self.crate, item.id, _value);\n    }\n\n    function set(Config storage self, Int storage item, bytes32 _salt, int _value) internal {\n        self.store.setInt(self.crate, sha3(item.id, _salt), _value);\n    }\n\n    function set(Config storage self, Address storage item, address _value) internal {\n        self.store.setAddress(self.crate, item.id, _value);\n    }\n\n    function set(Config storage self, Address storage item, bytes32 _salt, address _value) internal {\n        self.store.setAddress(self.crate, sha3(item.id, _salt), _value);\n    }\n\n    function set(Config storage self, Bool storage item, bool _value) internal {\n        self.store.setBool(self.crate, item.id, _value);\n    }\n\n    function set(Config storage self, Bool storage item, bytes32 _salt, bool _value) internal {\n        self.store.setBool(self.crate, sha3(item.id, _salt), _value);\n    }\n\n    function set(Config storage self, Bytes32 storage item, bytes32 _value) internal {\n        self.store.setBytes32(self.crate, item.id, _value);\n    }\n\n    function set(Config storage self, Bytes32 storage item, bytes32 _salt, bytes32 _value) internal {\n        self.store.setBytes32(self.crate, sha3(item.id, _salt), _value);\n    }\n\n    function set(Config storage self, Mapping storage item, uint _key, uint _value) internal {\n        self.store.setUInt(self.crate, sha3(item.id, _key), _value);\n    }\n\n    function set(Config storage self, Mapping storage item, bytes32 _key, bytes32 _value) internal {\n        self.store.setBytes32(self.crate, sha3(item.id, _key), _value);\n    }\n\n    function set(Config storage self, Mapping storage item, bytes32 _key, bytes32 _key2, bytes32 _value) internal {\n        set(self, item, sha3(_key, _key2), _value);\n    }\n\n    function set(Config storage self, Mapping storage item, bytes32 _key, bytes32 _key2, bytes32 _key3, bytes32 _value) internal {\n        set(self, item, sha3(_key, _key2, _key3), _value);\n    }\n\n    function set(Config storage self, Bool storage item, bytes32 _key, bytes32 _key2, bytes32 _key3, bool _value) internal {\n        set(self, item, sha3(_key, _key2, _key3), _value);\n    }\n\n    function set(Config storage self, UIntAddressMapping storage item, uint _key, address _value) internal {\n        set(self, item.innerMapping, bytes32(_key), bytes32(_value));\n    }\n\n    function set(Config storage self, UIntUIntMapping storage item, uint _key, uint _value) internal {\n        set(self, item.innerMapping, bytes32(_key), bytes32(_value));\n    }\n\n    function set(Config storage self, UIntBoolMapping storage item, uint _key, bool _value) internal {\n        set(self, item.innerMapping, bytes32(_key), _value);\n    }\n\n    function set(Config storage self, UIntBytes32Mapping storage item, uint _key, bytes32 _value) internal {\n        set(self, item.innerMapping, bytes32(_key), _value);\n    }\n\n    function set(Config storage self, Bytes32UIntMapping storage item, bytes32 _key, uint _value) internal {\n        set(self, item.innerMapping, _key, bytes32(_value));\n    }\n\n    function set(Config storage self, Bytes32Bytes32Mapping storage item, bytes32 _key, bytes32 _value) internal {\n        set(self, item.innerMapping, _key, _value);\n    }\n\n    function set(Config storage self, Bytes32AddressMapping storage item, bytes32 _key, address _value) internal {\n        set(self, item.innerMapping, _key, bytes32(_value));\n    }\n\n    function set(Config storage self, AddressUIntMapping storage item, address _key, uint _value) internal {\n        set(self, item.innerMapping, bytes32(_key), bytes32(_value));\n    }\n\n    function set(Config storage self, AddressBytes32Mapping storage item, address _key, bytes32 _value) internal {\n        set(self, item.innerMapping, bytes32(_key), _value);\n    }\n\n    function set(Config storage self, AddressAddressMapping storage item, address _key, address _value) internal {\n        set(self, item.innerMapping, bytes32(_key), bytes32(_value));\n    }\n\n    function set(Config storage self, AddressAddressUIntMapping storage item, address _key, address _key2, uint _value) internal {\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_value));\n    }\n\n    function set(Config storage self, AddressUIntUIntMapping storage item, address _key, uint _key2, uint _value) internal {\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_value));\n    }\n\n    function set(Config storage self, UIntAddressUIntMapping storage item, uint _key, address _key2, uint _value) internal {\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_value));\n    }\n\n    function set(Config storage self, UIntUIntAddressMapping storage item, uint _key, uint _key2, address _value) internal {\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_value));\n    }\n\n    function set(Config storage self, UIntUIntBytes32Mapping storage item, uint _key, uint _key2, bytes32 _value) internal {\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), _value);\n    }\n\n    function set(Config storage self, UIntUIntUIntMapping storage item, uint _key, uint _key2, uint _value) internal {\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_value));\n    }\n\n    function set(Config storage self, UIntAddressAddressBoolMapping storage item, uint _key, address _key2, address _key3, bool _value) internal {\n        set(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_key3), _value);\n    }\n\n    function set(Config storage self, Bytes32SetMapping storage item, bytes32 _key, Set storage _value) internal {\n        // TODO copy _value to this storage with updated keys\n        throw;\n    }\n\n    function set(Config storage self, AddressesSetMapping storage item, bytes32 _key, AddressesSet storage _value) internal {\n        set(self, item.innerMapping, _key, _value.innerSet);\n    }\n\n    function set(Config storage self, UIntSetMapping storage item, bytes32 _key, CounterSet storage _value) internal {\n        set(self, item.innerMapping, _key, _value.innerSet);\n    }\n\n    function set(Config storage self, Bytes32OrderedSetMapping storage item, bytes32 _key, OrderedSet storage _value) internal {\n        // TODO copy _value to this storage with updated keys\n        throw;\n    }\n\n    function set(Config storage self, UIntOrderedSetMapping storage item, bytes32 _key, OrderedUIntSet storage _value) internal {\n        set(self, item.innerMapping, _key, _value.innerSet);\n    }\n\n    function set(Config storage self, AddressOrderedSetMapping storage item, bytes32 _key, OrderedAddressesSet storage _value) internal {\n        set(self, item.innerMapping, _key, _value.innerSet);\n    }\n\n\n    /** `add` operation */\n\n    function add(Config storage self, Set storage item, bytes32 _value) internal {\n        add(self, item, SET_IDENTIFIER, _value);\n    }\n\n    function add(Config storage self, Set storage item, bytes32 _salt, bytes32 _value) private {\n        if (includes(self, item, _salt, _value)) {\n            return;\n        }\n        uint newCount = count(self, item, _salt) + 1;\n        set(self, item.values, _salt, bytes32(newCount), _value);\n        set(self, item.indexes, _salt, _value, bytes32(newCount));\n        set(self, item.count, _salt, newCount);\n    }\n\n    function add(Config storage self, AddressesSet storage item, address _value) internal {\n        add(self, item.innerSet, bytes32(_value));\n    }\n\n    function add(Config storage self, CounterSet storage item) internal {\n        add(self, item.innerSet, bytes32(count(self,item)));\n    }\n\n    function add(Config storage self, OrderedSet storage item, bytes32 _value) internal {\n        add(self, item, ORDERED_SET_IDENTIFIER, _value);\n    }\n\n    function add(Config storage self, OrderedSet storage item, bytes32 _salt, bytes32 _value) private {\n        if (_value == 0x0) { throw; }\n\n        if (includes(self, item, _salt, _value)) { return; }\n\n        if (count(self, item, _salt) == 0x0) {\n            set(self, item.first, _salt, _value);\n        }\n\n        if (get(self, item.last, _salt) != 0x0) {\n            _setOrderedSetLink(self, item.nextValues, _salt, get(self, item.last, _salt), _value);\n            _setOrderedSetLink(self, item.previousValues, _salt, _value, get(self, item.last, _salt));\n        }\n\n        _setOrderedSetLink(self, item.nextValues, _salt,  _value, 0x0);\n        set(self, item.last, _salt, _value);\n        set(self, item.count, _salt, get(self, item.count, _salt) + 1);\n    }\n\n    function add(Config storage self, Bytes32SetMapping storage item, bytes32 _key, bytes32 _value) internal {\n        add(self, item.innerMapping, _key, _value);\n    }\n\n    function add(Config storage self, AddressesSetMapping storage item, bytes32 _key, address _value) internal {\n        add(self, item.innerMapping, _key, bytes32(_value));\n    }\n\n    function add(Config storage self, UIntSetMapping storage item, bytes32 _key, uint _value) internal {\n        add(self, item.innerMapping, _key, bytes32(_value));\n    }\n\n    function add(Config storage self, Bytes32OrderedSetMapping storage item, bytes32 _key, bytes32 _value) internal {\n        add(self, item.innerMapping, _key, _value);\n    }\n\n    function add(Config storage self, UIntOrderedSetMapping storage item, bytes32 _key, uint _value) internal {\n        add(self, item.innerMapping, _key, bytes32(_value));\n    }\n\n    function add(Config storage self, AddressOrderedSetMapping storage item, bytes32 _key, address _value) internal {\n        add(self, item.innerMapping, _key, bytes32(_value));\n    }\n\n    function add(Config storage self, OrderedUIntSet storage item, uint _value) internal {\n        add(self, item.innerSet, bytes32(_value));\n    }\n\n    function add(Config storage self, OrderedAddressesSet storage item, address _value) internal {\n        add(self, item.innerSet, bytes32(_value));\n    }\n\n    function set(Config storage self, Set storage item, bytes32 _oldValue, bytes32 _newValue) internal {\n        set(self, item, SET_IDENTIFIER, _oldValue, _newValue);\n    }\n\n    function set(Config storage self, Set storage item, bytes32 _salt, bytes32 _oldValue, bytes32 _newValue) private {\n        if (!includes(self, item, _salt, _oldValue)) {\n            return;\n        }\n        uint index = uint(get(self, item.indexes, _salt, _oldValue));\n        set(self, item.values, _salt, bytes32(index), _newValue);\n        set(self, item.indexes, _salt, _newValue, bytes32(index));\n        set(self, item.indexes, _salt, _oldValue, bytes32(0));\n    }\n\n    function set(Config storage self, AddressesSet storage item, address _oldValue, address _newValue) internal {\n        set(self, item.innerSet, bytes32(_oldValue), bytes32(_newValue));\n    }\n\n    /** `remove` operation */\n\n    function remove(Config storage self, Set storage item, bytes32 _value) internal {\n        remove(self, item, SET_IDENTIFIER, _value);\n    }\n\n    function remove(Config storage self, Set storage item, bytes32 _salt, bytes32 _value) private {\n        if (!includes(self, item, _salt, _value)) {\n            return;\n        }\n        uint lastIndex = count(self, item, _salt);\n        bytes32 lastValue = get(self, item.values, _salt, bytes32(lastIndex));\n        uint index = uint(get(self, item.indexes, _salt, _value));\n        if (index < lastIndex) {\n            set(self, item.indexes, _salt, lastValue, bytes32(index));\n            set(self, item.values, _salt, bytes32(index), lastValue);\n        }\n        set(self, item.indexes, _salt, _value, bytes32(0));\n        set(self, item.values, _salt, bytes32(lastIndex), bytes32(0));\n        set(self, item.count, _salt, lastIndex - 1);\n    }\n\n    function remove(Config storage self, AddressesSet storage item, address _value) internal {\n        remove(self, item.innerSet, bytes32(_value));\n    }\n\n    function remove(Config storage self, CounterSet storage item, uint _value) internal {\n        remove(self, item.innerSet, bytes32(_value));\n    }\n\n    function remove(Config storage self, OrderedSet storage item, bytes32 _value) internal {\n        remove(self, item, ORDERED_SET_IDENTIFIER, _value);\n    }\n\n    function remove(Config storage self, OrderedSet storage item, bytes32 _salt, bytes32 _value) private {\n        if (!includes(self, item, _salt, _value)) { return; }\n\n        _setOrderedSetLink(self, item.nextValues, _salt, get(self, item.previousValues, _salt, _value), get(self, item.nextValues, _salt, _value));\n        _setOrderedSetLink(self, item.previousValues, _salt, get(self, item.nextValues, _salt, _value), get(self, item.previousValues, _salt, _value));\n\n        if (_value == get(self, item.first, _salt)) {\n            set(self, item.first, _salt, get(self, item.nextValues, _salt, _value));\n        }\n\n        if (_value == get(self, item.last, _salt)) {\n            set(self, item.last, _salt, get(self, item.previousValues, _salt, _value));\n        }\n\n        _deleteOrderedSetLink(self, item.nextValues, _salt, _value);\n        _deleteOrderedSetLink(self, item.previousValues, _salt, _value);\n\n        set(self, item.count, _salt, get(self, item.count, _salt) - 1);\n    }\n\n    function remove(Config storage self, OrderedUIntSet storage item, uint _value) internal {\n        remove(self, item.innerSet, bytes32(_value));\n    }\n\n    function remove(Config storage self, OrderedAddressesSet storage item, address _value) internal {\n        remove(self, item.innerSet, bytes32(_value));\n    }\n\n    function remove(Config storage self, Bytes32SetMapping storage item, bytes32 _key, bytes32 _value) internal {\n        remove(self, item.innerMapping, _key, _value);\n    }\n\n    function remove(Config storage self, AddressesSetMapping storage item, bytes32 _key, address _value) internal {\n        remove(self, item.innerMapping, _key, bytes32(_value));\n    }\n\n    function remove(Config storage self, UIntSetMapping storage item, bytes32 _key, uint _value) internal {\n        remove(self, item.innerMapping, _key, bytes32(_value));\n    }\n\n    function remove(Config storage self, Bytes32OrderedSetMapping storage item, bytes32 _key, bytes32 _value) internal {\n        remove(self, item.innerMapping, _key, _value);\n    }\n\n    function remove(Config storage self, UIntOrderedSetMapping storage item, bytes32 _key, uint _value) internal {\n        remove(self, item.innerMapping, _key, bytes32(_value));\n    }\n\n    function remove(Config storage self, AddressOrderedSetMapping storage item, bytes32 _key, address _value) internal {\n        remove(self, item.innerMapping, _key, bytes32(_value));\n    }\n\n    /** `get` operation */\n\n    function get(Config storage self, UInt storage item) internal constant returns(uint) {\n        return self.store.getUInt(self.crate, item.id);\n    }\n\n    function get(Config storage self, UInt storage item, bytes32 salt) internal constant returns(uint) {\n        return self.store.getUInt(self.crate, sha3(item.id, salt));\n    }\n\n    function get(Config storage self, Int storage item) internal constant returns(int) {\n        return self.store.getInt(self.crate, item.id);\n    }\n\n    function get(Config storage self, Int storage item, bytes32 salt) internal constant returns(int) {\n        return self.store.getInt(self.crate, sha3(item.id, salt));\n    }\n\n    function get(Config storage self, Address storage item) internal constant returns(address) {\n        return self.store.getAddress(self.crate, item.id);\n    }\n\n    function get(Config storage self, Address storage item, bytes32 salt) internal constant returns(address) {\n        return self.store.getAddress(self.crate, sha3(item.id, salt));\n    }\n\n    function get(Config storage self, Bool storage item) internal constant returns(bool) {\n        return self.store.getBool(self.crate, item.id);\n    }\n\n    function get(Config storage self, Bool storage item, bytes32 salt) internal constant returns(bool) {\n        return self.store.getBool(self.crate, sha3(item.id, salt));\n    }\n\n    function get(Config storage self, Bytes32 storage item) internal constant returns(bytes32) {\n        return self.store.getBytes32(self.crate, item.id);\n    }\n\n    function get(Config storage self, Bytes32 storage item, bytes32 salt) internal constant returns(bytes32) {\n        return self.store.getBytes32(self.crate, sha3(item.id, salt));\n    }\n\n    function get(Config storage self, Mapping storage item, uint _key) internal constant returns(uint) {\n        return self.store.getUInt(self.crate, sha3(item.id, _key));\n    }\n\n    function get(Config storage self, Mapping storage item, bytes32 _key) internal constant returns(bytes32) {\n        return self.store.getBytes32(self.crate, sha3(item.id, _key));\n    }\n\n    function get(Config storage self, Mapping storage item, bytes32 _key, bytes32 _key2) internal constant returns(bytes32) {\n        return get(self, item, sha3(_key, _key2));\n    }\n\n    function get(Config storage self, Mapping storage item, bytes32 _key, bytes32 _key2, bytes32 _key3) internal constant returns(bytes32) {\n        return get(self, item, sha3(_key, _key2, _key3));\n    }\n\n    function get(Config storage self, Bool storage item, bytes32 _key, bytes32 _key2, bytes32 _key3) internal constant returns(bool) {\n        return get(self, item, sha3(_key, _key2, _key3));\n    }\n\n    function get(Config storage self, UIntBoolMapping storage item, uint _key) internal constant returns(bool) {\n        return get(self, item.innerMapping, bytes32(_key));\n    }\n\n    function get(Config storage self, UIntUIntMapping storage item, uint _key) internal constant returns(uint) {\n        return uint(get(self, item.innerMapping, bytes32(_key)));\n    }\n\n    function get(Config storage self, UIntAddressMapping storage item, uint _key) internal constant returns(address) {\n        return address(get(self, item.innerMapping, bytes32(_key)));\n    }\n\n    function get(Config storage self, Bytes32UIntMapping storage item, bytes32 _key) internal constant returns(uint) {\n        return uint(get(self, item.innerMapping, _key));\n    }\n\n    function get(Config storage self, Bytes32AddressMapping storage item, bytes32 _key) internal constant returns(address) {\n        return address(get(self, item.innerMapping, _key));\n    }\n\n    function get(Config storage self, Bytes32Bytes32Mapping storage item, bytes32 _key) internal constant returns(bytes32) {\n        return get(self, item.innerMapping, _key);\n    }\n\n    function get(Config storage self, UIntBytes32Mapping storage item, uint _key) internal constant returns(bytes32) {\n        return get(self, item.innerMapping, bytes32(_key));\n    }\n\n    function get(Config storage self, AddressUIntMapping storage item, address _key) internal constant returns(uint) {\n        return uint(get(self, item.innerMapping, bytes32(_key)));\n    }\n\n    function get(Config storage self, AddressAddressMapping storage item, address _key) internal constant returns(address) {\n        return address(get(self, item.innerMapping, bytes32(_key)));\n    }\n\n    function get(Config storage self, AddressBytes32Mapping storage item, address _key) internal constant returns(bytes32) {\n        return get(self, item.innerMapping, bytes32(_key));\n    }\n\n    function get(Config storage self, UIntUIntBytes32Mapping storage item, uint _key, uint _key2) internal constant returns(bytes32) {\n        return get(self, item.innerMapping, bytes32(_key), bytes32(_key2));\n    }\n\n    function get(Config storage self, UIntUIntAddressMapping storage item, uint _key, uint _key2) internal constant returns(address) {\n        return address(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\n    }\n\n    function get(Config storage self, UIntUIntUIntMapping storage item, uint _key, uint _key2) internal constant returns(uint) {\n        return uint(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\n    }\n\n    function get(Config storage self, AddressAddressUIntMapping storage item, address _key, address _key2) internal constant returns(uint) {\n        return uint(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\n    }\n\n    function get(Config storage self, AddressUIntUIntMapping storage item, address _key, uint _key2) internal constant returns(uint) {\n        return uint(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\n    }\n\n    function get(Config storage self, UIntAddressUIntMapping storage item, uint _key, address _key2) internal constant returns(uint) {\n        return uint(get(self, item.innerMapping, bytes32(_key), bytes32(_key2)));\n    }\n\n    function get(Config storage self, UIntAddressAddressBoolMapping storage item, uint _key, address _key2, address _key3) internal constant returns(bool) {\n        return get(self, item.innerMapping, bytes32(_key), bytes32(_key2), bytes32(_key3));\n    }\n\n    /** `includes` operation */\n\n    function includes(Config storage self, Set storage item, bytes32 _value) internal constant returns(bool) {\n        return includes(self, item, SET_IDENTIFIER, _value);\n    }\n\n    function includes(Config storage self, Set storage item, bytes32 _salt, bytes32 _value) internal constant returns(bool) {\n        return get(self, item.indexes, _salt, _value) != 0;\n    }\n\n    function includes(Config storage self, AddressesSet storage item, address _value) internal constant returns(bool) {\n        return includes(self, item.innerSet, bytes32(_value));\n    }\n\n    function includes(Config storage self, CounterSet storage item, uint _value) internal constant returns(bool) {\n        return includes(self, item.innerSet, bytes32(_value));\n    }\n\n    function includes(Config storage self, OrderedSet storage item, bytes32 _value) internal constant returns(bool) {\n        return includes(self, item, ORDERED_SET_IDENTIFIER, _value);\n    }\n\n    function includes(Config storage self, OrderedSet storage item, bytes32 _salt, bytes32 _value) private constant returns(bool) {\n        return _value != 0x0 && (get(self, item.nextValues, _salt, _value) != 0x0 || get(self, item.last, _salt) == _value);\n    }\n\n    function includes(Config storage self, OrderedUIntSet storage item, uint _value) internal constant returns(bool) {\n        return includes(self, item.innerSet, bytes32(_value));\n    }\n\n    function includes(Config storage self, OrderedAddressesSet storage item, address _value) internal constant returns(bool) {\n        return includes(self, item.innerSet, bytes32(_value));\n    }\n\n    function includes(Config storage self, Bytes32SetMapping storage item, bytes32 _key, bytes32 _value) internal constant returns(bool) {\n        return includes(self, item.innerMapping, _key, _value);\n    }\n\n    function includes(Config storage self, AddressesSetMapping storage item, bytes32 _key, address _value) internal constant returns(bool) {\n        return includes(self, item.innerMapping, _key, bytes32(_value));\n    }\n\n    function includes(Config storage self, UIntSetMapping storage item, bytes32 _key, uint _value) internal constant returns(bool) {\n        return includes(self, item.innerMapping, _key, bytes32(_value));\n    }\n\n    function includes(Config storage self, Bytes32OrderedSetMapping storage item, bytes32 _key, bytes32 _value) internal constant returns(bool) {\n        return includes(self, item.innerMapping, _key, _value);\n    }\n\n    function includes(Config storage self, UIntOrderedSetMapping storage item, bytes32 _key, uint _value) internal constant returns(bool) {\n        return includes(self, item.innerMapping, _key, bytes32(_value));\n    }\n\n    function includes(Config storage self, AddressOrderedSetMapping storage item, bytes32 _key, address _value) internal constant returns(bool) {\n        return includes(self, item.innerMapping, _key, bytes32(_value));\n    }\n\n    function getIndex(Config storage self, Set storage item, bytes32 _value) internal constant returns(uint) {\n        return getIndex(self, item, SET_IDENTIFIER, _value);\n    }\n\n    function getIndex(Config storage self, Set storage item, bytes32 _salt, bytes32 _value) private constant returns(uint) {\n        return uint(get(self, item.indexes, _salt, _value));\n    }\n\n    function getIndex(Config storage self, AddressesSet storage item, address _value) internal constant returns(uint) {\n        return getIndex(self, item.innerSet, bytes32(_value));\n    }\n\n    function getIndex(Config storage self, CounterSet storage item, uint _value) internal constant returns(uint) {\n        return getIndex(self, item.innerSet, bytes32(_value));\n    }\n\n    function getIndex(Config storage self, Bytes32SetMapping storage item, bytes32 _key, bytes32 _value) internal constant returns(uint) {\n        return getIndex(self, item.innerMapping, _key, _value);\n    }\n\n    function getIndex(Config storage self, AddressesSetMapping storage item, bytes32 _key, address _value) internal constant returns(uint) {\n        return getIndex(self, item.innerMapping, _key, bytes32(_value));\n    }\n\n    function getIndex(Config storage self, UIntSetMapping storage item, bytes32 _key, uint _value) internal constant returns(uint) {\n        return getIndex(self, item.innerMapping, _key, bytes32(_value));\n    }\n\n    /** `count` operation */\n\n    function count(Config storage self, Set storage item) internal constant returns(uint) {\n        return count(self, item, SET_IDENTIFIER);\n    }\n\n    function count(Config storage self, Set storage item, bytes32 _salt) internal constant returns(uint) {\n        return get(self, item.count, _salt);\n    }\n\n    function count(Config storage self, AddressesSet storage item) internal constant returns(uint) {\n        return count(self, item.innerSet);\n    }\n\n    function count(Config storage self, CounterSet storage item) internal constant returns(uint) {\n        return count(self, item.innerSet);\n    }\n\n    function count(Config storage self, OrderedSet storage item) internal constant returns(uint) {\n        return count(self, item, ORDERED_SET_IDENTIFIER);\n    }\n\n    function count(Config storage self, OrderedSet storage item, bytes32 _salt) private constant returns(uint) {\n        return get(self, item.count, _salt);\n    }\n\n    function count(Config storage self, OrderedUIntSet storage item) internal constant returns(uint) {\n        return count(self, item.innerSet);\n    }\n\n    function count(Config storage self, OrderedAddressesSet storage item) internal constant returns(uint) {\n        return count(self, item.innerSet);\n    }\n\n    function count(Config storage self, Bytes32SetMapping storage item, bytes32 _key) internal constant returns(uint) {\n        return count(self, item.innerMapping, _key);\n    }\n\n    function count(Config storage self, AddressesSetMapping storage item, bytes32 _key) internal constant returns(uint) {\n        return count(self, item.innerMapping, _key);\n    }\n\n    function count(Config storage self, UIntSetMapping storage item, bytes32 _key) internal constant returns(uint) {\n        return count(self, item.innerMapping, _key);\n    }\n\n    function count(Config storage self, Bytes32OrderedSetMapping storage item, bytes32 _key) internal constant returns(uint) {\n        return count(self, item.innerMapping, _key);\n    }\n\n    function count(Config storage self, UIntOrderedSetMapping storage item, bytes32 _key) internal constant returns(uint) {\n        return count(self, item.innerMapping, _key);\n    }\n\n    function count(Config storage self, AddressOrderedSetMapping storage item, bytes32 _key) internal constant returns(uint) {\n        return count(self, item.innerMapping, _key);\n    }\n\n    function get(Config storage self, Set storage item) internal constant returns(bytes32[] result) {\n        result = get(self, item, SET_IDENTIFIER);\n    }\n\n    function get(Config storage self, Set storage item, bytes32 _salt) private constant returns(bytes32[] result) {\n        uint valuesCount = count(self, item, _salt);\n        result = new bytes32[](valuesCount);\n        for (uint i = 0; i < valuesCount; i++) {\n            result[i] = get(self, item, _salt, i);\n        }\n    }\n\n    function get(Config storage self, AddressesSet storage item) internal constant returns(address[]) {\n        return toAddresses(get(self, item.innerSet));\n    }\n\n    function get(Config storage self, CounterSet storage item) internal constant returns(uint[]) {\n        return toUInt(get(self, item.innerSet));\n    }\n\n    function get(Config storage self, Bytes32SetMapping storage item, bytes32 _key) internal constant returns(bytes32[]) {\n        return get(self, item.innerMapping, _key);\n    }\n\n    function get(Config storage self, AddressesSetMapping storage item, bytes32 _key) internal constant returns(address[]) {\n        return toAddresses(get(self, item.innerMapping, _key));\n    }\n\n    function get(Config storage self, UIntSetMapping storage item, bytes32 _key) internal constant returns(uint[]) {\n        return toUInt(get(self, item.innerMapping, _key));\n    }\n\n    function get(Config storage self, Set storage item, uint _index) internal constant returns(bytes32) {\n        return get(self, item, SET_IDENTIFIER, _index);\n    }\n\n    function get(Config storage self, Set storage item, bytes32 _salt, uint _index) private constant returns(bytes32) {\n        return get(self, item.values, _salt, bytes32(_index+1));\n    }\n\n    function get(Config storage self, AddressesSet storage item, uint _index) internal constant returns(address) {\n        return address(get(self, item.innerSet, _index));\n    }\n\n    function get(Config storage self, CounterSet storage item, uint _index) internal constant returns(uint) {\n        return uint(get(self, item.innerSet, _index));\n    }\n\n    function get(Config storage self, Bytes32SetMapping storage item, bytes32 _key, uint _index) internal constant returns(bytes32) {\n        return get(self, item.innerMapping, _key, _index);\n    }\n\n    function get(Config storage self, AddressesSetMapping storage item, bytes32 _key, uint _index) internal constant returns(address) {\n        return address(get(self, item.innerMapping, _key, _index));\n    }\n\n    function get(Config storage self, UIntSetMapping storage item, bytes32 _key, uint _index) internal constant returns(uint) {\n        return uint(get(self, item.innerMapping, _key, _index));\n    }\n\n    function getNextValue(Config storage self, OrderedSet storage item, bytes32 _value) internal constant returns(bytes32) {\n        return getNextValue(self, item, ORDERED_SET_IDENTIFIER, _value);\n    }\n\n    function getNextValue(Config storage self, OrderedSet storage item, bytes32 _salt, bytes32 _value) private constant returns(bytes32) {\n        return get(self, item.nextValues, _salt, _value);\n    }\n\n    function getNextValue(Config storage self, OrderedUIntSet storage item, uint _value) internal constant returns(uint) {\n        return uint(getNextValue(self, item.innerSet, bytes32(_value)));\n    }\n\n    function getNextValue(Config storage self, OrderedAddressesSet storage item, bytes32 _value) internal constant returns(address) {\n        return address(getNextValue(self, item.innerSet, _value));\n    }\n\n    function getPreviousValue(Config storage self, OrderedSet storage item, bytes32 _value) internal constant returns(bytes32) {\n        return getPreviousValue(self, item, ORDERED_SET_IDENTIFIER, _value);\n    }\n\n    function getPreviousValue(Config storage self, OrderedSet storage item, bytes32 _salt, bytes32 _value) private constant returns(bytes32) {\n        return get(self, item.previousValues, _salt, _value);\n    }\n\n    function getPreviousValue(Config storage self, OrderedUIntSet storage item, uint _value) internal constant returns(uint) {\n        return uint(getPreviousValue(self, item.innerSet, bytes32(_value)));\n    }\n\n    function getPreviousValue(Config storage self, OrderedAddressesSet storage item, bytes32 _value) internal constant returns(address) {\n        return address(getPreviousValue(self, item.innerSet, _value));\n    }\n\n    function toBool(bytes32 self) constant returns(bool) {\n        return self != bytes32(0);\n    }\n\n    function toBytes32(bool self) constant returns(bytes32) {\n        return bytes32(self ? 1 : 0);\n    }\n\n    function toAddresses(bytes32[] memory self) constant returns(address[]) {\n        address[] memory result = new address[](self.length);\n        for (uint i = 0; i < self.length; i++) {\n            result[i] = address(self[i]);\n        }\n        return result;\n    }\n\n    function toUInt(bytes32[] memory self) constant returns(uint[]) {\n        uint[] memory result = new uint[](self.length);\n        for (uint i = 0; i < self.length; i++) {\n            result[i] = uint(self[i]);\n        }\n        return result;\n    }\n\n    function _setOrderedSetLink(Config storage self, Mapping storage link, bytes32 _salt, bytes32 from, bytes32 to) private {\n        if (from != 0x0) {\n            set(self, link, _salt, from, to);\n        }\n    }\n\n    function _deleteOrderedSetLink(Config storage self, Mapping storage link, bytes32 _salt, bytes32 from) private {\n        if (from != 0x0) {\n            set(self, link, _salt, from, 0x0);\n        }\n    }\n\n    /** @title Structure to incapsulate and organize iteration through different kinds of collections */\n    struct Iterator {\n        uint limit;\n        uint valuesLeft;\n        bytes32 currentValue;\n        bytes32 anchorKey;\n    }\n\n    function listIterator(Config storage self, OrderedSet storage item, bytes32 anchorKey, bytes32 startValue, uint limit) internal constant returns (Iterator) {\n        if (startValue == 0x0) {\n            return listIterator(self, item, anchorKey, limit);\n        }\n\n        return createIterator(anchorKey, startValue, limit);\n    }\n\n    function listIterator(Config storage self, OrderedUIntSet storage item, bytes32 anchorKey, uint startValue, uint limit) internal constant returns (Iterator) {\n        return listIterator(self, item.innerSet, anchorKey, bytes32(startValue), limit);\n    }\n\n    function listIterator(Config storage self, OrderedAddressesSet storage item, bytes32 anchorKey, address startValue, uint limit) internal constant returns (Iterator) {\n        return listIterator(self, item.innerSet, anchorKey, bytes32(startValue), limit);\n    }\n\n    function listIterator(Config storage self, OrderedSet storage item, uint limit) internal constant returns (Iterator) {\n        return listIterator(self, item, ORDERED_SET_IDENTIFIER, limit);\n    }\n\n    function listIterator(Config storage self, OrderedSet storage item, bytes32 anchorKey, uint limit) internal constant returns (Iterator) {\n        return createIterator(anchorKey, get(self, item.first, anchorKey), limit);\n    }\n\n    function listIterator(Config storage self, OrderedUIntSet storage item, uint limit) internal constant returns (Iterator) {\n        return listIterator(self, item.innerSet, limit);\n    }\n\n    function listIterator(Config storage self, OrderedUIntSet storage item, bytes32 anchorKey, uint limit) internal constant returns (Iterator) {\n        return listIterator(self, item.innerSet, anchorKey, limit);\n    }\n\n    function listIterator(Config storage self, OrderedAddressesSet storage item, uint limit) internal constant returns (Iterator) {\n        return listIterator(self, item.innerSet, limit);\n    }\n\n    function listIterator(Config storage self, OrderedAddressesSet storage item, uint limit, bytes32 anchorKey) internal constant returns (Iterator) {\n        return listIterator(self, item.innerSet, anchorKey, limit);\n    }\n\n    function listIterator(Config storage self, OrderedSet storage item) internal constant returns (Iterator) {\n        return listIterator(self, item, ORDERED_SET_IDENTIFIER);\n    }\n\n    function listIterator(Config storage self, OrderedSet storage item, bytes32 anchorKey) internal constant returns (Iterator) {\n        return listIterator(self, item, anchorKey, get(self, item.count, anchorKey));\n    }\n\n    function listIterator(Config storage self, OrderedUIntSet storage item) internal constant returns (Iterator) {\n        return listIterator(self, item.innerSet);\n    }\n\n    function listIterator(Config storage self, OrderedUIntSet storage item, bytes32 anchorKey) internal constant returns (Iterator) {\n        return listIterator(self, item.innerSet, anchorKey);\n    }\n\n    function listIterator(Config storage self, OrderedAddressesSet storage item) internal constant returns (Iterator) {\n        return listIterator(self, item.innerSet);\n    }\n\n    function listIterator(Config storage self, OrderedAddressesSet storage item, bytes32 anchorKey) internal constant returns (Iterator) {\n        return listIterator(self, item.innerSet, anchorKey);\n    }\n\n    function listIterator(Config storage self, Bytes32OrderedSetMapping storage item, bytes32 _key) internal constant returns (Iterator) {\n        return listIterator(self, item.innerMapping, _key);\n    }\n\n    function listIterator(Config storage self, UIntOrderedSetMapping storage item, bytes32 _key) internal constant returns (Iterator) {\n        return listIterator(self, item.innerMapping, _key);\n    }\n\n    function listIterator(Config storage self, AddressOrderedSetMapping storage item, bytes32 _key) internal constant returns (Iterator) {\n        return listIterator(self, item.innerMapping, _key);\n    }\n\n    function createIterator(bytes32 anchorKey, bytes32 startValue, uint limit) internal constant returns (Iterator) {\n        return Iterator({\n            currentValue: startValue,\n            limit: limit,\n            valuesLeft: limit,\n            anchorKey: anchorKey\n        });\n    }\n\n    function getNextWithIterator(Config storage self, OrderedSet storage item, Iterator iterator) internal returns(bytes32 _nextValue) {\n        if (!canGetNextWithIterator(self, item, iterator)) { throw; }\n\n        _nextValue = iterator.currentValue;\n\n        iterator.currentValue = getNextValue(self, item, iterator.anchorKey, iterator.currentValue);\n        iterator.valuesLeft -= 1;\n    }\n\n    function getNextWithIterator(Config storage self, OrderedUIntSet storage item, Iterator iterator) internal returns(uint _nextValue) {\n        return uint(getNextWithIterator(self, item.innerSet, iterator));\n    }\n\n    function getNextWithIterator(Config storage self, OrderedAddressesSet storage item, Iterator iterator) internal returns(address _nextValue) {\n        return address(getNextWithIterator(self, item.innerSet, iterator));\n    }\n\n    function getNextWithIterator(Config storage self, Bytes32OrderedSetMapping storage item, Iterator iterator) internal returns(bytes32 _nextValue) {\n        return getNextWithIterator(self, item.innerMapping, iterator);\n    }\n\n    function getNextWithIterator(Config storage self, UIntOrderedSetMapping storage item, Iterator iterator) internal returns(uint _nextValue) {\n        return uint(getNextWithIterator(self, item.innerMapping, iterator));\n    }\n\n    function getNextWithIterator(Config storage self, AddressOrderedSetMapping storage item, Iterator iterator) internal returns(address _nextValue) {\n        return address(getNextWithIterator(self, item.innerMapping, iterator));\n    }\n\n    function canGetNextWithIterator(Config storage self, OrderedSet storage item, Iterator iterator) internal constant returns(bool) {\n        if (iterator.valuesLeft == 0 || !includes(self, item, iterator.anchorKey, iterator.currentValue)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    function canGetNextWithIterator(Config storage self, OrderedUIntSet storage item, Iterator iterator) internal constant returns(bool) {\n        return canGetNextWithIterator(self, item.innerSet, iterator);\n    }\n\n    function canGetNextWithIterator(Config storage self, OrderedAddressesSet storage item, Iterator iterator) internal constant returns(bool) {\n        return canGetNextWithIterator(self, item.innerSet, iterator);\n    }\n\n    function canGetNextWithIterator(Config storage self, Bytes32OrderedSetMapping storage item, Iterator iterator) internal constant returns(bool) {\n        return canGetNextWithIterator(self, item.innerMapping, iterator);\n    }\n\n    function canGetNextWithIterator(Config storage self, UIntOrderedSetMapping storage item, Iterator iterator) internal constant returns(bool) {\n        return canGetNextWithIterator(self, item.innerMapping, iterator);\n    }\n\n    function canGetNextWithIterator(Config storage self, AddressOrderedSetMapping storage item, Iterator iterator) internal constant returns(bool) {\n        return canGetNextWithIterator(self, item.innerMapping, iterator);\n    }\n\n    function count(Iterator iterator) internal constant returns(uint) {\n        return iterator.valuesLeft;\n    }\n}\n","abiDocs":[{"constant":true,"inputs":[{"name":"self","type":"bytes32[]"}],"name":"toAddresses","payable":false,"stateMutability":"view","type":"function","signature":"toAddresses(bytes32[])","signatureHash":"486a8c62"},{"constant":true,"inputs":[{"name":"self","type":"bool"}],"name":"toBytes32","payable":false,"stateMutability":"view","type":"function","signature":"toBytes32(bool)","signatureHash":"5590e4d2"},{"constant":true,"inputs":[{"name":"self","type":"bytes32"}],"name":"toBool","payable":false,"stateMutability":"view","type":"function","signature":"toBool(bytes32)","signatureHash":"934e03a4"},{"constant":true,"inputs":[{"name":"self","type":"bytes32[]"}],"name":"toUInt","payable":false,"stateMutability":"view","type":"function","signature":"toUInt(bytes32[])","signatureHash":"ada9a9f0"}]}
