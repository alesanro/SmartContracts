{"title":"Contract serves as a library for AssetsManager to provide implementations for some statistics methods. Since statistics methods are needed no more, they will be removed in future releases.","fileName":"/contracts/core/lib/AssetsManagerAggregations.sol","name":"AssetsManagerAggregations","abi":[{"constant":true,"inputs":[{"name":"_tokenExtensionAddr","type":"address"},{"name":"_owner","type":"address"}],"name":"getAssetsForOwnerCount","outputs":[{"name":"count","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"_tokenExtensionAddr","type":"address"},{"name":"_owner","type":"address"},{"name":"_idx","type":"uint256"}],"name":"getAssetForOwnerAtIndex","outputs":[{"name":"","type":"bytes32"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"store","type":"StorageInterface.Config storage"},{"name":"_platformToExtension","type":"StorageInterface.AddressAddressMapping storage"},{"name":"_symbol","type":"bytes32"},{"name":"_token","type":"address"},{"name":"_user","type":"address"}],"name":"isAssetOwner","outputs":[{"name":"","type":"bool"}],"payable":false,"stateMutability":"view","type":"function"},{"constant":true,"inputs":[{"name":"store","type":"StorageInterface.Config storage"},{"name":"_userToPlatformsCollection","type":"StorageInterface.AddressesSetMapping storage"},{"name":"_userWithPlatformToOwnedSymbols","type":"StorageInterface.Bytes32SetMapping storage"},{"name":"_owner","type":"address"}],"name":"getSystemAssetsForOwnerCount","outputs":[{"name":"count","type":"uint256"}],"payable":false,"stateMutability":"view","type":"function"}],"source":"pragma solidity ^0.4.11;\n\nimport \"../storage/Storage.sol\";\nimport \"../storage/StorageInterface.sol\";\nimport \"../platform/ChronoBankPlatformInterface.sol\";\nimport \"../platform/ChronoBankAssetOwnershipManager.sol\";\nimport \"../platform/ChronoBankAssetProxyInterface.sol\";\nimport \"../../assets/PlatformsManagerInterface.sol\";\nimport \"../../assets/TokenManagementInterface.sol\";\n\n\n/**\n* @title Contract serves as a library for AssetsManager to provide implementations for some statistics methods.\n* Since statistics methods are needed no more, they will be removed in future releases.\n*/\nlibrary AssetsManagerAggregations {\n\n    using StorageInterface for *;\n\n    function getTokenExtension(\n        StorageInterface.Config storage store,\n        StorageInterface.AddressAddressMapping storage _platformToExtension,\n        address _platform\n    )\n    internal constant returns (address)\n    {\n        return store.get(_platformToExtension, _platform);\n    }\n\n    /**\n    * @dev Checks if symbol is really in ownership of user\n    */\n    function isAssetOwner(\n        StorageInterface.Config storage store,\n        StorageInterface.AddressAddressMapping storage _platformToExtension,\n        bytes32 _symbol,\n        address _token,\n        address _user\n    )\n    public constant returns (bool)\n    {\n        address _platform = ChronoBankAssetProxyInterface(_token).chronoBankPlatform();\n        address _tokenExtension = getTokenExtension(store, _platformToExtension, _platform);\n        address _assetOwnershipManager = TokenManagementInterface(_tokenExtension).getAssetOwnershipManager();\n        return ChronoBankAssetOwnershipManager(_assetOwnershipManager).hasAssetRights(_user, _symbol);\n    }\n\n    /**\n    * @dev Gets asset from a list of assets for provided user\n    */\n    function getAssetForOwnerAtIndex(\n        address _tokenExtensionAddr,\n        address _owner,\n        uint _idx\n    )\n    public constant returns (bytes32)\n    {\n        TokenManagementInterface _tokenExtension = TokenManagementInterface(_tokenExtensionAddr);\n        ChronoBankAssetOwnershipManager _assetsOwnershipManager = ChronoBankAssetOwnershipManager(_tokenExtension.getAssetOwnershipManager());\n\n        uint currentIdx = _idx - 1;\n        uint symbolsCount = _assetsOwnershipManager.symbolsCount();\n        uint symbolsIdx;\n        bytes32 _symbol;\n        for (symbolsIdx = _idx; symbolsIdx < symbolsCount; ++symbolsIdx) {\n            _symbol = _assetsOwnershipManager.symbols(symbolsIdx);\n            if (_assetsOwnershipManager.hasAssetRights(_owner, _symbol) && ++currentIdx == _idx) {\n                return _symbol;\n            }\n        }\n    }\n\n    /**\n    * @dev Gets a number of assets in ownership of provided user\n    */\n    function getAssetsForOwnerCount(\n        address _tokenExtensionAddr,\n        address _owner\n    )\n    public constant returns (uint count)\n    {\n        TokenManagementInterface _tokenExtension = TokenManagementInterface(_tokenExtensionAddr);\n        ChronoBankAssetOwnershipManager _assetsOwnershipManager = ChronoBankAssetOwnershipManager(_tokenExtension.getAssetOwnershipManager());\n\n        uint symbolsCount = _assetsOwnershipManager.symbolsCount();\n        uint symbolsIdx;\n        bytes32 _symbol;\n        for (symbolsIdx = 0; symbolsIdx < symbolsCount; ++symbolsIdx) {\n            _symbol = _assetsOwnershipManager.symbols(symbolsIdx);\n            if (_assetsOwnershipManager.hasAssetRights(_owner, _symbol)) {\n                count++;\n            }\n        }\n    }\n\n    /**\n    * @dev DEPRECATED. WILL BE REMOVED IN NEXT RELEASES\n    */\n    function getSystemAssetsForOwnerCount(\n        StorageInterface.Config storage store,\n        StorageInterface.AddressesSetMapping storage _userToPlatformsCollection,\n        StorageInterface.Bytes32SetMapping storage _userWithPlatformToOwnedSymbols,\n        address _owner\n    )\n    public constant returns (uint count)\n    {\n        bytes32 _ownerKey = bytes32(_owner);\n        uint _platformsCount = store.count(_userToPlatformsCollection, _ownerKey);\n        for (uint _platformIdx = 0; _platformIdx < _platformsCount; ++_platformIdx) {\n            count += store.count(_userWithPlatformToOwnedSymbols, keccak256(_owner, store.get(_userToPlatformsCollection, _ownerKey, _platformIdx)));\n        }\n    }\n\n    /**\n    * @dev DEPRECATED. WILL BE REMOVED IN NEXT RELEASES\n    */\n    function getManagers(\n        StorageInterface.Config storage store,\n        StorageInterface.AddressesSetMapping storage _symbolWithPlatformToUsers,\n        address _platformsManager,\n        address _owner\n    )\n    internal constant returns (address[] _managers)\n    {\n        PlatformsManagerInterface _platformsManagerInterface = PlatformsManagerInterface(_platformsManager);\n        uint _platformsCount = _platformsManagerInterface.getPlatformsForUserCount(_owner);\n        _managers = new address[](_numberOfManagers(_owner, _platformsManager));\n        uint _managersPointer = 0;\n        address[] memory _platformManagers;\n        for (uint _platformIdx = 0; _platformIdx < _platformsCount; ++_platformIdx) {\n            address _platform = _platformsManagerInterface.getPlatformForUserAtIndex(_owner, _platformIdx);\n            _platformManagers = getManagersForPlatform(store, _symbolWithPlatformToUsers, _platform);\n            _managersPointer = _copyArrayIntoArray(_platformManagers, _managers, _managersPointer);\n        }\n    }\n\n    /**\n    * @dev DEPRECATED. WILL BE REMOVED IN NEXT RELEASES\n    */\n    function getManagersForPlatform(\n        StorageInterface.Config storage store,\n        StorageInterface.AddressesSetMapping storage _symbolWithPlatformToUsers,\n        address _platform\n    )\n    private constant returns (address[] _managers)\n    {\n        ChronoBankPlatformInterface _managersRegistry = ChronoBankPlatformInterface(_platform);\n\n        uint _symbolsCount = _managersRegistry.symbolsCount();\n        _managers = new address[](ChronoBankManagersRegistry(_platform).holdersCount() * _symbolsCount);\n        uint _managersPointer;\n        address[] memory _symbolManagers;\n        bytes32 _symbol;\n        for (uint _symbolIdx = 0; _symbolIdx < _symbolsCount; ++_symbolIdx) {\n            _symbol = _managersRegistry.symbols(_symbolIdx);\n            _symbolManagers = store.get(_symbolWithPlatformToUsers, keccak256(_symbol, _platform));\n            _managersPointer = _copyArrayIntoArray(_symbolManagers, _managers, _managersPointer);\n        }\n    }\n\n    /**\n    * @dev DEPRECATED. WILL BE REMOVED IN NEXT RELEASES\n    */\n    function _copyArrayIntoArray(address[] _origin, address[] _destination, uint _pointer) private returns (uint) {\n        for (uint _originIdx = 0; _originIdx < _origin.length && _origin[_originIdx] != 0x0; ++_originIdx) {\n            _destination[_pointer++] = _origin[_originIdx];\n        }\n        return _pointer;\n    }\n\n    /**\n    * @dev DEPRECATED. WILL BE REMOVED IN NEXT RELEASES\n    */\n    function _numberOfManagers(address _owner, address _platformsManager) private constant returns (uint _count) {\n        PlatformsManagerInterface _platformsManagerInterface = PlatformsManagerInterface(_platformsManager);\n        uint _platformsCount = _platformsManagerInterface.getPlatformsForUserCount(_owner);\n\n        for (uint _platformIdx = 0; _platformIdx < _platformsCount; ++_platformIdx) {\n            address _platform = _platformsManagerInterface.getPlatformForUserAtIndex(_owner, _platformIdx);\n            _count += ChronoBankManagersRegistry(_platform).holdersCount() * ChronoBankPlatformInterface(_platform).symbolsCount();\n        }\n    }\n}\n","abiDocs":[{"constant":true,"inputs":[{"name":"_tokenExtensionAddr","type":"address"},{"name":"_owner","type":"address"}],"name":"getAssetsForOwnerCount","payable":false,"stateMutability":"view","type":"function","details":"Gets a number of assets in ownership of provided user","signature":"getAssetsForOwnerCount(address,address)","signatureHash":"17db1071"},{"constant":true,"inputs":[{"name":"_tokenExtensionAddr","type":"address"},{"name":"_owner","type":"address"},{"name":"_idx","type":"uint256"}],"name":"getAssetForOwnerAtIndex","payable":false,"stateMutability":"view","type":"function","details":"Gets asset from a list of assets for provided user","signature":"getAssetForOwnerAtIndex(address,address,uint256)","signatureHash":"2cd060ce"},{"constant":true,"inputs":[{"name":"store","type":"StorageInterface.Config storage"},{"name":"_platformToExtension","type":"StorageInterface.AddressAddressMapping storage"},{"name":"_symbol","type":"bytes32"},{"name":"_token","type":"address"},{"name":"_user","type":"address"}],"name":"isAssetOwner","payable":false,"stateMutability":"view","type":"function","details":"Checks if symbol is really in ownership of user","signature":"isAssetOwner(StorageInterface.Config storage,StorageInterface.AddressAddressMapping storage,bytes32,address,address)","signatureHash":"4231b30e"},{"constant":true,"inputs":[{"name":"store","type":"StorageInterface.Config storage"},{"name":"_userToPlatformsCollection","type":"StorageInterface.AddressesSetMapping storage"},{"name":"_userWithPlatformToOwnedSymbols","type":"StorageInterface.Bytes32SetMapping storage"},{"name":"_owner","type":"address"}],"name":"getSystemAssetsForOwnerCount","payable":false,"stateMutability":"view","type":"function","details":"DEPRECATED. WILL BE REMOVED IN NEXT RELEASES","signature":"getSystemAssetsForOwnerCount(StorageInterface.Config storage,StorageInterface.AddressesSetMapping storage,StorageInterface.Bytes32SetMapping storage,address)","signatureHash":"8c569aac"}]}
